

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 01 18:35:15 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	text111,global,reloc=2,class=CODE,delta=1
   128                           	psect	text112,global,reloc=2,class=CODE,delta=1
   129                           	psect	text113,global,reloc=2,class=CODE,delta=1
   130                           	psect	text114,global,reloc=2,class=CODE,delta=1
   131                           	psect	text115,global,reloc=2,class=CODE,delta=1
   132                           	psect	text116,global,reloc=2,class=CODE,delta=1
   133                           	psect	text117,global,reloc=2,class=CODE,delta=1
   134                           	psect	text118,global,reloc=2,class=CODE,delta=1
   135                           	psect	text119,global,reloc=2,class=CODE,delta=1
   136                           	psect	text120,global,reloc=2,class=CODE,delta=1
   137                           	psect	text121,global,reloc=2,class=CODE,delta=1
   138                           	psect	text122,global,reloc=2,class=CODE,delta=1
   139                           	psect	text123,global,reloc=2,class=CODE,delta=1
   140                           	psect	text124,global,reloc=2,class=CODE,delta=1
   141                           	psect	text125,global,reloc=2,class=CODE,delta=1
   142                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   143                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   144                           	psect	text127,global,reloc=2,class=CODE,delta=1
   145                           	psect	text128,global,reloc=2,class=CODE,delta=1
   146                           	psect	text129,global,reloc=2,class=CODE,delta=1
   147                           	psect	text130,global,reloc=2,class=CODE,delta=1
   148                           	psect	text131,global,reloc=2,class=CODE,delta=1
   149                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   150                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   151  0000                     
   152                           	psect	idataBANK0
   153  004E44                     __pidataBANK0:
   154                           	opt stack 0
   155                           
   156                           ;initializer for _heater_set_temp
   157  004E44  4B                 	db	75
   158                           
   159                           ;initializer for _tempSecond
   160  004E45  FF                 	db	255
   161                           
   162                           ;initializer for _wrap
   163  004E46  01                 	db	1
   164                           
   165                           ;initializer for _Heater_Set_Temp_Txt
   166  004E47  30                 	db	48
   167  004E48  37                 	db	55
   168  004E49  35                 	db	53
   169  004E4A  46                 	db	70
   170  004E4B  00                 	db	0
   171                           
   172                           ;initializer for _RPM_Txt
   173  004E4C  30                 	db	48
   174  004E4D  30                 	db	48
   175  004E4E  30                 	db	48
   176  004E4F  30                 	db	48
   177  004E50  00                 	db	0
   178                           
   179                           ;initializer for _Alarm_SW_Txt
   180  004E51  4F                 	db	79
   181  004E52  46                 	db	70
   182  004E53  46                 	db	70
   183  004E54  00                 	db	0
   184                           
   185                           ;initializer for _DC_Txt
   186  004E55  30                 	db	48
   187  004E56  30                 	db	48
   188  004E57  30                 	db	48
   189  004E58  00                 	db	0
   190                           
   191                           ;initializer for _Heater_SW_Txt
   192  004E59  4F                 	db	79
   193  004E5A  46                 	db	70
   194  004E5B  46                 	db	70
   195  004E5C  00                 	db	0
   196                           
   197                           ;initializer for _tempC
   198  004E5D  2B                 	db	43
   199  004E5E  32                 	db	50
   200  004E5F  35                 	db	53
   201  004E60  00                 	db	0
   202                           
   203                           ;initializer for _tempF
   204  004E61  2B                 	db	43
   205  004E62  37                 	db	55
   206  004E63  37                 	db	55
   207  004E64  00                 	db	0
   208                           
   209                           ;initializer for _RTC_ALARM_Txt
   210  004E65  30                 	db	48
   211  004E66  00                 	db	0
   212                           
   213                           	psect	idataBANK1
   214  004354                     __pidataBANK1:
   215                           	opt stack 0
   216                           
   217                           ;initializer for _buffer
   218  004354  20                 	db	32
   219  004355  45                 	db	69
   220  004356  43                 	db	67
   221  004357  45                 	db	69
   222  004358  33                 	db	51
   223  004359  33                 	db	51
   224  00435A  30                 	db	48
   225  00435B  31                 	db	49
   226  00435C  4C                 	db	76
   227  00435D  20                 	db	32
   228  00435E  46                 	db	70
   229  00435F  61                 	db	97
   230  004360  27                 	db	39
   231  004361  32                 	db	50
   232  004362  32                 	db	50
   233  004363  20                 	db	32
   234  004364  53                 	db	83
   235  004365  31                 	db	49
   236  004366  20                 	db	32
   237  004367  00                 	db	0
   238  004368  00                 	db	0
   239  004369  00                 	db	0
   240  00436A  00                 	db	0
   241  00436B  00                 	db	0
   242  00436C  00                 	db	0
   243  00436D  00                 	db	0
   244  00436E  00                 	db	0
   245  00436F  00                 	db	0
   246  004370  00                 	db	0
   247  004371  00                 	db	0
   248  004372  00                 	db	0
   249                           
   250                           ;initializer for _array1
   251  004373  A2                 	db	162
   252  004374  62                 	db	98
   253  004375  E2                 	db	226
   254  004376  22                 	db	34
   255  004377  02                 	db	2
   256  004378  C2                 	db	194
   257  004379  E0                 	db	224
   258  00437A  A8                 	db	168
   259  00437B  90                 	db	144
   260  00437C  68                 	db	104
   261  00437D  98                 	db	152
   262  00437E  B0                 	db	176
   263  00437F  30                 	db	48
   264  004380  18                 	db	24
   265  004381  7A                 	db	122
   266  004382  10                 	db	16
   267  004383  38                 	db	56
   268  004384  5A                 	db	90
   269  004385  42                 	db	66
   270  004386  4A                 	db	74
   271  004387  52                 	db	82
   272                           
   273                           ;initializer for _RGB
   274  004388  01                 	db	1
   275  004389  02                 	db	2
   276  00438A  03                 	db	3
   277  00438B  04                 	db	4
   278  00438C  05                 	db	5
   279  00438D  06                 	db	6
   280  00438E  07                 	db	7
   281                           
   282                           ;initializer for _alarm_time
   283  00438F  30                 	db	48
   284  004390  30                 	db	48
   285  004391  3A                 	db	58
   286  004392  30                 	db	48
   287  004393  30                 	db	48
   288  004394  3A                 	db	58
   289  004395  30                 	db	48
   290  004396  30                 	db	48
   291  004397  00                 	db	0
   292                           
   293                           ;initializer for _date
   294  004398  30                 	db	48
   295  004399  30                 	db	48
   296  00439A  2F                 	db	47
   297  00439B  30                 	db	48
   298  00439C  30                 	db	48
   299  00439D  2F                 	db	47
   300  00439E  30                 	db	48
   301  00439F  30                 	db	48
   302  0043A0  00                 	db	0
   303                           
   304                           ;initializer for _setup_alarm_time
   305  0043A1  30                 	db	48
   306  0043A2  30                 	db	48
   307  0043A3  3A                 	db	58
   308  0043A4  30                 	db	48
   309  0043A5  30                 	db	48
   310  0043A6  3A                 	db	58
   311  0043A7  30                 	db	48
   312  0043A8  30                 	db	48
   313  0043A9  00                 	db	0
   314                           
   315                           ;initializer for _setup_date
   316  0043AA  30                 	db	48
   317  0043AB  31                 	db	49
   318  0043AC  2F                 	db	47
   319  0043AD  30                 	db	48
   320  0043AE  31                 	db	49
   321  0043AF  2F                 	db	47
   322  0043B0  30                 	db	48
   323  0043B1  30                 	db	48
   324  0043B2  00                 	db	0
   325                           
   326                           ;initializer for _setup_time
   327  0043B3  30                 	db	48
   328  0043B4  30                 	db	48
   329  0043B5  3A                 	db	58
   330  0043B6  30                 	db	48
   331  0043B7  30                 	db	48
   332  0043B8  3A                 	db	58
   333  0043B9  30                 	db	48
   334  0043BA  30                 	db	48
   335  0043BB  00                 	db	0
   336                           
   337                           ;initializer for _time
   338  0043BC  30                 	db	48
   339  0043BD  30                 	db	48
   340  0043BE  3A                 	db	58
   341  0043BF  30                 	db	48
   342  0043C0  30                 	db	48
   343  0043C1  3A                 	db	58
   344  0043C2  30                 	db	48
   345  0043C3  30                 	db	48
   346  0043C4  00                 	db	0
   347                           
   348                           ;initializer for _Volt_Txt
   349  0043C5  30                 	db	48
   350  0043C6  2E                 	db	46
   351  0043C7  30                 	db	48
   352  0043C8  30                 	db	48
   353  0043C9  56                 	db	86
   354  0043CA  00                 	db	0
   355                           
   356                           ;initializer for _setup_heater_set_text
   357  0043CB  30                 	db	48
   358  0043CC  37                 	db	55
   359  0043CD  35                 	db	53
   360  0043CE  46                 	db	70
   361  0043CF  00                 	db	0
   362                           
   363                           	psect	mediumconst
   364  00FC36                     __pmediumconst:
   365                           	opt stack 0
   366  00FC36  00                 	db	0
   367  00FC37                     _font:
   368                           	opt stack 0
   369  00FC37  00                 	db	0
   370  00FC38  00                 	db	0
   371  00FC39  00                 	db	0
   372  00FC3A  00                 	db	0
   373  00FC3B  00                 	db	0
   374  00FC3C  00                 	db	0
   375  00FC3D  00                 	db	0
   376  00FC3E  5F                 	db	95
   377  00FC3F  00                 	db	0
   378  00FC40  00                 	db	0
   379  00FC41  00                 	db	0
   380  00FC42  07                 	db	7
   381  00FC43  00                 	db	0
   382  00FC44  07                 	db	7
   383  00FC45  00                 	db	0
   384  00FC46  14                 	db	20
   385  00FC47  7F                 	db	127
   386  00FC48  14                 	db	20
   387  00FC49  7F                 	db	127
   388  00FC4A  14                 	db	20
   389  00FC4B  24                 	db	36
   390  00FC4C  2A                 	db	42
   391  00FC4D  7F                 	db	127
   392  00FC4E  2A                 	db	42
   393  00FC4F  12                 	db	18
   394  00FC50  23                 	db	35
   395  00FC51  13                 	db	19
   396  00FC52  08                 	db	8
   397  00FC53  64                 	db	100
   398  00FC54  62                 	db	98
   399  00FC55  36                 	db	54
   400  00FC56  49                 	db	73
   401  00FC57  56                 	db	86
   402  00FC58  20                 	db	32
   403  00FC59  50                 	db	80
   404  00FC5A  00                 	db	0
   405  00FC5B  08                 	db	8
   406  00FC5C  07                 	db	7
   407  00FC5D  03                 	db	3
   408  00FC5E  00                 	db	0
   409  00FC5F  00                 	db	0
   410  00FC60  1C                 	db	28
   411  00FC61  22                 	db	34
   412  00FC62  41                 	db	65
   413  00FC63  00                 	db	0
   414  00FC64  00                 	db	0
   415  00FC65  41                 	db	65
   416  00FC66  22                 	db	34
   417  00FC67  1C                 	db	28
   418  00FC68  00                 	db	0
   419  00FC69  2A                 	db	42
   420  00FC6A  1C                 	db	28
   421  00FC6B  7F                 	db	127
   422  00FC6C  1C                 	db	28
   423  00FC6D  2A                 	db	42
   424  00FC6E  08                 	db	8
   425  00FC6F  08                 	db	8
   426  00FC70  3E                 	db	62
   427  00FC71  08                 	db	8
   428  00FC72  08                 	db	8
   429  00FC73  00                 	db	0
   430  00FC74  80                 	db	128
   431  00FC75  70                 	db	112
   432  00FC76  30                 	db	48
   433  00FC77  00                 	db	0
   434  00FC78  08                 	db	8
   435  00FC79  08                 	db	8
   436  00FC7A  08                 	db	8
   437  00FC7B  08                 	db	8
   438  00FC7C  08                 	db	8
   439  00FC7D  00                 	db	0
   440  00FC7E  00                 	db	0
   441  00FC7F  60                 	db	96
   442  00FC80  60                 	db	96
   443  00FC81  00                 	db	0
   444  00FC82  20                 	db	32
   445  00FC83  10                 	db	16
   446  00FC84  08                 	db	8
   447  00FC85  04                 	db	4
   448  00FC86  02                 	db	2
   449  00FC87  3E                 	db	62
   450  00FC88  51                 	db	81
   451  00FC89  49                 	db	73
   452  00FC8A  45                 	db	69
   453  00FC8B  3E                 	db	62
   454  00FC8C  00                 	db	0
   455  00FC8D  42                 	db	66
   456  00FC8E  7F                 	db	127
   457  00FC8F  40                 	db	64
   458  00FC90  00                 	db	0
   459  00FC91  72                 	db	114
   460  00FC92  49                 	db	73
   461  00FC93  49                 	db	73
   462  00FC94  49                 	db	73
   463  00FC95  46                 	db	70
   464  00FC96  21                 	db	33
   465  00FC97  41                 	db	65
   466  00FC98  49                 	db	73
   467  00FC99  4D                 	db	77
   468  00FC9A  33                 	db	51
   469  00FC9B  18                 	db	24
   470  00FC9C  14                 	db	20
   471  00FC9D  12                 	db	18
   472  00FC9E  7F                 	db	127
   473  00FC9F  10                 	db	16
   474  00FCA0  27                 	db	39
   475  00FCA1  45                 	db	69
   476  00FCA2  45                 	db	69
   477  00FCA3  45                 	db	69
   478  00FCA4  39                 	db	57
   479  00FCA5  3C                 	db	60
   480  00FCA6  4A                 	db	74
   481  00FCA7  49                 	db	73
   482  00FCA8  49                 	db	73
   483  00FCA9  31                 	db	49
   484  00FCAA  41                 	db	65
   485  00FCAB  21                 	db	33
   486  00FCAC  11                 	db	17
   487  00FCAD  09                 	db	9
   488  00FCAE  07                 	db	7
   489  00FCAF  36                 	db	54
   490  00FCB0  49                 	db	73
   491  00FCB1  49                 	db	73
   492  00FCB2  49                 	db	73
   493  00FCB3  36                 	db	54
   494  00FCB4  46                 	db	70
   495  00FCB5  49                 	db	73
   496  00FCB6  49                 	db	73
   497  00FCB7  29                 	db	41
   498  00FCB8  1E                 	db	30
   499  00FCB9  00                 	db	0
   500  00FCBA  00                 	db	0
   501  00FCBB  14                 	db	20
   502  00FCBC  00                 	db	0
   503  00FCBD  00                 	db	0
   504  00FCBE  00                 	db	0
   505  00FCBF  40                 	db	64
   506  00FCC0  34                 	db	52
   507  00FCC1  00                 	db	0
   508  00FCC2  00                 	db	0
   509  00FCC3  00                 	db	0
   510  00FCC4  08                 	db	8
   511  00FCC5  14                 	db	20
   512  00FCC6  22                 	db	34
   513  00FCC7  41                 	db	65
   514  00FCC8  14                 	db	20
   515  00FCC9  14                 	db	20
   516  00FCCA  14                 	db	20
   517  00FCCB  14                 	db	20
   518  00FCCC  14                 	db	20
   519  00FCCD  00                 	db	0
   520  00FCCE  41                 	db	65
   521  00FCCF  22                 	db	34
   522  00FCD0  14                 	db	20
   523  00FCD1  08                 	db	8
   524  00FCD2  02                 	db	2
   525  00FCD3  01                 	db	1
   526  00FCD4  59                 	db	89
   527  00FCD5  09                 	db	9
   528  00FCD6  06                 	db	6
   529  00FCD7  3E                 	db	62
   530  00FCD8  41                 	db	65
   531  00FCD9  5D                 	db	93
   532  00FCDA  59                 	db	89
   533  00FCDB  4E                 	db	78
   534  00FCDC  7C                 	db	124
   535  00FCDD  12                 	db	18
   536  00FCDE  11                 	db	17
   537  00FCDF  12                 	db	18
   538  00FCE0  7C                 	db	124
   539  00FCE1  7F                 	db	127
   540  00FCE2  49                 	db	73
   541  00FCE3  49                 	db	73
   542  00FCE4  49                 	db	73
   543  00FCE5  36                 	db	54
   544  00FCE6  3E                 	db	62
   545  00FCE7  41                 	db	65
   546  00FCE8  41                 	db	65
   547  00FCE9  41                 	db	65
   548  00FCEA  22                 	db	34
   549  00FCEB  7F                 	db	127
   550  00FCEC  41                 	db	65
   551  00FCED  41                 	db	65
   552  00FCEE  41                 	db	65
   553  00FCEF  3E                 	db	62
   554  00FCF0  7F                 	db	127
   555  00FCF1  49                 	db	73
   556  00FCF2  49                 	db	73
   557  00FCF3  49                 	db	73
   558  00FCF4  41                 	db	65
   559  00FCF5  7F                 	db	127
   560  00FCF6  09                 	db	9
   561  00FCF7  09                 	db	9
   562  00FCF8  09                 	db	9
   563  00FCF9  01                 	db	1
   564  00FCFA  3E                 	db	62
   565  00FCFB  41                 	db	65
   566  00FCFC  41                 	db	65
   567  00FCFD  51                 	db	81
   568  00FCFE  73                 	db	115
   569  00FCFF  7F                 	db	127
   570  00FD00  08                 	db	8
   571  00FD01  08                 	db	8
   572  00FD02  08                 	db	8
   573  00FD03  7F                 	db	127
   574  00FD04  00                 	db	0
   575  00FD05  41                 	db	65
   576  00FD06  7F                 	db	127
   577  00FD07  41                 	db	65
   578  00FD08  00                 	db	0
   579  00FD09  20                 	db	32
   580  00FD0A  40                 	db	64
   581  00FD0B  41                 	db	65
   582  00FD0C  3F                 	db	63
   583  00FD0D  01                 	db	1
   584  00FD0E  7F                 	db	127
   585  00FD0F  08                 	db	8
   586  00FD10  14                 	db	20
   587  00FD11  22                 	db	34
   588  00FD12  41                 	db	65
   589  00FD13  7F                 	db	127
   590  00FD14  40                 	db	64
   591  00FD15  40                 	db	64
   592  00FD16  40                 	db	64
   593  00FD17  40                 	db	64
   594  00FD18  7F                 	db	127
   595  00FD19  02                 	db	2
   596  00FD1A  1C                 	db	28
   597  00FD1B  02                 	db	2
   598  00FD1C  7F                 	db	127
   599  00FD1D  7F                 	db	127
   600  00FD1E  04                 	db	4
   601  00FD1F  08                 	db	8
   602  00FD20  10                 	db	16
   603  00FD21  7F                 	db	127
   604  00FD22  3E                 	db	62
   605  00FD23  41                 	db	65
   606  00FD24  41                 	db	65
   607  00FD25  41                 	db	65
   608  00FD26  3E                 	db	62
   609  00FD27  7F                 	db	127
   610  00FD28  09                 	db	9
   611  00FD29  09                 	db	9
   612  00FD2A  09                 	db	9
   613  00FD2B  06                 	db	6
   614  00FD2C  3E                 	db	62
   615  00FD2D  41                 	db	65
   616  00FD2E  51                 	db	81
   617  00FD2F  21                 	db	33
   618  00FD30  5E                 	db	94
   619  00FD31  7F                 	db	127
   620  00FD32  09                 	db	9
   621  00FD33  19                 	db	25
   622  00FD34  29                 	db	41
   623  00FD35  46                 	db	70
   624  00FD36                     __end_of_font:
   625                           	opt stack 0
   626  00FD36                     _font2:
   627                           	opt stack 0
   628  00FD36  26                 	db	38
   629  00FD37  49                 	db	73
   630  00FD38  49                 	db	73
   631  00FD39  49                 	db	73
   632  00FD3A  32                 	db	50
   633  00FD3B  03                 	db	3
   634  00FD3C  01                 	db	1
   635  00FD3D  7F                 	db	127
   636  00FD3E  01                 	db	1
   637  00FD3F  03                 	db	3
   638  00FD40  3F                 	db	63
   639  00FD41  40                 	db	64
   640  00FD42  40                 	db	64
   641  00FD43  40                 	db	64
   642  00FD44  3F                 	db	63
   643  00FD45  1F                 	db	31
   644  00FD46  20                 	db	32
   645  00FD47  40                 	db	64
   646  00FD48  20                 	db	32
   647  00FD49  1F                 	db	31
   648  00FD4A  3F                 	db	63
   649  00FD4B  40                 	db	64
   650  00FD4C  38                 	db	56
   651  00FD4D  40                 	db	64
   652  00FD4E  3F                 	db	63
   653  00FD4F  63                 	db	99
   654  00FD50  14                 	db	20
   655  00FD51  08                 	db	8
   656  00FD52  14                 	db	20
   657  00FD53  63                 	db	99
   658  00FD54  03                 	db	3
   659  00FD55  04                 	db	4
   660  00FD56  78                 	db	120
   661  00FD57  04                 	db	4
   662  00FD58  03                 	db	3
   663  00FD59  61                 	db	97
   664  00FD5A  59                 	db	89
   665  00FD5B  49                 	db	73
   666  00FD5C  4D                 	db	77
   667  00FD5D  43                 	db	67
   668  00FD5E  00                 	db	0
   669  00FD5F  7F                 	db	127
   670  00FD60  41                 	db	65
   671  00FD61  41                 	db	65
   672  00FD62  41                 	db	65
   673  00FD63  02                 	db	2
   674  00FD64  04                 	db	4
   675  00FD65  08                 	db	8
   676  00FD66  10                 	db	16
   677  00FD67  20                 	db	32
   678  00FD68  00                 	db	0
   679  00FD69  41                 	db	65
   680  00FD6A  41                 	db	65
   681  00FD6B  41                 	db	65
   682  00FD6C  7F                 	db	127
   683  00FD6D  04                 	db	4
   684  00FD6E  02                 	db	2
   685  00FD6F  01                 	db	1
   686  00FD70  02                 	db	2
   687  00FD71  04                 	db	4
   688  00FD72  40                 	db	64
   689  00FD73  40                 	db	64
   690  00FD74  40                 	db	64
   691  00FD75  40                 	db	64
   692  00FD76  40                 	db	64
   693  00FD77  00                 	db	0
   694  00FD78  03                 	db	3
   695  00FD79  07                 	db	7
   696  00FD7A  08                 	db	8
   697  00FD7B  00                 	db	0
   698  00FD7C  20                 	db	32
   699  00FD7D  54                 	db	84
   700  00FD7E  54                 	db	84
   701  00FD7F  78                 	db	120
   702  00FD80  40                 	db	64
   703  00FD81  7F                 	db	127
   704  00FD82  28                 	db	40
   705  00FD83  44                 	db	68
   706  00FD84  44                 	db	68
   707  00FD85  38                 	db	56
   708  00FD86  38                 	db	56
   709  00FD87  44                 	db	68
   710  00FD88  44                 	db	68
   711  00FD89  44                 	db	68
   712  00FD8A  28                 	db	40
   713  00FD8B  38                 	db	56
   714  00FD8C  44                 	db	68
   715  00FD8D  44                 	db	68
   716  00FD8E  28                 	db	40
   717  00FD8F  7F                 	db	127
   718  00FD90  38                 	db	56
   719  00FD91  54                 	db	84
   720  00FD92  54                 	db	84
   721  00FD93  54                 	db	84
   722  00FD94  18                 	db	24
   723  00FD95  00                 	db	0
   724  00FD96  08                 	db	8
   725  00FD97  7E                 	db	126
   726  00FD98  09                 	db	9
   727  00FD99  02                 	db	2
   728  00FD9A  18                 	db	24
   729  00FD9B  A4                 	db	164
   730  00FD9C  A4                 	db	164
   731  00FD9D  9C                 	db	156
   732  00FD9E  78                 	db	120
   733  00FD9F  7F                 	db	127
   734  00FDA0  08                 	db	8
   735  00FDA1  04                 	db	4
   736  00FDA2  04                 	db	4
   737  00FDA3  78                 	db	120
   738  00FDA4  00                 	db	0
   739  00FDA5  44                 	db	68
   740  00FDA6  7D                 	db	125
   741  00FDA7  40                 	db	64
   742  00FDA8  00                 	db	0
   743  00FDA9  20                 	db	32
   744  00FDAA  40                 	db	64
   745  00FDAB  40                 	db	64
   746  00FDAC  3D                 	db	61
   747  00FDAD  00                 	db	0
   748  00FDAE  7F                 	db	127
   749  00FDAF  10                 	db	16
   750  00FDB0  28                 	db	40
   751  00FDB1  44                 	db	68
   752  00FDB2  00                 	db	0
   753  00FDB3  00                 	db	0
   754  00FDB4  41                 	db	65
   755  00FDB5  7F                 	db	127
   756  00FDB6  40                 	db	64
   757  00FDB7  00                 	db	0
   758  00FDB8  7C                 	db	124
   759  00FDB9  04                 	db	4
   760  00FDBA  78                 	db	120
   761  00FDBB  04                 	db	4
   762  00FDBC  78                 	db	120
   763  00FDBD  7C                 	db	124
   764  00FDBE  08                 	db	8
   765  00FDBF  04                 	db	4
   766  00FDC0  04                 	db	4
   767  00FDC1  78                 	db	120
   768  00FDC2  38                 	db	56
   769  00FDC3  44                 	db	68
   770  00FDC4  44                 	db	68
   771  00FDC5  44                 	db	68
   772  00FDC6  38                 	db	56
   773  00FDC7  FC                 	db	252
   774  00FDC8  18                 	db	24
   775  00FDC9  24                 	db	36
   776  00FDCA  24                 	db	36
   777  00FDCB  18                 	db	24
   778  00FDCC  18                 	db	24
   779  00FDCD  24                 	db	36
   780  00FDCE  24                 	db	36
   781  00FDCF  18                 	db	24
   782  00FDD0  FC                 	db	252
   783  00FDD1  7C                 	db	124
   784  00FDD2  08                 	db	8
   785  00FDD3  04                 	db	4
   786  00FDD4  04                 	db	4
   787  00FDD5  08                 	db	8
   788  00FDD6  48                 	db	72
   789  00FDD7  54                 	db	84
   790  00FDD8  54                 	db	84
   791  00FDD9  54                 	db	84
   792  00FDDA  24                 	db	36
   793  00FDDB  04                 	db	4
   794  00FDDC  04                 	db	4
   795  00FDDD  3F                 	db	63
   796  00FDDE  44                 	db	68
   797  00FDDF  24                 	db	36
   798  00FDE0  3C                 	db	60
   799  00FDE1  40                 	db	64
   800  00FDE2  40                 	db	64
   801  00FDE3  20                 	db	32
   802  00FDE4  7C                 	db	124
   803  00FDE5  1C                 	db	28
   804  00FDE6  20                 	db	32
   805  00FDE7  40                 	db	64
   806  00FDE8  20                 	db	32
   807  00FDE9  1C                 	db	28
   808  00FDEA  3C                 	db	60
   809  00FDEB  40                 	db	64
   810  00FDEC  30                 	db	48
   811  00FDED  40                 	db	64
   812  00FDEE  3C                 	db	60
   813  00FDEF  44                 	db	68
   814  00FDF0  28                 	db	40
   815  00FDF1  10                 	db	16
   816  00FDF2  28                 	db	40
   817  00FDF3  44                 	db	68
   818  00FDF4  4C                 	db	76
   819  00FDF5  90                 	db	144
   820  00FDF6  90                 	db	144
   821  00FDF7  90                 	db	144
   822  00FDF8  7C                 	db	124
   823  00FDF9  44                 	db	68
   824  00FDFA  64                 	db	100
   825  00FDFB  54                 	db	84
   826  00FDFC  4C                 	db	76
   827  00FDFD  44                 	db	68
   828  00FDFE  00                 	db	0
   829  00FDFF  08                 	db	8
   830  00FE00  36                 	db	54
   831  00FE01  41                 	db	65
   832  00FE02  00                 	db	0
   833  00FE03  00                 	db	0
   834  00FE04  00                 	db	0
   835  00FE05  77                 	db	119
   836  00FE06  00                 	db	0
   837  00FE07  00                 	db	0
   838  00FE08  00                 	db	0
   839  00FE09  41                 	db	65
   840  00FE0A  36                 	db	54
   841  00FE0B  08                 	db	8
   842  00FE0C  00                 	db	0
   843  00FE0D  02                 	db	2
   844  00FE0E  01                 	db	1
   845  00FE0F  02                 	db	2
   846  00FE10  04                 	db	4
   847  00FE11  02                 	db	2
   848  00FE12                     __end_of_font2:
   849                           	opt stack 0
   850  00FE12                     _dpowers:
   851                           	opt stack 0
   852  00FE12  0001               	dw	1
   853  00FE14  0000               	dw	0
   854  00FE16  000A               	dw	10
   855  00FE18  0000               	dw	0
   856  00FE1A  0064               	dw	100
   857  00FE1C  0000               	dw	0
   858  00FE1E  03E8               	dw	1000
   859  00FE20  0000               	dw	0
   860  00FE22  2710               	dw	10000
   861  00FE24  0000               	dw	0
   862  00FE26  86A0               	dw	34464
   863  00FE28  0001               	dw	1
   864  00FE2A  4240               	dw	16960
   865  00FE2C  000F               	dw	15
   866  00FE2E  9680               	dw	38528
   867  00FE30  0098               	dw	152
   868  00FE32  E100               	dw	57600
   869  00FE34  05F5               	dw	1525
   870  00FE36  CA00               	dw	51712
   871  00FE38  3B9A               	dw	15258
   872  00FE3A                     __end_of_dpowers:
   873                           	opt stack 0
   874  00FE3A                     __npowers_:
   875                           	opt stack 0
   876  00FE3A  00                 	db	0
   877  00FE3B  80                 	db	128
   878  00FE3C  3F                 	db	63
   879  00FE3D  CD                 	db	205
   880  00FE3E  CC                 	db	204
   881  00FE3F  3D                 	db	61
   882  00FE40  D7                 	db	215
   883  00FE41  23                 	db	35
   884  00FE42  3C                 	db	60
   885  00FE43  12                 	db	18
   886  00FE44  83                 	db	131
   887  00FE45  3A                 	db	58
   888  00FE46  B7                 	db	183
   889  00FE47  D1                 	db	209
   890  00FE48  38                 	db	56
   891  00FE49  C6                 	db	198
   892  00FE4A  27                 	db	39
   893  00FE4B  37                 	db	55
   894  00FE4C  38                 	db	56
   895  00FE4D  86                 	db	134
   896  00FE4E  35                 	db	53
   897  00FE4F  C0                 	db	192
   898  00FE50  D6                 	db	214
   899  00FE51  33                 	db	51
   900  00FE52  CC                 	db	204
   901  00FE53  2B                 	db	43
   902  00FE54  32                 	db	50
   903  00FE55  70                 	db	112
   904  00FE56  89                 	db	137
   905  00FE57  30                 	db	48
   906  00FE58  E7                 	db	231
   907  00FE59  DB                 	db	219
   908  00FE5A  2E                 	db	46
   909  00FE5B  E5                 	db	229
   910  00FE5C  3C                 	db	60
   911  00FE5D  1E                 	db	30
   912  00FE5E  42                 	db	66
   913  00FE5F  A2                 	db	162
   914  00FE60  0D                 	db	13
   915  00FE61                     __end_of__npowers_:
   916                           	opt stack 0
   917  00FE61                     __powers_:
   918                           	opt stack 0
   919  00FE61  00                 	db	0
   920  00FE62  80                 	db	128
   921  00FE63  3F                 	db	63
   922  00FE64  00                 	db	0
   923  00FE65  20                 	db	32
   924  00FE66  41                 	db	65
   925  00FE67  00                 	db	0
   926  00FE68  C8                 	db	200
   927  00FE69  42                 	db	66
   928  00FE6A  00                 	db	0
   929  00FE6B  7A                 	db	122
   930  00FE6C  44                 	db	68
   931  00FE6D  40                 	db	64
   932  00FE6E  1C                 	db	28
   933  00FE6F  46                 	db	70
   934  00FE70  50                 	db	80
   935  00FE71  C3                 	db	195
   936  00FE72  47                 	db	71
   937  00FE73  24                 	db	36
   938  00FE74  74                 	db	116
   939  00FE75  49                 	db	73
   940  00FE76  97                 	db	151
   941  00FE77  18                 	db	24
   942  00FE78  4B                 	db	75
   943  00FE79  BC                 	db	188
   944  00FE7A  BE                 	db	190
   945  00FE7B  4C                 	db	76
   946  00FE7C  6B                 	db	107
   947  00FE7D  6E                 	db	110
   948  00FE7E  4E                 	db	78
   949  00FE7F  03                 	db	3
   950  00FE80  15                 	db	21
   951  00FE81  50                 	db	80
   952  00FE82  79                 	db	121
   953  00FE83  AD                 	db	173
   954  00FE84  60                 	db	96
   955  00FE85  F3                 	db	243
   956  00FE86  49                 	db	73
   957  00FE87  71                 	db	113
   958  00FE88                     __end_of__powers_:
   959                           	opt stack 0
   960  00FE88                     _hexpowers:
   961                           	opt stack 0
   962  00FE88  0001               	dw	1
   963  00FE8A  0000               	dw	0
   964  00FE8C  0010               	dw	16
   965  00FE8E  0000               	dw	0
   966  00FE90  0100               	dw	256
   967  00FE92  0000               	dw	0
   968  00FE94  1000               	dw	4096
   969  00FE96  0000               	dw	0
   970  00FE98  0000               	dw	0
   971  00FE9A  0001               	dw	1
   972  00FE9C  0000               	dw	0
   973  00FE9E  0010               	dw	16
   974  00FEA0  0000               	dw	0
   975  00FEA2  0100               	dw	256
   976  00FEA4  0000               	dw	0
   977  00FEA6  1000               	dw	4096
   978  00FEA8                     __end_of_hexpowers:
   979                           	opt stack 0
   980  0000                     _ADCON0	set	4034
   981  0000                     _ADCON0bits	set	4034
   982  0000                     _ADCON1	set	4033
   983  0000                     _ADCON2	set	4032
   984  0000                     _ADRESH	set	4036
   985  0000                     _ADRESL	set	4035
   986  0000                     _CCP1CON	set	4029
   987  0000                     _CCP2CON	set	4026
   988  0000                     _CCPR1L	set	4030
   989  0000                     _CCPR2L	set	4027
   990  0000                     _INTCON2bits	set	4081
   991  0000                     _INTCON3bits	set	4080
   992  0000                     _INTCONbits	set	4082
   993  0000                     _OSCCON	set	4051
   994  0000                     _PIE1bits	set	3997
   995  0000                     _PIR1bits	set	3998
   996  0000                     _PORTA	set	3968
   997  0000                     _PORTBbits	set	3969
   998  0000                     _PORTCbits	set	3970
   999  0000                     _PORTD	set	3971
  1000  0000                     _PORTE	set	3972
  1001  0000                     _PORTEbits	set	3972
  1002  0000                     _PR2	set	4043
  1003  0000                     _RCSTA	set	4011
  1004  0000                     _RCSTAbits	set	4011
  1005  0000                     _SPBRG	set	4015
  1006  0000                     _SPBRGH	set	4016
  1007  0000                     _SSPBUF	set	4041
  1008  0000                     _SSPCON1	set	4038
  1009  0000                     _SSPSTAT	set	4039
  1010  0000                     _SSPSTATbits	set	4039
  1011  0000                     _T0CON	set	4053
  1012  0000                     _T0CONbits	set	4053
  1013  0000                     _T1CON	set	4045
  1014  0000                     _T1CONbits	set	4045
  1015  0000                     _T2CON	set	4042
  1016  0000                     _T3CON	set	4017
  1017  0000                     _TMR0H	set	4055
  1018  0000                     _TMR0L	set	4054
  1019  0000                     _TMR1H	set	4047
  1020  0000                     _TMR1L	set	4046
  1021  0000                     _TMR3L	set	4018
  1022  0000                     _TRISA	set	3986
  1023  0000                     _TRISB	set	3987
  1024  0000                     _TRISBbits	set	3987
  1025  0000                     _TRISC	set	3988
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _TRISD	set	3989
  1028  0000                     _TRISE	set	3990
  1029  0000                     _TXREG	set	4013
  1030  0000                     _TXSTA	set	4012
  1031  0000                     _TXSTAbits	set	4012
  1032  0000                     _RBPU	set	32655
  1033  0000                     _TRMT	set	32097
  1034  00FEA8                     STR_1:
  1035                           
  1036                           ; BSR set to: 0
  1037  00FEA8  25                 	db	37
  1038  00FEA9  30                 	db	48	;'0'
  1039  00FEAA  32                 	db	50	;'2'
  1040  00FEAB  78                 	db	120	;'x'
  1041  00FEAC  3A                 	db	58	;':'
  1042  00FEAD  25                 	db	37
  1043  00FEAE  30                 	db	48	;'0'
  1044  00FEAF  32                 	db	50	;'2'
  1045  00FEB0  78                 	db	120	;'x'
  1046  00FEB1  3A                 	db	58	;':'
  1047  00FEB2  25                 	db	37
  1048  00FEB3  30                 	db	48	;'0'
  1049  00FEB4  32                 	db	50	;'2'
  1050  00FEB5  78                 	db	120	;'x'
  1051  00FEB6  20                 	db	32
  1052  00FEB7  25                 	db	37
  1053  00FEB8  30                 	db	48	;'0'
  1054  00FEB9  32                 	db	50	;'2'
  1055  00FEBA  78                 	db	120	;'x'
  1056  00FEBB  2F                 	db	47
  1057  00FEBC  25                 	db	37
  1058  00FEBD  30                 	db	48	;'0'
  1059  00FEBE  32                 	db	50	;'2'
  1060  00FEBF  78                 	db	120	;'x'
  1061  00FEC0  2F                 	db	47
  1062  00FEC1  25                 	db	37
  1063  00FEC2  30                 	db	48	;'0'
  1064  00FEC3  32                 	db	50	;'2'
  1065  00FEC4  78                 	db	120	;'x'
  1066  00FEC5  00                 	db	0
  1067  00FEC6                     STR_3:
  1068                           
  1069                           ; BSR set to: 0
  1070  00FEC6  61                 	db	97	;'a'
  1071  00FEC7  6C                 	db	108	;'l'
  1072  00FEC8  61                 	db	97	;'a'
  1073  00FEC9  72                 	db	114	;'r'
  1074  00FECA  6D                 	db	109	;'m'
  1075  00FECB  20                 	db	32
  1076  00FECC  3D                 	db	61	;'='
  1077  00FECD  20                 	db	32
  1078  00FECE  25                 	db	37
  1079  00FECF  64                 	db	100	;'d'
  1080  00FED0  20                 	db	32
  1081  00FED1  48                 	db	72	;'H'
  1082  00FED2  65                 	db	101	;'e'
  1083  00FED3  61                 	db	97	;'a'
  1084  00FED4  74                 	db	116	;'t'
  1085  00FED5  65                 	db	101	;'e'
  1086  00FED6  72                 	db	114	;'r'
  1087  00FED7  20                 	db	32
  1088  00FED8  3D                 	db	61	;'='
  1089  00FED9  20                 	db	32
  1090  00FEDA  25                 	db	37
  1091  00FEDB  64                 	db	100	;'d'
  1092  00FEDC  20                 	db	32
  1093  00FEDD  00                 	db	0
  1094  00FEDE                     STR_37:
  1095                           
  1096                           ; BSR set to: 0
  1097  00FEDE  43                 	db	67	;'C'
  1098  00FEDF  61                 	db	97	;'a'
  1099  00FEE0  6E                 	db	110	;'n'
  1100  00FEE1  6E                 	db	110	;'n'
  1101  00FEE2  6F                 	db	111	;'o'
  1102  00FEE3  74                 	db	116	;'t'
  1103  00FEE4  20                 	db	32
  1104  00FEE5  66                 	db	102	;'f'
  1105  00FEE6  69                 	db	105	;'i'
  1106  00FEE7  6E                 	db	110	;'n'
  1107  00FEE8  64                 	db	100	;'d'
  1108  00FEE9  20                 	db	32
  1109  00FEEA  62                 	db	98	;'b'
  1110  00FEEB  75                 	db	117	;'u'
  1111  00FEEC  74                 	db	116	;'t'
  1112  00FEED  74                 	db	116	;'t'
  1113  00FEEE  6F                 	db	111	;'o'
  1114  00FEEF  6E                 	db	110	;'n'
  1115  00FEF0  20                 	db	32
  1116  00FEF1  0D                 	db	13
  1117  00FEF2  0A                 	db	10
  1118  00FEF3  00                 	db	0
  1119  00FEF4                     STR_2:
  1120                           
  1121                           ; BSR set to: 0
  1122  00FEF4  20                 	db	32
  1123  00FEF5  54                 	db	84	;'T'
  1124  00FEF6  65                 	db	101	;'e'
  1125  00FEF7  6D                 	db	109	;'m'
  1126  00FEF8  70                 	db	112	;'p'
  1127  00FEF9  20                 	db	32
  1128  00FEFA  3D                 	db	61	;'='
  1129  00FEFB  20                 	db	32
  1130  00FEFC  25                 	db	37
  1131  00FEFD  64                 	db	100	;'d'
  1132  00FEFE  20                 	db	32
  1133  00FEFF  43                 	db	67	;'C'
  1134  00FF00  20                 	db	32
  1135  00FF01  3D                 	db	61	;'='
  1136  00FF02  20                 	db	32
  1137  00FF03  25                 	db	37
  1138  00FF04  64                 	db	100	;'d'
  1139  00FF05  20                 	db	32
  1140  00FF06  46                 	db	70	;'F'
  1141  00FF07  20                 	db	32
  1142  00FF08  00                 	db	0
  1143  00FF09                     STR_5:
  1144                           
  1145                           ; BSR set to: 0
  1146  00FF09  52                 	db	82	;'R'
  1147  00FF0A  50                 	db	80	;'P'
  1148  00FF0B  4D                 	db	77	;'M'
  1149  00FF0C  20                 	db	32
  1150  00FF0D  3D                 	db	61	;'='
  1151  00FF0E  20                 	db	32
  1152  00FF0F  25                 	db	37
  1153  00FF10  64                 	db	100	;'d'
  1154  00FF11  20                 	db	32
  1155  00FF12  20                 	db	32
  1156  00FF13  64                 	db	100	;'d'
  1157  00FF14  63                 	db	99	;'c'
  1158  00FF15  20                 	db	32
  1159  00FF16  3D                 	db	61	;'='
  1160  00FF17  20                 	db	32
  1161  00FF18  25                 	db	37
  1162  00FF19  64                 	db	100	;'d'
  1163  00FF1A  0D                 	db	13
  1164  00FF1B  0A                 	db	10
  1165  00FF1C  00                 	db	0
  1166  00FF1D                     STR_6:
  1167                           
  1168                           ; BSR set to: 0
  1169  00FF1D  45                 	db	69	;'E'
  1170  00FF1E  43                 	db	67	;'C'
  1171  00FF1F  45                 	db	69	;'E'
  1172  00FF20  33                 	db	51	;'3'
  1173  00FF21  33                 	db	51	;'3'
  1174  00FF22  30                 	db	48	;'0'
  1175  00FF23  31                 	db	49	;'1'
  1176  00FF24  4C                 	db	76	;'L'
  1177  00FF25  20                 	db	32
  1178  00FF26  46                 	db	70	;'F'
  1179  00FF27  61                 	db	97	;'a'
  1180  00FF28  27                 	db	39
  1181  00FF29  32                 	db	50	;'2'
  1182  00FF2A  32                 	db	50	;'2'
  1183  00FF2B  20                 	db	32
  1184  00FF2C  53                 	db	83	;'S'
  1185  00FF2D  31                 	db	49	;'1'
  1186  00FF2E  00                 	db	0
  1187  00FF2F  00                 	db	0
  1188  00FF30                     STR_24:
  1189                           
  1190                           ; BSR set to: 0
  1191  00FF30  45                 	db	69	;'E'
  1192  00FF31  43                 	db	67	;'C'
  1193  00FF32  45                 	db	69	;'E'
  1194  00FF33  33                 	db	51	;'3'
  1195  00FF34  33                 	db	51	;'3'
  1196  00FF35  30                 	db	48	;'0'
  1197  00FF36  31                 	db	49	;'1'
  1198  00FF37  4C                 	db	76	;'L'
  1199  00FF38  20                 	db	32
  1200  00FF39  46                 	db	70	;'F'
  1201  00FF3A  61                 	db	97	;'a'
  1202  00FF3B  27                 	db	39
  1203  00FF3C  32                 	db	50	;'2'
  1204  00FF3D  32                 	db	50	;'2'
  1205  00FF3E  20                 	db	32
  1206  00FF3F  53                 	db	83	;'S'
  1207  00FF40  31                 	db	49	;'1'
  1208  00FF41  00                 	db	0
  1209  00FF42                     STR_38:
  1210                           
  1211                           ; BSR set to: 0
  1212  00FF42  30                 	db	48	;'0'
  1213  00FF43  31                 	db	49	;'1'
  1214  00FF44  32                 	db	50	;'2'
  1215  00FF45  33                 	db	51	;'3'
  1216  00FF46  34                 	db	52	;'4'
  1217  00FF47  35                 	db	53	;'5'
  1218  00FF48  36                 	db	54	;'6'
  1219  00FF49  37                 	db	55	;'7'
  1220  00FF4A  38                 	db	56	;'8'
  1221  00FF4B  39                 	db	57	;'9'
  1222  00FF4C  61                 	db	97	;'a'
  1223  00FF4D  62                 	db	98	;'b'
  1224  00FF4E  63                 	db	99	;'c'
  1225  00FF4F  64                 	db	100	;'d'
  1226  00FF50  65                 	db	101	;'e'
  1227  00FF51  66                 	db	102	;'f'
  1228  00FF52  00                 	db	0
  1229  00FF53                     STR_32:
  1230                           
  1231                           ; BSR set to: 0
  1232  00FF53  53                 	db	83	;'S'
  1233  00FF54  65                 	db	101	;'e'
  1234  00FF55  74                 	db	116	;'t'
  1235  00FF56  20                 	db	32
  1236  00FF57  48                 	db	72	;'H'
  1237  00FF58  65                 	db	101	;'e'
  1238  00FF59  61                 	db	97	;'a'
  1239  00FF5A  74                 	db	116	;'t'
  1240  00FF5B  65                 	db	101	;'e'
  1241  00FF5C  72                 	db	114	;'r'
  1242  00FF5D  20                 	db	32
  1243  00FF5E  54                 	db	84	;'T'
  1244  00FF5F  65                 	db	101	;'e'
  1245  00FF60  6D                 	db	109	;'m'
  1246  00FF61  70                 	db	112	;'p'
  1247  00FF62  00                 	db	0
  1248  00FF63                     STR_7:
  1249                           
  1250                           ; BSR set to: 0
  1251  00FF63  54                 	db	84	;'T'
  1252  00FF64  65                 	db	101	;'e'
  1253  00FF65  6D                 	db	109	;'m'
  1254  00FF66  70                 	db	112	;'p'
  1255  00FF67  65                 	db	101	;'e'
  1256  00FF68  72                 	db	114	;'r'
  1257  00FF69  61                 	db	97	;'a'
  1258  00FF6A  74                 	db	116	;'t'
  1259  00FF6B  75                 	db	117	;'u'
  1260  00FF6C  72                 	db	114	;'r'
  1261  00FF6D  65                 	db	101	;'e'
  1262  00FF6E  3A                 	db	58	;':'
  1263  00FF6F  00                 	db	0
  1264  00FF70                     STR_14:
  1265                           
  1266                           ; BSR set to: 0
  1267  00FF70  48                 	db	72	;'H'
  1268  00FF71  54                 	db	84	;'T'
  1269  00FF72  52                 	db	82	;'R'
  1270  00FF73  20                 	db	32
  1271  00FF74  53                 	db	83	;'S'
  1272  00FF75  65                 	db	101	;'e'
  1273  00FF76  74                 	db	116	;'t'
  1274  00FF77  20                 	db	32
  1275  00FF78  54                 	db	84	;'T'
  1276  00FF79  65                 	db	101	;'e'
  1277  00FF7A  6D                 	db	109	;'m'
  1278  00FF7B  70                 	db	112	;'p'
  1279  00FF7C  00                 	db	0
  1280  00FF7D                     STR_34:
  1281                           
  1282                           ; BSR set to: 0
  1283  00FF7D  54                 	db	84	;'T'
  1284  00FF7E  69                 	db	105	;'i'
  1285  00FF7F  6D                 	db	109	;'m'
  1286  00FF80  65                 	db	101	;'e'
  1287  00FF81  20                 	db	32
  1288  00FF82  53                 	db	83	;'S'
  1289  00FF83  65                 	db	101	;'e'
  1290  00FF84  74                 	db	116	;'t'
  1291  00FF85  75                 	db	117	;'u'
  1292  00FF86  70                 	db	112	;'p'
  1293  00FF87  00                 	db	0
  1294  00FF88  00                 	db	0
  1295  00FF89                     STR_30:
  1296                           
  1297                           ; BSR set to: 0
  1298  00FF89  20                 	db	32
  1299  00FF8A  20                 	db	32
  1300  00FF8B  48                 	db	72	;'H'
  1301  00FF8C  65                 	db	101	;'e'
  1302  00FF8D  61                 	db	97	;'a'
  1303  00FF8E  74                 	db	116	;'t'
  1304  00FF8F  65                 	db	101	;'e'
  1305  00FF90  72                 	db	114	;'r'
  1306  00FF91  00                 	db	0
  1307  00FF92  20                 	db	32
  1308  00FF93  00                 	db	0
  1309  00FF94                     STR_28:
  1310                           
  1311                           ; BSR set to: 0
  1312  00FF94  25                 	db	37
  1313  00FF95  78                 	db	120	;'x'
  1314  00FF96  3A                 	db	58	;':'
  1315  00FF97  25                 	db	37
  1316  00FF98  78                 	db	120	;'x'
  1317  00FF99  3A                 	db	58	;':'
  1318  00FF9A  25                 	db	37
  1319  00FF9B  78                 	db	120	;'x'
  1320  00FF9C  0D                 	db	13
  1321  00FF9D  0A                 	db	10
  1322  00FF9E  00                 	db	0
  1323  00FF9F                     STR_12:
  1324                           
  1325                           ; BSR set to: 0
  1326  00FF9F  41                 	db	65	;'A'
  1327  00FFA0  6C                 	db	108	;'l'
  1328  00FFA1  61                 	db	97	;'a'
  1329  00FFA2  72                 	db	114	;'r'
  1330  00FFA3  6D                 	db	109	;'m'
  1331  00FFA4  20                 	db	32
  1332  00FFA5  54                 	db	84	;'T'
  1333  00FFA6  69                 	db	105	;'i'
  1334  00FFA7  6D                 	db	109	;'m'
  1335  00FFA8  65                 	db	101	;'e'
  1336  00FFA9  00                 	db	0
  1337  00FFAA                     STR_4:
  1338                           
  1339                           ; BSR set to: 0
  1340  00FFAA  56                 	db	86	;'V'
  1341  00FFAB  6F                 	db	111	;'o'
  1342  00FFAC  6C                 	db	108	;'l'
  1343  00FFAD  74                 	db	116	;'t'
  1344  00FFAE  20                 	db	32
  1345  00FFAF  3D                 	db	61	;'='
  1346  00FFB0  20                 	db	32
  1347  00FFB1  25                 	db	37
  1348  00FFB2  66                 	db	102	;'f'
  1349  00FFB3  20                 	db	32
  1350  00FFB4  00                 	db	0
  1351  00FFB5                     STR_31:
  1352                           
  1353                           ; BSR set to: 0
  1354  00FFB5  20                 	db	32
  1355  00FFB6  20                 	db	32
  1356  00FFB7  53                 	db	83	;'S'
  1357  00FFB8  65                 	db	101	;'e'
  1358  00FFB9  74                 	db	116	;'t'
  1359  00FFBA  75                 	db	117	;'u'
  1360  00FFBB  70                 	db	112	;'p'
  1361  00FFBC  00                 	db	0
  1362  00FFBD  20                 	db	32
  1363  00FFBE  00                 	db	0
  1364  00FFBF                     STR_13:
  1365                           
  1366                           ; BSR set to: 0
  1367  00FFBF  41                 	db	65	;'A'
  1368  00FFC0  6C                 	db	108	;'l'
  1369  00FFC1  61                 	db	97	;'a'
  1370  00FFC2  72                 	db	114	;'r'
  1371  00FFC3  6D                 	db	109	;'m'
  1372  00FFC4  20                 	db	32
  1373  00FFC5  53                 	db	83	;'S'
  1374  00FFC6  57                 	db	87	;'W'
  1375  00FFC7  00                 	db	0
  1376  00FFC8                     STR_25:
  1377                           
  1378                           ; BSR set to: 0
  1379  00FFC8  20                 	db	32
  1380  00FFC9  20                 	db	32
  1381  00FFCA  41                 	db	65	;'A'
  1382  00FFCB  6C                 	db	108	;'l'
  1383  00FFCC  61                 	db	97	;'a'
  1384  00FFCD  72                 	db	114	;'r'
  1385  00FFCE  6D                 	db	109	;'m'
  1386  00FFCF  00                 	db	0
  1387  00FFD0                     STR_26:
  1388                           
  1389                           ; BSR set to: 0
  1390  00FFD0  20                 	db	32
  1391  00FFD1  20                 	db	32
  1392  00FFD2  53                 	db	83	;'S'
  1393  00FFD3  65                 	db	101	;'e'
  1394  00FFD4  74                 	db	116	;'t'
  1395  00FFD5  75                 	db	117	;'u'
  1396  00FFD6  70                 	db	112	;'p'
  1397  00FFD7  00                 	db	0
  1398  00FFD8                     STR_15:
  1399                           
  1400                           ; BSR set to: 0
  1401  00FFD8  48                 	db	72	;'H'
  1402  00FFD9  54                 	db	84	;'T'
  1403  00FFDA  52                 	db	82	;'R'
  1404  00FFDB  20                 	db	32
  1405  00FFDC  53                 	db	83	;'S'
  1406  00FFDD  57                 	db	87	;'W'
  1407  00FFDE  00                 	db	0
  1408  00FFDF                     STR_11:
  1409                           
  1410                           ; BSR set to: 0
  1411  00FFDF  44                 	db	68	;'D'
  1412  00FFE0  61                 	db	97	;'a'
  1413  00FFE1  74                 	db	116	;'t'
  1414  00FFE2  65                 	db	101	;'e'
  1415  00FFE3  00                 	db	0
  1416  00FFE4                     STR_18:
  1417                           
  1418                           ; BSR set to: 0
  1419  00FFE4  56                 	db	86	;'V'
  1420  00FFE5  6F                 	db	111	;'o'
  1421  00FFE6  6C                 	db	108	;'l'
  1422  00FFE7  74                 	db	116	;'t'
  1423  00FFE8  00                 	db	0
  1424  00FFE9                     STR_20:
  1425                           
  1426                           ; BSR set to: 0
  1427  00FFE9  4F                 	db	79	;'O'
  1428  00FFEA  4E                 	db	78	;'N'
  1429  00FFEB  20                 	db	32
  1430  00FFEC  00                 	db	0
  1431  00FFED                     STR_21:
  1432                           
  1433                           ; BSR set to: 0
  1434  00FFED  4F                 	db	79	;'O'
  1435  00FFEE  46                 	db	70	;'F'
  1436  00FFEF  46                 	db	70	;'F'
  1437  00FFF0  00                 	db	0
  1438  00FFF1                     STR_19:
  1439                           
  1440                           ; BSR set to: 0
  1441  00FFF1  52                 	db	82	;'R'
  1442  00FFF2  50                 	db	80	;'P'
  1443  00FFF3  4D                 	db	77	;'M'
  1444  00FFF4  00                 	db	0
  1445  00FFF5                     STR_8:
  1446                           
  1447                           ; BSR set to: 0
  1448  00FFF5  43                 	db	67	;'C'
  1449  00FFF6  2F                 	db	47
  1450  00FFF7  00                 	db	0
  1451  00FFF8                     STR_16:
  1452                           
  1453                           ; BSR set to: 0
  1454  00FFF8  44                 	db	68	;'D'
  1455  00FFF9  43                 	db	67	;'C'
  1456  00FFFA  00                 	db	0
  1457  00FFFB                     STR_17:
  1458                           
  1459                           ; BSR set to: 0
  1460  00FFFB  52                 	db	82	;'R'
  1461  00FFFC  4D                 	db	77	;'M'
  1462  00FFFD  00                 	db	0
  1463  0000                     
  1464                           ; #config settings
  1465  00FFFE  00                 	db	0	; dummy byte at the end
  1466  0000                     
  1467                           	psect	cinit
  1468  00458E                     __pcinit:
  1469                           	opt stack 0
  1470  00458E                     start_initialization:
  1471                           	opt stack 0
  1472  00458E                     __initialization:
  1473                           	opt stack 0
  1474                           
  1475                           ; Clear objects allocated to BANK0 (55 bytes)
  1476  00458E  EE00  F080         	lfsr	0,__pbssBANK0
  1477  004592  0E37               	movlw	55
  1478  004594                     clear_0:
  1479  004594  6AEE               	clrf	postinc0,c
  1480  004596  06E8               	decf	wreg,f,c
  1481  004598  E1FD               	bnz	clear_0
  1482                           
  1483                           ; Clear objects allocated to COMRAM (16 bytes)
  1484  00459A  EE00  F060         	lfsr	0,__pbssCOMRAM
  1485  00459E  0E10               	movlw	16
  1486  0045A0                     clear_1:
  1487  0045A0  6AEE               	clrf	postinc0,c
  1488  0045A2  06E8               	decf	wreg,f,c
  1489  0045A4  E1FD               	bnz	clear_1
  1490                           
  1491                           ; Initialize objects allocated to BANK1 (124 bytes)
  1492                           ; load TBLPTR registers with __pidataBANK1
  1493  0045A6  0E54               	movlw	low __pidataBANK1
  1494  0045A8  6EF6               	movwf	tblptrl,c
  1495  0045AA  0E43               	movlw	high __pidataBANK1
  1496  0045AC  6EF7               	movwf	tblptrh,c
  1497  0045AE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1498  0045B0  6EF8               	movwf	tblptru,c
  1499  0045B2  EE01  F000         	lfsr	0,__pdataBANK1
  1500  0045B6  EE10 F07C          	lfsr	1,124
  1501  0045BA                     copy_data0:
  1502  0045BA  0009               	tblrd		*+
  1503  0045BC  CFF5 FFEE          	movff	tablat,postinc0
  1504  0045C0  50E5               	movf	postdec1,w,c
  1505  0045C2  50E1               	movf	fsr1l,w,c
  1506  0045C4  E1FA               	bnz	copy_data0
  1507                           
  1508                           ; Initialize objects allocated to BANK0 (35 bytes)
  1509                           ; load TBLPTR registers with __pidataBANK0
  1510  0045C6  0E44               	movlw	low __pidataBANK0
  1511  0045C8  6EF6               	movwf	tblptrl,c
  1512  0045CA  0E4E               	movlw	high __pidataBANK0
  1513  0045CC  6EF7               	movwf	tblptrh,c
  1514  0045CE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1515  0045D0  6EF8               	movwf	tblptru,c
  1516  0045D2  EE00  F0B7         	lfsr	0,__pdataBANK0
  1517  0045D6  EE10 F023          	lfsr	1,35
  1518  0045DA                     copy_data1:
  1519  0045DA  0009               	tblrd		*+
  1520  0045DC  CFF5 FFEE          	movff	tablat,postinc0
  1521  0045E0  50E5               	movf	postdec1,w,c
  1522  0045E2  50E1               	movf	fsr1l,w,c
  1523  0045E4  E1FA               	bnz	copy_data1
  1524  0045E6                     end_of_initialization:
  1525                           	opt stack 0
  1526  0045E6                     __end_of__initialization:
  1527                           	opt stack 0
  1528  0045E6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1529  0045E8  6EF8               	movwf	tblptru,c
  1530  0045EA  0100               	movlb	0
  1531  0045EC  EFEB  F00C         	goto	_main	;jump to C main() function
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           postdec1	equ	0xFE5
  1539                           fsr1l	equ	0xFE1
  1540                           
  1541                           	psect	bssCOMRAM
  1542  000060                     __pbssCOMRAM:
  1543                           	opt stack 0
  1544  000060                     _Time_Elapsed:
  1545                           	opt stack 0
  1546  000060                     	ds	2
  1547  000062                     _txt:
  1548                           	opt stack 0
  1549  000062                     	ds	2
  1550  000064                     _alarm_hour:
  1551                           	opt stack 0
  1552  000064                     	ds	1
  1553  000065                     _alarm_minute:
  1554                           	opt stack 0
  1555  000065                     	ds	1
  1556  000066                     _alarm_second:
  1557                           	opt stack 0
  1558  000066                     	ds	1
  1559  000067                     _day:
  1560                           	opt stack 0
  1561  000067                     	ds	1
  1562  000068                     _duty_cycle:
  1563                           	opt stack 0
  1564  000068                     	ds	1
  1565  000069                     _found:
  1566                           	opt stack 0
  1567  000069                     	ds	1
  1568  00006A                     _hour:
  1569                           	opt stack 0
  1570  00006A                     	ds	1
  1571  00006B                     _minute:
  1572                           	opt stack 0
  1573  00006B                     	ds	1
  1574  00006C                     _month:
  1575                           	opt stack 0
  1576  00006C                     	ds	1
  1577  00006D                     _second:
  1578                           	opt stack 0
  1579  00006D                     	ds	1
  1580  00006E                     _setup_alarm_hour:
  1581                           	opt stack 0
  1582  00006E                     	ds	1
  1583  00006F                     _year:
  1584                           	opt stack 0
  1585  00006F                     	ds	1
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           
  1595                           	psect	bssBANK0
  1596  000080                     __pbssBANK0:
  1597                           	opt stack 0
  1598  000080                     _Nec_code:
  1599                           	opt stack 0
  1600  000080                     	ds	4
  1601  000084                     _volt:
  1602                           	opt stack 0
  1603  000084                     	ds	3
  1604  000087                     _ALARMEN:
  1605                           	opt stack 0
  1606  000087                     	ds	2
  1607  000089                     _DS1621_tempC:
  1608                           	opt stack 0
  1609  000089                     	ds	2
  1610  00008B                     _DS1621_tempF:
  1611                           	opt stack 0
  1612  00008B                     	ds	2
  1613  00008D                     _MATCHED:
  1614                           	opt stack 0
  1615  00008D                     	ds	2
  1616  00008F                     _alarm_mode:
  1617                           	opt stack 0
  1618  00008F                     	ds	2
  1619  000091                     _color:
  1620                           	opt stack 0
  1621  000091                     	ds	2
  1622  000093                     _i:
  1623                           	opt stack 0
  1624  000093                     	ds	2
  1625  000095                     _nbr:
  1626                           	opt stack 0
  1627  000095                     	ds	2
  1628  000097                     _nec_ok:
  1629                           	opt stack 0
  1630  000097                     	ds	2
  1631  000099                     _rpm:
  1632                           	opt stack 0
  1633  000099                     	ds	2
  1634  00009B                     _rps:
  1635                           	opt stack 0
  1636  00009B                     	ds	2
  1637  00009D                     _HEATER:
  1638                           	opt stack 0
  1639  00009D                     	ds	1
  1640  00009E                     _INT1_flag:
  1641                           	opt stack 0
  1642  00009E                     	ds	1
  1643  00009F                     _INT2_flag:
  1644                           	opt stack 0
  1645  00009F                     	ds	1
  1646  0000A0                     _In_Alarm_Time_Setup:
  1647                           	opt stack 0
  1648  0000A0                     	ds	1
  1649  0000A1                     _In_Heater_Temp_Setup:
  1650                           	opt stack 0
  1651  0000A1                     	ds	1
  1652  0000A2                     _In_Time_Setup:
  1653                           	opt stack 0
  1654  0000A2                     	ds	1
  1655  0000A3                     _Nec_code1:
  1656                           	opt stack 0
  1657  0000A3                     	ds	1
  1658  0000A4                     _Nec_state:
  1659                           	opt stack 0
  1660  0000A4                     	ds	1
  1661  0000A5                     _Select_Alarm_Field:
  1662                           	opt stack 0
  1663  0000A5                     	ds	1
  1664  0000A6                     _Select_Field:
  1665                           	opt stack 0
  1666  0000A6                     	ds	1
  1667  0000A7                     _Select_Heater_Temp_Field:
  1668                           	opt stack 0
  1669  0000A7                     	ds	1
  1670  0000A8                     __tft_type:
  1671                           	opt stack 0
  1672  0000A8                     	ds	1
  1673  0000A9                     _alarm_date:
  1674                           	opt stack 0
  1675  0000A9                     	ds	1
  1676  0000AA                     _bit_count:
  1677                           	opt stack 0
  1678  0000AA                     	ds	1
  1679  0000AB                     _colstart:
  1680                           	opt stack 0
  1681  0000AB                     	ds	1
  1682  0000AC                     _dow:
  1683                           	opt stack 0
  1684  0000AC                     	ds	1
  1685  0000AD                     _rowstart:
  1686                           	opt stack 0
  1687  0000AD                     	ds	1
  1688  0000AE                     _setup_alarm_minute:
  1689                           	opt stack 0
  1690  0000AE                     	ds	1
  1691  0000AF                     _setup_alarm_second:
  1692                           	opt stack 0
  1693  0000AF                     	ds	1
  1694  0000B0                     _setup_day:
  1695                           	opt stack 0
  1696  0000B0                     	ds	1
  1697  0000B1                     _setup_heater_set_temp:
  1698                           	opt stack 0
  1699  0000B1                     	ds	1
  1700  0000B2                     _setup_hour:
  1701                           	opt stack 0
  1702  0000B2                     	ds	1
  1703  0000B3                     _setup_minute:
  1704                           	opt stack 0
  1705  0000B3                     	ds	1
  1706  0000B4                     _setup_month:
  1707                           	opt stack 0
  1708  0000B4                     	ds	1
  1709  0000B5                     _setup_second:
  1710                           	opt stack 0
  1711  0000B5                     	ds	1
  1712  0000B6                     _setup_year:
  1713                           	opt stack 0
  1714  0000B6                     	ds	1
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postdec1	equ	0xFE5
  1722                           fsr1l	equ	0xFE1
  1723                           
  1724                           	psect	dataBANK0
  1725  0000B7                     __pdataBANK0:
  1726                           	opt stack 0
  1727  0000B7                     _heater_set_temp:
  1728                           	opt stack 0
  1729  0000B7                     	ds	1
  1730  0000B8                     _tempSecond:
  1731                           	opt stack 0
  1732  0000B8                     	ds	1
  1733  0000B9                     _wrap:
  1734                           	opt stack 0
  1735  0000B9                     	ds	1
  1736  0000BA                     _Heater_Set_Temp_Txt:
  1737                           	opt stack 0
  1738  0000BA                     	ds	5
  1739  0000BF                     _RPM_Txt:
  1740                           	opt stack 0
  1741  0000BF                     	ds	5
  1742  0000C4                     _Alarm_SW_Txt:
  1743                           	opt stack 0
  1744  0000C4                     	ds	4
  1745  0000C8                     _DC_Txt:
  1746                           	opt stack 0
  1747  0000C8                     	ds	4
  1748  0000CC                     _Heater_SW_Txt:
  1749                           	opt stack 0
  1750  0000CC                     	ds	4
  1751  0000D0                     _tempC:
  1752                           	opt stack 0
  1753  0000D0                     	ds	4
  1754  0000D4                     _tempF:
  1755                           	opt stack 0
  1756  0000D4                     	ds	4
  1757  0000D8                     _RTC_ALARM_Txt:
  1758                           	opt stack 0
  1759  0000D8                     	ds	2
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           postdec1	equ	0xFE5
  1767                           fsr1l	equ	0xFE1
  1768                           
  1769                           	psect	dataBANK1
  1770  000100                     __pdataBANK1:
  1771                           	opt stack 0
  1772  000100                     _buffer:
  1773                           	opt stack 0
  1774  000100                     	ds	31
  1775  00011F                     _array1:
  1776                           	opt stack 0
  1777  00011F                     	ds	21
  1778  000134                     _RGB:
  1779                           	opt stack 0
  1780  000134                     	ds	7
  1781  00013B                     _alarm_time:
  1782                           	opt stack 0
  1783  00013B                     	ds	9
  1784  000144                     _date:
  1785                           	opt stack 0
  1786  000144                     	ds	9
  1787  00014D                     _setup_alarm_time:
  1788                           	opt stack 0
  1789  00014D                     	ds	9
  1790  000156                     _setup_date:
  1791                           	opt stack 0
  1792  000156                     	ds	9
  1793  00015F                     _setup_time:
  1794                           	opt stack 0
  1795  00015F                     	ds	9
  1796  000168                     _time:
  1797                           	opt stack 0
  1798  000168                     	ds	9
  1799  000171                     _Volt_Txt:
  1800                           	opt stack 0
  1801  000171                     	ds	6
  1802  000177                     _setup_heater_set_text:
  1803                           	opt stack 0
  1804  000177                     	ds	5
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	cstackBANK1
  1815  00017C                     __pcstackBANK1:
  1816                           	opt stack 0
  1817  00017C                     _printf$3341:
  1818                           	opt stack 0
  1819                           
  1820                           ; 3 bytes @ 0x0
  1821  00017C                     	ds	3
  1822  00017F                     printf@idx:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0x3
  1826  00017F                     	ds	1
  1827  000180                     printf@ap:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x4
  1831  000180                     	ds	2
  1832  000182                     printf@prec:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x6
  1836  000182                     	ds	2
  1837  000184                     printf@tmpval:
  1838                           	opt stack 0
  1839                           
  1840                           ; 4 bytes @ 0x8
  1841  000184                     	ds	4
  1842  000188                     printf@width:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0xC
  1846  000188                     	ds	2
  1847  00018A                     printf@exp:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0xE
  1851  00018A                     	ds	2
  1852  00018C                     printf@val:
  1853                           	opt stack 0
  1854                           
  1855                           ; 4 bytes @ 0x10
  1856  00018C                     	ds	4
  1857  000190                     printf@flag:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x14
  1861  000190                     	ds	2
  1862  000192                     printf@fval:
  1863                           	opt stack 0
  1864                           
  1865                           ; 3 bytes @ 0x16
  1866  000192                     	ds	3
  1867  000195                     printf@c:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x19
  1871  000195                     	ds	1
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           
  1881                           	psect	cstackBANK0
  1882  0000DA                     __pcstackBANK0:
  1883                           	opt stack 0
  1884  0000DA                     ?_printf:
  1885                           	opt stack 0
  1886  0000DA                     printf@f:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x0
  1890  0000DA                     	ds	14
  1891  0000E8                     ??_printf:
  1892                           
  1893                           ; 0 bytes @ 0xE
  1894  0000E8                     	ds	6
  1895  0000EE                     check_for_button_input@j:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x14
  1899  0000EE                     	ds	2
  1900  0000F0                     ??_Do_Setup_Heater_Temp:
  1901                           
  1902                           ; 0 bytes @ 0x16
  1903  0000F0                     	ds	2
  1904  0000F2                     ??_main:
  1905                           
  1906                           ; 0 bytes @ 0x18
  1907  0000F2                     	ds	2
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1l	equ	0xFE1
  1916                           
  1917                           	psect	cstackCOMRAM
  1918  000001                     __pcstackCOMRAM:
  1919                           	opt stack 0
  1920  000001                     ??_INT0_isr:
  1921  000001                     
  1922                           ; 2 bytes @ 0x0
  1923  000001                     	ds	2
  1924  000003                     ??_chkisr:
  1925                           
  1926                           ; 0 bytes @ 0x2
  1927  000003                     	ds	14
  1928  000011                     ??_Set_Alarm_RGB:
  1929  000011                     ??_bcd_2_dec:
  1930  000011                     ??_isdigit:
  1931  000011                     ?_get_full_ADC:
  1932                           	opt stack 0
  1933  000011                     ?_strlen:
  1934                           	opt stack 0
  1935  000011                     ?___wmul:
  1936                           	opt stack 0
  1937  000011                     ?___ftpack:
  1938                           	opt stack 0
  1939  000011                     ?___ftneg:
  1940                           	opt stack 0
  1941  000011                     ?__tdiv_to_l_:
  1942                           	opt stack 0
  1943  000011                     ?__div_to_l_:
  1944                           	opt stack 0
  1945  000011                     ?___lldiv:
  1946                           	opt stack 0
  1947  000011                     I2C_Read@ack:
  1948                           	opt stack 0
  1949  000011                     I2C_Write@outByte:
  1950                           	opt stack 0
  1951  000011                     putch@c:
  1952                           	opt stack 0
  1953  000011                     spiwrite@x:
  1954                           	opt stack 0
  1955  000011                     Wait_One_Sec@k:
  1956                           	opt stack 0
  1957  000011                     OpenUSART@spbrg:
  1958                           	opt stack 0
  1959  000011                     ___wmul@multiplier:
  1960                           	opt stack 0
  1961  000011                     strcpy@to:
  1962                           	opt stack 0
  1963  000011                     strlen@s:
  1964                           	opt stack 0
  1965  000011                     __div_to_l_@f1:
  1966                           	opt stack 0
  1967  000011                     ___ftpack@arg:
  1968                           	opt stack 0
  1969  000011                     __tdiv_to_l_@f1:
  1970                           	opt stack 0
  1971  000011                     ___ftge@ff1:
  1972                           	opt stack 0
  1973  000011                     ___ftneg@f1:
  1974                           	opt stack 0
  1975  000011                     I2C_Init@c:
  1976                           	opt stack 0
  1977  000011                     ___lldiv@dividend:
  1978                           	opt stack 0
  1979                           
  1980                           ; 4 bytes @ 0x10
  1981  000011                     	ds	1
  1982  000012                     I2C_Read@n:
  1983                           	opt stack 0
  1984  000012                     I2C_Write@n:
  1985                           	opt stack 0
  1986  000012                     Set_Alarm_RGB@color:
  1987                           	opt stack 0
  1988  000012                     spiwrite@spidata:
  1989                           	opt stack 0
  1990  000012                     _isdigit$2987:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x11
  1994  000012                     	ds	1
  1995  000013                     ??_get_full_ADC:
  1996  000013                     ??_strlen:
  1997  000013                     I2C_Read@inByte:
  1998                           	opt stack 0
  1999  000013                     I2C_Write_Address_Write_One_Byte@Address:
  2000                           	opt stack 0
  2001  000013                     I2C_Write_Cmd_Only@Cmd:
  2002                           	opt stack 0
  2003  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2004                           	opt stack 0
  2005  000013                     write_command@cmd_:
  2006                           	opt stack 0
  2007  000013                     write_data@data_:
  2008                           	opt stack 0
  2009  000013                     OpenUSART@config:
  2010                           	opt stack 0
  2011  000013                     isdigit@c:
  2012                           	opt stack 0
  2013  000013                     bcd_2_dec@dec:
  2014                           	opt stack 0
  2015  000013                     ___wmul@multiplicand:
  2016                           	opt stack 0
  2017  000013                     strcpy@from:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x12
  2021  000013                     	ds	1
  2022  000014                     ?_DS1621_Read_Temp:
  2023                           	opt stack 0
  2024  000014                     I2C_Write_Address_Read_One_Byte@Address:
  2025                           	opt stack 0
  2026  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  2027                           	opt stack 0
  2028  000014                     I2C_Write_Cmd_Only@Device:
  2029                           	opt stack 0
  2030  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2031                           	opt stack 0
  2032  000014                     DS3231_Read_Time@Address:
  2033                           	opt stack 0
  2034  000014                     DS3231_Read_Alarm_Time@Address:
  2035                           	opt stack 0
  2036  000014                     setAddrWindow@y0:
  2037                           	opt stack 0
  2038  000014                     ___ftpack@exp:
  2039                           	opt stack 0
  2040  000014                     __div_to_l_@f2:
  2041                           	opt stack 0
  2042  000014                     __tdiv_to_l_@f2:
  2043                           	opt stack 0
  2044  000014                     ___ftge@ff2:
  2045                           	opt stack 0
  2046                           
  2047                           ; 3 bytes @ 0x13
  2048  000014                     	ds	1
  2049  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2050                           	opt stack 0
  2051  000015                     I2C_Write_Address_Write_One_Byte@Device:
  2052                           	opt stack 0
  2053  000015                     I2C_Write_Cmd_Write_Data@Device:
  2054                           	opt stack 0
  2055  000015                     DS3231_Read_Time@Device:
  2056                           	opt stack 0
  2057  000015                     DS3231_Read_Alarm_Time@Device:
  2058                           	opt stack 0
  2059  000015                     bcd_2_dec@bcd:
  2060                           	opt stack 0
  2061  000015                     setAddrWindow@x1:
  2062                           	opt stack 0
  2063  000015                     ___ftpack@sign:
  2064                           	opt stack 0
  2065  000015                     get_full_ADC@result:
  2066                           	opt stack 0
  2067  000015                     ___wmul@product:
  2068                           	opt stack 0
  2069  000015                     strcpy@cp:
  2070                           	opt stack 0
  2071  000015                     strlen@cp:
  2072                           	opt stack 0
  2073  000015                     ___lldiv@divisor:
  2074                           	opt stack 0
  2075                           
  2076                           ; 4 bytes @ 0x14
  2077  000015                     	ds	1
  2078  000016                     ??___ftpack:
  2079  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2080                           	opt stack 0
  2081  000016                     DS1621_Init@Device:
  2082                           	opt stack 0
  2083  000016                     DS1621_Read_Temp@Cmd:
  2084                           	opt stack 0
  2085  000016                     setAddrWindow@y1:
  2086                           	opt stack 0
  2087                           
  2088                           ; 1 bytes @ 0x15
  2089  000016                     	ds	1
  2090  000017                     ??__tdiv_to_l_:
  2091  000017                     ??___ftge:
  2092  000017                     ?___awdiv:
  2093                           	opt stack 0
  2094  000017                     DS1621_Read_Temp@Data_Ret:
  2095                           	opt stack 0
  2096  000017                     DS3231_Init@Address_7:
  2097                           	opt stack 0
  2098  000017                     setAddrWindow@x0:
  2099                           	opt stack 0
  2100  000017                     delay_ms@ms:
  2101                           	opt stack 0
  2102  000017                     ___awdiv@dividend:
  2103                           	opt stack 0
  2104  000017                     __div_to_l_@quot:
  2105                           	opt stack 0
  2106                           
  2107                           ; 4 bytes @ 0x16
  2108  000017                     	ds	1
  2109  000018                     DS1621_Read_Temp@Device:
  2110                           	opt stack 0
  2111  000018                     DS3231_Init@Address_E:
  2112                           	opt stack 0
  2113  000018                     drawPixel@y:
  2114                           	opt stack 0
  2115  000018                     drawFastVLine@y:
  2116                           	opt stack 0
  2117  000018                     fillRectangle@y:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x17
  2121  000018                     	ds	1
  2122  000019                     ??_delay_ms:
  2123  000019                     ?___awtoft:
  2124                           	opt stack 0
  2125  000019                     ?___lbtoft:
  2126                           	opt stack 0
  2127  000019                     ?___lltoft:
  2128                           	opt stack 0
  2129  000019                     DS3231_Init@control_E:
  2130                           	opt stack 0
  2131  000019                     drawFastVLine@h:
  2132                           	opt stack 0
  2133  000019                     fillRectangle@w:
  2134                           	opt stack 0
  2135  000019                     drawPixel@color:
  2136                           	opt stack 0
  2137  000019                     ___awdiv@divisor:
  2138                           	opt stack 0
  2139  000019                     ___awtoft@c:
  2140                           	opt stack 0
  2141  000019                     ___lldiv@quotient:
  2142                           	opt stack 0
  2143  000019                     ___lltoft@c:
  2144                           	opt stack 0
  2145                           
  2146                           ; 4 bytes @ 0x18
  2147  000019                     	ds	1
  2148  00001A                     DS3231_Init@Device:
  2149                           	opt stack 0
  2150  00001A                     fillRectangle@h:
  2151                           	opt stack 0
  2152  00001A                     drawFastVLine@color:
  2153                           	opt stack 0
  2154  00001A                     __tdiv_to_l_@quot:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x19
  2158  00001A                     	ds	1
  2159  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2160                           	opt stack 0
  2161  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2162                           	opt stack 0
  2163  00001B                     drawPixel@x:
  2164                           	opt stack 0
  2165  00001B                     ___awdiv@counter:
  2166                           	opt stack 0
  2167  00001B                     __div_to_l_@cntr:
  2168                           	opt stack 0
  2169  00001B                     delay_ms@count:
  2170                           	opt stack 0
  2171  00001B                     fillRectangle@color:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0x1A
  2175  00001B                     	ds	1
  2176  00001C                     ??_drawFastVLine:
  2177  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2178                           	opt stack 0
  2179  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2180                           	opt stack 0
  2181  00001C                     ___awdiv@sign:
  2182                           	opt stack 0
  2183  00001C                     ___awtoft@sign:
  2184                           	opt stack 0
  2185  00001C                     __div_to_l_@exp1:
  2186                           	opt stack 0
  2187  00001C                     ___lbtoft@c:
  2188                           	opt stack 0
  2189  00001C                     drawCircle@x0:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x1B
  2193  00001C                     	ds	1
  2194  00001D                     ??_fillRectangle:
  2195  00001D                     ??___lltoft:
  2196  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2197                           	opt stack 0
  2198  00001D                     DS3231_Turn_On_Alarm@control_E:
  2199                           	opt stack 0
  2200  00001D                     ___lldiv@counter:
  2201                           	opt stack 0
  2202  00001D                     ___awdiv@quotient:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x1C
  2206  00001D                     	ds	1
  2207  00001E                     ?___llmod:
  2208                           	opt stack 0
  2209  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2210                           	opt stack 0
  2211  00001E                     DS3231_Turn_On_Alarm@control_F:
  2212                           	opt stack 0
  2213  00001E                     __tdiv_to_l_@cntr:
  2214                           	opt stack 0
  2215  00001E                     drawCircle@y0:
  2216                           	opt stack 0
  2217  00001E                     ___llmod@dividend:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x1D
  2221  00001E                     	ds	1
  2222  00001F                     ?_get_RPM:
  2223                           	opt stack 0
  2224  00001F                     ?___ftmul:
  2225                           	opt stack 0
  2226  00001F                     DS3231_Turn_Off_Alarm@Device:
  2227                           	opt stack 0
  2228  00001F                     DS3231_Turn_On_Alarm@Device:
  2229                           	opt stack 0
  2230  00001F                     Set_DC_RGB@duty_cycle:
  2231                           	opt stack 0
  2232  00001F                     __tdiv_to_l_@exp1:
  2233                           	opt stack 0
  2234  00001F                     Set_RPM_RGB@rpm:
  2235                           	opt stack 0
  2236  00001F                     ___ftmul@f1:
  2237                           	opt stack 0
  2238                           
  2239                           ; 3 bytes @ 0x1E
  2240  00001F                     	ds	1
  2241  000020                     drawFastVLine@hi:
  2242                           	opt stack 0
  2243  000020                     drawCircle@r:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x1F
  2247  000020                     	ds	1
  2248  000021                     ??_Set_RPM_RGB:
  2249  000021                     drawFastVLine@lo:
  2250                           	opt stack 0
  2251  000021                     fillRectangle@hi:
  2252                           	opt stack 0
  2253  000021                     ___lltoft@exp:
  2254                           	opt stack 0
  2255  000021                     get_RPM@RPS:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x20
  2259  000021                     	ds	1
  2260  000022                     drawFastVLine@x:
  2261                           	opt stack 0
  2262  000022                     fillRectangle@lo:
  2263                           	opt stack 0
  2264  000022                     drawCircle@color:
  2265                           	opt stack 0
  2266  000022                     ___ftmul@f2:
  2267                           	opt stack 0
  2268  000022                     ___llmod@divisor:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0x21
  2272  000022                     	ds	1
  2273  000023                     fillRect@y:
  2274                           	opt stack 0
  2275  000023                     fillRectangle@x:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x22
  2279  000023                     	ds	1
  2280  000024                     ??_drawCircle:
  2281  000024                     fillRect@w:
  2282                           	opt stack 0
  2283  000024                     fillScreen@color:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x23
  2287  000024                     	ds	1
  2288  000025                     ??___ftmul:
  2289  000025                     fillRect@h:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x24
  2293  000025                     	ds	1
  2294  000026                     ___llmod@counter:
  2295                           	opt stack 0
  2296  000026                     fillRect@color:
  2297                           	opt stack 0
  2298  000026                     drawCircle@ddF_x:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x25
  2302  000026                     	ds	2
  2303  000028                     ??_fillRect:
  2304  000028                     ___ftmul@exp:
  2305                           	opt stack 0
  2306  000028                     drawCircle@ddF_y:
  2307                           	opt stack 0
  2308                           
  2309                           ; 2 bytes @ 0x27
  2310  000028                     	ds	1
  2311  000029                     ___ftmul@f3_as_product:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x28
  2315  000029                     	ds	1
  2316  00002A                     drawCircle@f:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x29
  2320  00002A                     	ds	1
  2321  00002B                     fillRect@x:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x2A
  2325  00002B                     	ds	1
  2326  00002C                     ___ftmul@cntr:
  2327                           	opt stack 0
  2328  00002C                     fillRect@i:
  2329                           	opt stack 0
  2330  00002C                     drawCircle@x:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x2B
  2334  00002C                     	ds	1
  2335  00002D                     ___ftmul@sign:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x2C
  2339  00002D                     	ds	1
  2340  00002E                     ?___ftdiv:
  2341                           	opt stack 0
  2342  00002E                     ?___fttol:
  2343                           	opt stack 0
  2344  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2345                           	opt stack 0
  2346  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2347                           	opt stack 0
  2348  00002E                     drawChar@y:
  2349                           	opt stack 0
  2350  00002E                     drawCircle@y:
  2351                           	opt stack 0
  2352  00002E                     ___ftdiv@f1:
  2353                           	opt stack 0
  2354  00002E                     ___fttol@f1:
  2355                           	opt stack 0
  2356                           
  2357                           ; 3 bytes @ 0x2D
  2358  00002E                     	ds	1
  2359  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2360                           	opt stack 0
  2361  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2362                           	opt stack 0
  2363  00002F                     drawChar@c:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x2E
  2367  00002F                     	ds	1
  2368  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2369                           	opt stack 0
  2370  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2371                           	opt stack 0
  2372  000030                     drawChar@color:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x2F
  2376  000030                     	ds	1
  2377  000031                     ___ftdiv@f2:
  2378                           	opt stack 0
  2379                           
  2380                           ; 3 bytes @ 0x30
  2381  000031                     	ds	1
  2382  000032                     ??___fttol:
  2383  000032                     drawChar@bg:
  2384                           	opt stack 0
  2385                           
  2386                           ; 2 bytes @ 0x31
  2387  000032                     	ds	2
  2388  000034                     ??___ftdiv:
  2389  000034                     drawChar@size:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x33
  2393  000034                     	ds	1
  2394  000035                     drawChar@line:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x34
  2398  000035                     	ds	1
  2399  000036                     drawChar@x:
  2400                           	opt stack 0
  2401                           
  2402                           ; 1 bytes @ 0x35
  2403  000036                     	ds	1
  2404  000037                     drawChar@j:
  2405                           	opt stack 0
  2406  000037                     ___ftdiv@cntr:
  2407                           	opt stack 0
  2408  000037                     ___fttol@sign1:
  2409                           	opt stack 0
  2410                           
  2411                           ; 1 bytes @ 0x36
  2412  000037                     	ds	1
  2413  000038                     drawChar@i:
  2414                           	opt stack 0
  2415  000038                     ___ftdiv@f3:
  2416                           	opt stack 0
  2417  000038                     ___fttol@lval:
  2418                           	opt stack 0
  2419                           
  2420                           ; 4 bytes @ 0x37
  2421  000038                     	ds	1
  2422  000039                     drawtext@y:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x38
  2426  000039                     	ds	1
  2427  00003A                     drawtext@_text:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x39
  2431  00003A                     	ds	1
  2432  00003B                     ___ftdiv@exp:
  2433                           	opt stack 0
  2434                           
  2435                           ; 1 bytes @ 0x3A
  2436  00003B                     	ds	1
  2437  00003C                     ___ftdiv@sign:
  2438                           	opt stack 0
  2439  00003C                     ___fttol@exp1:
  2440                           	opt stack 0
  2441  00003C                     drawtext@color:
  2442                           	opt stack 0
  2443                           
  2444                           ; 2 bytes @ 0x3B
  2445  00003C                     	ds	1
  2446  00003D                     ??_do_update_pwm:
  2447  00003D                     ?___awmod:
  2448                           	opt stack 0
  2449  00003D                     ?_read_volt:
  2450                           	opt stack 0
  2451  00003D                     ___awmod@dividend:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x3C
  2455  00003D                     	ds	1
  2456  00003E                     drawtext@bg:
  2457                           	opt stack 0
  2458                           
  2459                           ; 2 bytes @ 0x3D
  2460  00003E                     	ds	1
  2461  00003F                     ___awmod@divisor:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x3E
  2465  00003F                     	ds	1
  2466  000040                     drawtext@size:
  2467                           	opt stack 0
  2468  000040                     do_update_pwm@dc_f:
  2469                           	opt stack 0
  2470  000040                     read_volt@mv:
  2471                           	opt stack 0
  2472                           
  2473                           ; 3 bytes @ 0x3F
  2474  000040                     	ds	1
  2475  000041                     ??_drawtext:
  2476  000041                     ___awmod@counter:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x40
  2480  000041                     	ds	1
  2481  000042                     ___awmod@sign:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x41
  2485  000042                     	ds	1
  2486  000043                     ?_dec_2_bcd:
  2487                           	opt stack 0
  2488  000043                     ?_fround:
  2489                           	opt stack 0
  2490  000043                     ?_scale:
  2491                           	opt stack 0
  2492  000043                     do_update_pwm@duty_cycle:
  2493                           	opt stack 0
  2494  000043                     drawtext@x:
  2495                           	opt stack 0
  2496  000043                     read_volt@volts:
  2497                           	opt stack 0
  2498                           
  2499                           ; 3 bytes @ 0x42
  2500  000043                     	ds	1
  2501  000044                     do_update_pwm@dc_I:
  2502                           	opt stack 0
  2503  000044                     drawtext@textsize:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x43
  2507  000044                     	ds	1
  2508  000045                     ??_dec_2_bcd:
  2509                           
  2510                           ; 0 bytes @ 0x44
  2511  000045                     	ds	1
  2512  000046                     ?_get_duty_cycle:
  2513                           	opt stack 0
  2514  000046                     get_duty_cycle@temp:
  2515                           	opt stack 0
  2516  000046                     read_volt@num_step:
  2517                           	opt stack 0
  2518  000046                     drawtext@i:
  2519                           	opt stack 0
  2520  000046                     _fround$3339:
  2521                           	opt stack 0
  2522  000046                     _scale$3340:
  2523                           	opt stack 0
  2524                           
  2525                           ; 3 bytes @ 0x45
  2526  000046                     	ds	1
  2527  000047                     dec_2_bcd@bcd:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x46
  2531  000047                     	ds	1
  2532  000048                     drawtext@cursor_y:
  2533                           	opt stack 0
  2534  000048                     get_duty_cycle@set_temp:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x47
  2538  000048                     	ds	1
  2539  000049                     dec_2_bcd@dec:
  2540                           	opt stack 0
  2541  000049                     drawtext@cursor_x:
  2542                           	opt stack 0
  2543  000049                     scale@scl:
  2544                           	opt stack 0
  2545  000049                     _fround$3338:
  2546                           	opt stack 0
  2547                           
  2548                           ; 3 bytes @ 0x48
  2549  000049                     	ds	1
  2550  00004A                     ??_Update_Screen:
  2551  00004A                     ??_get_duty_cycle:
  2552  00004A                     DS3231_Write_Time@Device:
  2553                           	opt stack 0
  2554  00004A                     DS3231_Write_Alarm_Time@Device:
  2555                           	opt stack 0
  2556  00004A                     Update_Setup_Heater_Screen@dc_char1:
  2557                           	opt stack 0
  2558                           
  2559                           ; 1 bytes @ 0x49
  2560  00004A                     	ds	1
  2561  00004B                     get_duty_cycle@diff:
  2562                           	opt stack 0
  2563  00004B                     DS3231_Write_Time@Address:
  2564                           	opt stack 0
  2565  00004B                     DS3231_Write_Alarm_Time@Address:
  2566                           	opt stack 0
  2567  00004B                     Update_Setup_Heater_Screen@dc_char2:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x4A
  2571  00004B                     	ds	1
  2572  00004C                     Update_Setup_Heater_Screen@dc_char3:
  2573                           	opt stack 0
  2574  00004C                     fround@prec:
  2575                           	opt stack 0
  2576  00004C                     Update_Screen@neg_tempF:
  2577                           	opt stack 0
  2578                           
  2579                           ; 2 bytes @ 0x4B
  2580  00004C                     	ds	1
  2581  00004D                     ?___ftadd:
  2582                           	opt stack 0
  2583  00004D                     ___ftadd@f1:
  2584                           	opt stack 0
  2585                           
  2586                           ; 3 bytes @ 0x4C
  2587  00004D                     	ds	1
  2588  00004E                     Update_Screen@neg_DS1621_tempC:
  2589                           	opt stack 0
  2590                           
  2591                           ; 1 bytes @ 0x4D
  2592  00004E                     	ds	2
  2593  000050                     ___ftadd@f2:
  2594                           	opt stack 0
  2595                           
  2596                           ; 3 bytes @ 0x4F
  2597  000050                     	ds	3
  2598  000053                     ??___ftadd:
  2599                           
  2600                           ; 0 bytes @ 0x52
  2601  000053                     	ds	3
  2602  000056                     ___ftadd@sign:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x55
  2606  000056                     	ds	1
  2607  000057                     ___ftadd@exp2:
  2608                           	opt stack 0
  2609                           
  2610                           ; 1 bytes @ 0x56
  2611  000057                     	ds	1
  2612  000058                     ___ftadd@exp1:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x57
  2616  000058                     	ds	1
  2617  000059                     ?___ftsub:
  2618                           	opt stack 0
  2619  000059                     ___ftsub@f1:
  2620                           	opt stack 0
  2621                           
  2622                           ; 3 bytes @ 0x58
  2623  000059                     	ds	3
  2624  00005C                     ___ftsub@f2:
  2625                           	opt stack 0
  2626                           
  2627                           ; 3 bytes @ 0x5B
  2628  00005C                     	ds	3
  2629  00005F                     
  2630                           ; 0 bytes @ 0x5E
  2631  00005F                     	ds	1
  2632  000060                     tblptru	equ	0xFF8
  2633                           tblptrh	equ	0xFF7
  2634                           tblptrl	equ	0xFF6
  2635                           tablat	equ	0xFF5
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           postdec1	equ	0xFE5
  2639                           fsr1l	equ	0xFE1
  2640                           
  2641                           ; 0 bytes @ 0x5F
  2642 ;;
  2643 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2644 ;;
  2645 ;; *************** function _main *****************
  2646 ;; Defined at:
  2647 ;;		line 121 in file "Main.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;		None               void
  2654 ;; Registers used:
  2655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;Total ram usage:        2 bytes
  2666 ;; Hardware stack levels required when called:   13
  2667 ;; This function calls:
  2668 ;;		_DS1621_Read_Temp
  2669 ;;		_DS3231_Read_Alarm_Time
  2670 ;;		_DS3231_Read_Time
  2671 ;;		_DS3231_Turn_Off_Alarm
  2672 ;;		_Do_Beep_Bad
  2673 ;;		_Do_Beep_Good
  2674 ;;		_Do_Init
  2675 ;;		_Do_Setup_Alarm_Time
  2676 ;;		_Do_Setup_Heater_Temp
  2677 ;;		_Do_Setup_Time
  2678 ;;		_Initialize_Screen
  2679 ;;		_Monitor_Heater
  2680 ;;		_Set_Alarm_RGB
  2681 ;;		_Set_DC_RGB
  2682 ;;		_Set_RPM_RGB
  2683 ;;		_Test_Alarm
  2684 ;;		_Toggle_Heater
  2685 ;;		_Update_Screen
  2686 ;;		___awdiv
  2687 ;;		___wmul
  2688 ;;		_check_for_button_input
  2689 ;;		_get_RPM
  2690 ;;		_printf
  2691 ;;		_read_volt
  2692 ;; This function is called by:
  2693 ;;		Startup code after reset
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text0
  2698  0019D6                     __ptext0:
  2699                           	opt stack 0
  2700  0019D6                     _main:
  2701                           	opt stack 18
  2702                           
  2703                           ;Main.c: 123: Do_Init();
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;incstack = 0
  2707  0019D6  EC59  F023         	call	_Do_Init	;wreg free
  2708                           
  2709                           ;Main.c: 124: Initialize_Screen();
  2710  0019DA  EC31  F00B         	call	_Initialize_Screen	;wreg free
  2711                           
  2712                           ;Main.c: 125: DS3231_Turn_Off_Alarm();
  2713  0019DE  EC65  F024         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2714                           
  2715                           ;Main.c: 126: DS3231_Read_Alarm_Time();
  2716  0019E2  ECB7  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
  2717                           
  2718                           ;Main.c: 128: tempSecond = 0xff;
  2719  0019E6  0100               	movlb	0	; () banked
  2720  0019E8  69B8               	setf	_tempSecond& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;Main.c: 129: Set_Alarm_RGB(7);
  2724  0019EA  0E07               	movlw	7
  2725  0019EC  EC1E  F026         	call	_Set_Alarm_RGB
  2726  0019F0  D000               	goto	l10800
  2727  0019F2                     l10800:
  2728                           
  2729                           ;Main.c: 132: {
  2730                           ;Main.c: 133: DS3231_Read_Time();
  2731  0019F2  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  2732                           
  2733                           ;Main.c: 135: if(tempSecond != second)
  2734  0019F6  506D               	movf	_second,w,c
  2735  0019F8  0100               	movlb	0	; () banked
  2736  0019FA  19B8               	xorwf	_tempSecond& (0+255),w,b
  2737  0019FC  B4D8               	btfsc	status,2,c
  2738  0019FE  D0C9               	goto	l10838
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;Main.c: 136: {
  2742                           ;Main.c: 137: tempSecond = second;
  2743  001A00  C06D  F0B8         	movff	_second,_tempSecond
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;Main.c: 138: rpm = get_RPM();
  2747  001A04  EC49  F025         	call	_get_RPM	;wreg free
  2748  001A08  C01F  F099         	movff	?_get_RPM,_rpm
  2749  001A0C  C020  F09A         	movff	?_get_RPM+1,_rpm+1
  2750                           
  2751                           ;Main.c: 139: volt = read_volt();
  2752  001A10  ECE8  F021         	call	_read_volt	;wreg free
  2753  001A14  C03D  F084         	movff	?_read_volt,_volt
  2754  001A18  C03E  F085         	movff	?_read_volt+1,_volt+1
  2755  001A1C  C03F  F086         	movff	?_read_volt+2,_volt+2
  2756                           
  2757                           ;Main.c: 140: DS1621_tempC = DS1621_Read_Temp();
  2758  001A20  ECE3  F025         	call	_DS1621_Read_Temp	;wreg free
  2759  001A24  C014  F089         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2760  001A28  C015  F08A         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2761                           
  2762                           ;Main.c: 141: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2763  001A2C  0100               	movlb	0	; () banked
  2764  001A2E  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  2765  001A30  D01D               	goto	l10816
  2766                           
  2767                           ; BSR set to: 0
  2768  001A32  C089  F0F2         	movff	_DS1621_tempC,??_main
  2769  001A36  C08A  F0F3         	movff	_DS1621_tempC+1,??_main+1
  2770  001A3A  0100               	movlb	0	; () banked
  2771  001A3C  1FF2               	comf	??_main& (0+255),f,b
  2772  001A3E  1FF3               	comf	(??_main+1)& (0+255),f,b
  2773  001A40  4BF2               	infsnz	??_main& (0+255),f,b
  2774  001A42  2BF3               	incf	(??_main+1)& (0+255),f,b
  2775  001A44  0E80               	movlw	128
  2776  001A46  0100               	movlb	0	; () banked
  2777  001A48  27F2               	addwf	??_main& (0+255),f,b
  2778  001A4A  0E00               	movlw	0
  2779  001A4C  23F3               	addwfc	(??_main+1)& (0+255),f,b
  2780  001A4E  0E7F               	movlw	127
  2781  001A50  0100               	movlb	0	; () banked
  2782  001A52  17F2               	andwf	??_main& (0+255),f,b
  2783  001A54  0E00               	movlw	0
  2784  001A56  17F3               	andwf	(??_main+1)& (0+255),f,b
  2785  001A58  0100               	movlb	0	; () banked
  2786  001A5A  1FF2               	comf	??_main& (0+255),f,b
  2787  001A5C  1FF3               	comf	(??_main+1)& (0+255),f,b
  2788  001A5E  4BF2               	infsnz	??_main& (0+255),f,b
  2789  001A60  2BF3               	incf	(??_main+1)& (0+255),f,b
  2790  001A62  C0F2  F089         	movff	??_main,_DS1621_tempC
  2791  001A66  C0F3  F08A         	movff	??_main+1,_DS1621_tempC+1
  2792  001A6A  D000               	goto	l10816
  2793  001A6C                     l10816:
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Main.c: 142: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2797  001A6C  C089  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2798  001A70  C08A  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2799  001A74  0E00               	movlw	0
  2800  001A76  6E14               	movwf	___wmul@multiplicand+1,c
  2801  001A78  0E09               	movlw	9
  2802  001A7A  6E13               	movwf	___wmul@multiplicand,c
  2803  001A7C  ECC4  F026         	call	___wmul	;wreg free
  2804  001A80  C011  F017         	movff	?___wmul,___awdiv@dividend
  2805  001A84  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2806  001A88  0E00               	movlw	0
  2807  001A8A  6E1A               	movwf	___awdiv@divisor+1,c
  2808  001A8C  0E05               	movlw	5
  2809  001A8E  6E19               	movwf	___awdiv@divisor,c
  2810  001A90  EC2D  F01F         	call	___awdiv	;wreg free
  2811  001A94  0E20               	movlw	32
  2812  001A96  2417               	addwf	?___awdiv,w,c
  2813  001A98  0100               	movlb	0	; () banked
  2814  001A9A  6F8B               	movwf	_DS1621_tempF& (0+255),b
  2815  001A9C  0E00               	movlw	0
  2816  001A9E  2018               	addwfc	?___awdiv+1,w,c
  2817  001AA0  0100               	movlb	0	; () banked
  2818  001AA2  6F8C               	movwf	(_DS1621_tempF+1)& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;Main.c: 144: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2822  001AA4  0EA8               	movlw	low STR_1
  2823  001AA6  0100               	movlb	0	; () banked
  2824  001AA8  6FDA               	movwf	printf@f& (0+255),b
  2825  001AAA  0EFE               	movlw	high STR_1
  2826  001AAC  0100               	movlb	0	; () banked
  2827  001AAE  6FDB               	movwf	(printf@f+1)& (0+255),b
  2828  001AB0  C06A  F0DC         	movff	_hour,?_printf+2
  2829  001AB4  0100               	movlb	0	; () banked
  2830  001AB6  6BDD               	clrf	(?_printf+3)& (0+255),b
  2831  001AB8  C06B  F0DE         	movff	_minute,?_printf+4
  2832  001ABC  0100               	movlb	0	; () banked
  2833  001ABE  6BDF               	clrf	(?_printf+5)& (0+255),b
  2834  001AC0  C06D  F0E0         	movff	_second,?_printf+6
  2835  001AC4  0100               	movlb	0	; () banked
  2836  001AC6  6BE1               	clrf	(?_printf+7)& (0+255),b
  2837  001AC8  C06C  F0E2         	movff	_month,?_printf+8
  2838  001ACC  0100               	movlb	0	; () banked
  2839  001ACE  6BE3               	clrf	(?_printf+9)& (0+255),b
  2840  001AD0  C067  F0E4         	movff	_day,?_printf+10
  2841  001AD4  0100               	movlb	0	; () banked
  2842  001AD6  6BE5               	clrf	(?_printf+11)& (0+255),b
  2843  001AD8  C06F  F0E6         	movff	_year,?_printf+12
  2844  001ADC  0100               	movlb	0	; () banked
  2845  001ADE  6BE7               	clrf	(?_printf+13)& (0+255),b
  2846  001AE0  EC0E  F000         	call	_printf	;wreg free
  2847                           
  2848                           ;Main.c: 145: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2849  001AE4  0EF4               	movlw	low STR_2
  2850  001AE6  0100               	movlb	0	; () banked
  2851  001AE8  6FDA               	movwf	printf@f& (0+255),b
  2852  001AEA  0EFE               	movlw	high STR_2
  2853  001AEC  0100               	movlb	0	; () banked
  2854  001AEE  6FDB               	movwf	(printf@f+1)& (0+255),b
  2855  001AF0  C089  F0DC         	movff	_DS1621_tempC,?_printf+2
  2856  001AF4  C08A  F0DD         	movff	_DS1621_tempC+1,?_printf+3
  2857  001AF8  C08B  F0DE         	movff	_DS1621_tempF,?_printf+4
  2858  001AFC  C08C  F0DF         	movff	_DS1621_tempF+1,?_printf+5
  2859  001B00  EC0E  F000         	call	_printf	;wreg free
  2860                           
  2861                           ;Main.c: 146: printf ("alarm = %d Heater = %d ", PORTBbits.RB2, HEATER);
  2862  001B04  0EC6               	movlw	low STR_3
  2863  001B06  0100               	movlb	0	; () banked
  2864  001B08  6FDA               	movwf	printf@f& (0+255),b
  2865  001B0A  0EFE               	movlw	high STR_3
  2866  001B0C  0100               	movlb	0	; () banked
  2867  001B0E  6FDB               	movwf	(printf@f+1)& (0+255),b
  2868  001B10  A481               	btfss	3969,2,c	;volatile
  2869  001B12  D004               	goto	u9380
  2870  001B14  0100               	movlb	0	; () banked
  2871  001B16  6BF2               	clrf	??_main& (0+255),b
  2872  001B18  2BF2               	incf	??_main& (0+255),f,b
  2873  001B1A  D002               	goto	u9388
  2874  001B1C                     u9380:
  2875  001B1C  0100               	movlb	0	; () banked
  2876  001B1E  6BF2               	clrf	??_main& (0+255),b
  2877  001B20                     u9388:
  2878  001B20  0100               	movlb	0	; () banked
  2879  001B22  51F2               	movf	??_main& (0+255),w,b
  2880  001B24  0100               	movlb	0	; () banked
  2881  001B26  6FDC               	movwf	(?_printf+2)& (0+255),b
  2882  001B28  6BDD               	clrf	(?_printf+3)& (0+255),b
  2883  001B2A  C09D  F0DE         	movff	_HEATER,?_printf+4
  2884  001B2E  0100               	movlb	0	; () banked
  2885  001B30  6BDF               	clrf	(?_printf+5)& (0+255),b
  2886  001B32  EC0E  F000         	call	_printf	;wreg free
  2887                           
  2888                           ;Main.c: 147: printf ("Volt = %f ",volt);
  2889  001B36  0EAA               	movlw	low STR_4
  2890  001B38  0100               	movlb	0	; () banked
  2891  001B3A  6FDA               	movwf	printf@f& (0+255),b
  2892  001B3C  0EFF               	movlw	high STR_4
  2893  001B3E  0100               	movlb	0	; () banked
  2894  001B40  6FDB               	movwf	(printf@f+1)& (0+255),b
  2895  001B42  C084  F0DC         	movff	_volt,?_printf+2
  2896  001B46  C085  F0DD         	movff	_volt+1,?_printf+3
  2897  001B4A  C086  F0DE         	movff	_volt+2,?_printf+4
  2898  001B4E  EC0E  F000         	call	_printf	;wreg free
  2899                           
  2900                           ;Main.c: 148: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2901  001B52  0E09               	movlw	low STR_5
  2902  001B54  0100               	movlb	0	; () banked
  2903  001B56  6FDA               	movwf	printf@f& (0+255),b
  2904  001B58  0EFF               	movlw	high STR_5
  2905  001B5A  0100               	movlb	0	; () banked
  2906  001B5C  6FDB               	movwf	(printf@f+1)& (0+255),b
  2907  001B5E  C099  F0DC         	movff	_rpm,?_printf+2
  2908  001B62  C09A  F0DD         	movff	_rpm+1,?_printf+3
  2909  001B66  C068  F0DE         	movff	_duty_cycle,?_printf+4
  2910  001B6A  0100               	movlb	0	; () banked
  2911  001B6C  6BDF               	clrf	(?_printf+5)& (0+255),b
  2912  001B6E  EC0E  F000         	call	_printf	;wreg free
  2913                           
  2914                           ;Main.c: 150: Set_RPM_RGB(rpm);
  2915  001B72  C099  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2916  001B76  C09A  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2917  001B7A  ECF8  F022         	call	_Set_RPM_RGB	;wreg free
  2918                           
  2919                           ;Main.c: 151: Set_DC_RGB(duty_cycle);
  2920  001B7E  5068               	movf	_duty_cycle,w,c
  2921  001B80  EC01  F026         	call	_Set_DC_RGB
  2922                           
  2923                           ;Main.c: 153: Monitor_Heater();
  2924  001B84  EC82  F026         	call	_Monitor_Heater	;wreg free
  2925                           
  2926                           ;Main.c: 154: Test_Alarm();
  2927  001B88  EC6E  F019         	call	_Test_Alarm	;wreg free
  2928                           
  2929                           ;Main.c: 155: Update_Screen();
  2930  001B8C  EC30  F006         	call	_Update_Screen	;wreg free
  2931  001B90  D000               	goto	l10838
  2932  001B92                     l10838:
  2933                           
  2934                           ;Main.c: 156: }
  2935                           ;Main.c: 158: if (check_for_button_input() == 1)
  2936  001B92  EC0D  F020         	call	_check_for_button_input	;wreg free
  2937  001B96  06E8               	decf	wreg,f,c
  2938  001B98  A4D8               	btfss	status,2,c
  2939  001B9A  D02C               	goto	l10862
  2940                           
  2941                           ;Main.c: 159: {
  2942                           ;Main.c: 161: nec_ok = 0;
  2943  001B9C  0E00               	movlw	0
  2944  001B9E  0100               	movlb	0	; () banked
  2945  001BA0  6F98               	movwf	(_nec_ok+1)& (0+255),b
  2946  001BA2  0E00               	movlw	0
  2947  001BA4  6F97               	movwf	_nec_ok& (0+255),b
  2948                           
  2949                           ;Main.c: 162: switch (found)
  2950  001BA6  D017               	goto	l10860
  2951  001BA8                     l10842:
  2952                           
  2953                           ;Main.c: 165: Do_Beep_Good();
  2954  001BA8  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  2955                           
  2956                           ;Main.c: 166: Do_Setup_Time();
  2957  001BAC  ECA6  F01B         	call	_Do_Setup_Time	;wreg free
  2958                           
  2959                           ;Main.c: 167: break;
  2960  001BB0  D021               	goto	l10862
  2961  001BB2                     l10846:
  2962                           
  2963                           ;Main.c: 170: Do_Beep_Good();
  2964  001BB2  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  2965                           
  2966                           ;Main.c: 171: Do_Setup_Alarm_Time();
  2967  001BB6  ECD5  F01C         	call	_Do_Setup_Alarm_Time	;wreg free
  2968                           
  2969                           ;Main.c: 172: break;
  2970  001BBA  D01C               	goto	l10862
  2971  001BBC                     l10850:
  2972                           
  2973                           ;Main.c: 175: Do_Beep_Good();
  2974  001BBC  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  2975                           
  2976                           ;Main.c: 176: Do_Setup_Heater_Temp();
  2977  001BC0  ECC3  F01F         	call	_Do_Setup_Heater_Temp	;wreg free
  2978                           
  2979                           ;Main.c: 177: break;
  2980  001BC4  D017               	goto	l10862
  2981  001BC6                     l10854:
  2982                           
  2983                           ;Main.c: 180: Do_Beep_Good();
  2984  001BC6  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  2985                           
  2986                           ;Main.c: 181: Toggle_Heater();
  2987  001BCA  EC03  F028         	call	_Toggle_Heater	;wreg free
  2988                           
  2989                           ;Main.c: 182: break;
  2990  001BCE  D012               	goto	l10862
  2991  001BD0                     l10856:
  2992                           
  2993                           ;Main.c: 185: Do_Beep_Bad();
  2994  001BD0  EC37  F028         	call	_Do_Beep_Bad	;wreg free
  2995                           
  2996                           ;Main.c: 187: }
  2997                           
  2998                           ;Main.c: 186: break;
  2999  001BD4  D00F               	goto	l10862
  3000  001BD6                     l10860:
  3001  001BD6  5069               	movf	_found,w,c
  3002                           
  3003                           ; Switch size 1, requested type "space"
  3004                           ; Number of cases is 4, Range of values is 0 to 5
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte           13     7 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009  001BD8  0A00               	xorlw	0	; case 0
  3010  001BDA  B4D8               	btfsc	status,2,c
  3011  001BDC  D7E5               	goto	l10842
  3012  001BDE  0A01               	xorlw	1	; case 1
  3013  001BE0  B4D8               	btfsc	status,2,c
  3014  001BE2  D7E7               	goto	l10846
  3015  001BE4  0A03               	xorlw	3	; case 2
  3016  001BE6  B4D8               	btfsc	status,2,c
  3017  001BE8  D7E9               	goto	l10850
  3018  001BEA  0A07               	xorlw	7	; case 5
  3019  001BEC  B4D8               	btfsc	status,2,c
  3020  001BEE  D7EB               	goto	l10854
  3021  001BF0  D7EF               	goto	l10856
  3022  001BF2  D000               	goto	l10862
  3023  001BF4                     l10862:
  3024                           
  3025                           ;Main.c: 188: }
  3026                           ;Main.c: 192: if (INT1_flag == 1)
  3027  001BF4  0100               	movlb	0	; () banked
  3028  001BF6  059E               	decf	_INT1_flag& (0+255),w,b
  3029  001BF8  A4D8               	btfss	status,2,c
  3030  001BFA  D014               	goto	l10872
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;Main.c: 193: {
  3034                           ;Main.c: 194: INT1_flag = 0;
  3035  001BFC  0E00               	movlw	0
  3036  001BFE  0100               	movlb	0	; () banked
  3037  001C00  6F9E               	movwf	_INT1_flag& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;Main.c: 195: if (ALARMEN == 0) ALARMEN = 1;
  3041  001C02  0100               	movlb	0	; () banked
  3042  001C04  5187               	movf	_ALARMEN& (0+255),w,b
  3043  001C06  0100               	movlb	0	; () banked
  3044  001C08  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3045  001C0A  A4D8               	btfss	status,2,c
  3046  001C0C  D005               	goto	l10870
  3047                           
  3048                           ; BSR set to: 0
  3049  001C0E  0E00               	movlw	0
  3050  001C10  0100               	movlb	0	; () banked
  3051  001C12  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3052  001C14  0E01               	movlw	1
  3053  001C16  D004               	goto	L1
  3054  001C18                     l10870:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main.c: 196: else ALARMEN = 0;
  3058  001C18  0E00               	movlw	0
  3059  001C1A  0100               	movlb	0	; () banked
  3060  001C1C  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3061  001C1E  0E00               	movlw	0
  3062  001C20                     L1:
  3063  001C20  6F87               	movwf	_ALARMEN& (0+255),b
  3064                           
  3065                           ; BSR set to: 0
  3066  001C22  D000               	goto	l10872
  3067  001C24                     l10872:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;Main.c: 197: }
  3071                           ;Main.c: 199: if (INT2_flag == 1)
  3072  001C24  0100               	movlb	0	; () banked
  3073  001C26  059F               	decf	_INT2_flag& (0+255),w,b
  3074  001C28  A4D8               	btfss	status,2,c
  3075  001C2A  D6E3               	goto	l10800
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Main.c: 200: {
  3079                           ;Main.c: 201: INT2_flag = 0;
  3080  001C2C  0E00               	movlw	0
  3081  001C2E  0100               	movlb	0	; () banked
  3082  001C30  6F9F               	movwf	_INT2_flag& (0+255),b
  3083                           
  3084                           ; BSR set to: 0
  3085                           
  3086                           ; BSR set to: 0
  3087  001C32  D6DF               	goto	l10800
  3088                           
  3089                           ; BSR set to: 0
  3090                           
  3091                           ; BSR set to: 0
  3092  001C34  EF0C  F000         	goto	start
  3093  001C38                     __end_of_main:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1l	equ	0xFE1
  3103                           status	equ	0xFD8
  3104                           
  3105 ;; *************** function _read_volt *****************
  3106 ;; Defined at:
  3107 ;;		line 168 in file "utils.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  volts           3   66[COMRAM] float 
  3112 ;;  mv              3   63[COMRAM] float 
  3113 ;;  num_step        2   69[COMRAM] int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  3   60[COMRAM] float 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3123 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;Total ram usage:       11 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    5
  3130 ;; This function calls:
  3131 ;;		___awtoft
  3132 ;;		___ftdiv
  3133 ;;		___ftmul
  3134 ;;		_get_full_ADC
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text1
  3141  0043D0                     __ptext1:
  3142                           	opt stack 0
  3143  0043D0                     _read_volt:
  3144                           	opt stack 25
  3145                           
  3146                           ;utils.c: 170: int num_step = get_full_ADC();
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;incstack = 0
  3150  0043D0  ECD8  F026         	call	_get_full_ADC	;wreg free
  3151  0043D4  C011  F046         	movff	?_get_full_ADC,read_volt@num_step
  3152  0043D8  C012  F047         	movff	?_get_full_ADC+1,read_volt@num_step+1
  3153                           
  3154                           ;utils.c: 171: float mv = num_step * 4.0;
  3155  0043DC  C046  F019         	movff	read_volt@num_step,___awtoft@c
  3156  0043E0  C047  F01A         	movff	read_volt@num_step+1,___awtoft@c+1
  3157  0043E4  ECC5  F025         	call	___awtoft	;wreg free
  3158  0043E8  C019  F01F         	movff	?___awtoft,___ftmul@f1
  3159  0043EC  C01A  F020         	movff	?___awtoft+1,___ftmul@f1+1
  3160  0043F0  C01B  F021         	movff	?___awtoft+2,___ftmul@f1+2
  3161  0043F4  0E00               	movlw	0
  3162  0043F6  6E22               	movwf	___ftmul@f2,c
  3163  0043F8  0E80               	movlw	128
  3164  0043FA  6E23               	movwf	___ftmul@f2+1,c
  3165  0043FC  0E40               	movlw	64
  3166  0043FE  6E24               	movwf	___ftmul@f2+2,c
  3167  004400  EC8B  F017         	call	___ftmul	;wreg free
  3168  004404  C01F  F040         	movff	?___ftmul,read_volt@mv
  3169  004408  C020  F041         	movff	?___ftmul+1,read_volt@mv+1
  3170  00440C  C021  F042         	movff	?___ftmul+2,read_volt@mv+2
  3171                           
  3172                           ;utils.c: 172: float volts = mv / 1000.0;
  3173  004410  C040  F02E         	movff	read_volt@mv,___ftdiv@f1
  3174  004414  C041  F02F         	movff	read_volt@mv+1,___ftdiv@f1+1
  3175  004418  C042  F030         	movff	read_volt@mv+2,___ftdiv@f1+2
  3176  00441C  0E00               	movlw	0
  3177  00441E  6E31               	movwf	___ftdiv@f2,c
  3178  004420  0E7A               	movlw	122
  3179  004422  6E32               	movwf	___ftdiv@f2+1,c
  3180  004424  0E44               	movlw	68
  3181  004426  6E33               	movwf	___ftdiv@f2+2,c
  3182  004428  EC56  F01A         	call	___ftdiv	;wreg free
  3183  00442C  C02E  F043         	movff	?___ftdiv,read_volt@volts
  3184  004430  C02F  F044         	movff	?___ftdiv+1,read_volt@volts+1
  3185  004434  C030  F045         	movff	?___ftdiv+2,read_volt@volts+2
  3186                           
  3187                           ;utils.c: 173: return volts;
  3188  004438  C043  F03D         	movff	read_volt@volts,?_read_volt
  3189  00443C  C044  F03E         	movff	read_volt@volts+1,?_read_volt+1
  3190  004440  C045  F03F         	movff	read_volt@volts+2,?_read_volt+2
  3191  004444  D000               	goto	l1166
  3192  004446                     l1166:
  3193  004446  0012               	return		;funcret
  3194  004448                     __end_of_read_volt:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           postdec1	equ	0xFE5
  3203                           fsr1l	equ	0xFE1
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _get_full_ADC *****************
  3207 ;; Defined at:
  3208 ;;		line 176 in file "utils.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;		None
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  result          2   20[COMRAM] int 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  2   16[COMRAM] unsigned int 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3222 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3225 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;Total ram usage:        6 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_read_volt
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text2
  3237  004DB0                     __ptext2:
  3238                           	opt stack 0
  3239  004DB0                     _get_full_ADC:
  3240                           	opt stack 26
  3241                           
  3242                           ;utils.c: 178: int result;
  3243                           ;utils.c: 179: ADCON0bits.GO=1;
  3244                           
  3245                           ;incstack = 0
  3246  004DB0  82C2               	bsf	4034,1,c	;volatile
  3247                           
  3248                           ;utils.c: 180: while(ADCON0bits.DONE==1);
  3249  004DB2  D000               	goto	l1169
  3250  004DB4                     l1169:
  3251  004DB4  B2C2               	btfsc	4034,1,c	;volatile
  3252  004DB6  D7FE               	goto	l1169
  3253                           
  3254                           ;utils.c: 181: result = (ADRESH * 0x100) + ADRESL;
  3255  004DB8  50C4               	movf	4036,w,c	;volatile
  3256  004DBA  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  3257  004DBC  6A13               	clrf	??_get_full_ADC& (0+255),c
  3258  004DBE  50C3               	movf	4035,w,c	;volatile
  3259  004DC0  2413               	addwf	??_get_full_ADC,w,c
  3260  004DC2  6E15               	movwf	get_full_ADC@result,c
  3261  004DC4  0E00               	movlw	0
  3262  004DC6  2014               	addwfc	??_get_full_ADC+1,w,c
  3263  004DC8  6E16               	movwf	get_full_ADC@result+1,c
  3264                           
  3265                           ;utils.c: 182: return result;
  3266  004DCA  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  3267  004DCE  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  3268  004DD2  D000               	goto	l1172
  3269  004DD4                     l1172:
  3270  004DD4  0012               	return		;funcret
  3271  004DD6                     __end_of_get_full_ADC:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           fsr1l	equ	0xFE1
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function ___awtoft *****************
  3284 ;; Defined at:
  3285 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  c               2   24[COMRAM] int 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  sign            1   27[COMRAM] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  3   24[COMRAM] float 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3299 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;Total ram usage:        4 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    4
  3306 ;; This function calls:
  3307 ;;		___ftpack
  3308 ;; This function is called by:
  3309 ;;		_read_volt
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text3
  3314  004B8A                     __ptext3:
  3315                           	opt stack 0
  3316  004B8A                     ___awtoft:
  3317                           	opt stack 25
  3318                           
  3319                           ;incstack = 0
  3320  004B8A  0E00               	movlw	0
  3321  004B8C  6E1C               	movwf	___awtoft@sign,c
  3322  004B8E  AE1A               	btfss	___awtoft@c+1,7,c
  3323  004B90  D007               	goto	l10398
  3324  004B92  6C19               	negf	___awtoft@c,c
  3325  004B94  1E1A               	comf	___awtoft@c+1,f,c
  3326  004B96  B0D8               	btfsc	status,0,c
  3327  004B98  2A1A               	incf	___awtoft@c+1,f,c
  3328  004B9A  0E01               	movlw	1
  3329  004B9C  6E1C               	movwf	___awtoft@sign,c
  3330  004B9E  D000               	goto	l10398
  3331  004BA0                     l10398:
  3332  004BA0  C019  F011         	movff	___awtoft@c,___ftpack@arg
  3333  004BA4  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  3334  004BA8  6A13               	clrf	___ftpack@arg+2,c
  3335  004BAA  0E8E               	movlw	142
  3336  004BAC  6E14               	movwf	___ftpack@exp,c
  3337  004BAE  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  3338  004BB2  EC12  F01C         	call	___ftpack	;wreg free
  3339  004BB6  C011  F019         	movff	?___ftpack,?___awtoft
  3340  004BBA  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  3341  004BBE  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  3342  004BC2  D000               	goto	l1782
  3343  004BC4                     l1782:
  3344  004BC4  0012               	return		;funcret
  3345  004BC6                     __end_of___awtoft:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           postinc0	equ	0xFEE
  3352                           wreg	equ	0xFE8
  3353                           postdec1	equ	0xFE5
  3354                           fsr1l	equ	0xFE1
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _get_RPM *****************
  3358 ;; Defined at:
  3359 ;;		line 46 in file "Fan_Support.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  RPS             2   32[COMRAM] int 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  2   30[COMRAM] int 
  3366 ;; Registers used:
  3367 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;Total ram usage:        4 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    4
  3380 ;; This function calls:
  3381 ;;		___awdiv
  3382 ;;		___wmul
  3383 ;; This function is called by:
  3384 ;;		_main
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text4
  3389  004A92                     __ptext4:
  3390                           	opt stack 0
  3391  004A92                     _get_RPM:
  3392                           	opt stack 26
  3393                           
  3394                           ;Fan_Support.c: 48: int RPS = TMR3L / 2;
  3395                           
  3396                           ;incstack = 0
  3397  004A92  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3398  004A96  6A18               	clrf	___awdiv@dividend+1,c
  3399  004A98  0E00               	movlw	0
  3400  004A9A  6E1A               	movwf	___awdiv@divisor+1,c
  3401  004A9C  0E02               	movlw	2
  3402  004A9E  6E19               	movwf	___awdiv@divisor,c
  3403  004AA0  EC2D  F01F         	call	___awdiv	;wreg free
  3404  004AA4  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3405  004AA8  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3406                           
  3407                           ;Fan_Support.c: 50: TMR3L = 0;
  3408  004AAC  0E00               	movlw	0
  3409  004AAE  6EB2               	movwf	4018,c	;volatile
  3410                           
  3411                           ;Fan_Support.c: 51: return (RPS * 60);
  3412  004AB0  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3413  004AB4  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3414  004AB8  0E00               	movlw	0
  3415  004ABA  6E14               	movwf	___wmul@multiplicand+1,c
  3416  004ABC  0E3C               	movlw	60
  3417  004ABE  6E13               	movwf	___wmul@multiplicand,c
  3418  004AC0  ECC4  F026         	call	___wmul	;wreg free
  3419  004AC4  C011  F01F         	movff	?___wmul,?_get_RPM
  3420  004AC8  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3421  004ACC  D000               	goto	l44
  3422  004ACE                     l44:
  3423  004ACE  0012               	return		;funcret
  3424  004AD0                     __end_of_get_RPM:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           tblptrh	equ	0xFF7
  3428                           tblptrl	equ	0xFF6
  3429                           tablat	equ	0xFF5
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           postdec1	equ	0xFE5
  3433                           fsr1l	equ	0xFE1
  3434                           status	equ	0xFD8
  3435                           
  3436 ;; *************** function _Update_Screen *****************
  3437 ;; Defined at:
  3438 ;;		line 77 in file "Main_Screen.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;		None
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;  neg_tempF       2   75[COMRAM] int 
  3443 ;;  neg_DS1621_t    1   77[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2  372[None  ] int 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        5 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:   10
  3460 ;; This function calls:
  3461 ;;		___awdiv
  3462 ;;		___awmod
  3463 ;;		___ftmul
  3464 ;;		___fttol
  3465 ;;		_drawtext
  3466 ;;		_strcpy
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text5
  3473  000C60                     __ptext5:
  3474                           	opt stack 0
  3475  000C60                     _Update_Screen:
  3476                           	opt stack 20
  3477                           
  3478                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3479                           
  3480                           ;incstack = 0
  3481  000C60  0100               	movlb	0	; () banked
  3482  000C62  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  3483  000C64  D020               	goto	l10504
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;Main_Screen.c: 80: {
  3487                           ;Main_Screen.c: 81: tempC[0] = '-';
  3488  000C66  0E2D               	movlw	45
  3489  000C68  0100               	movlb	0	; () banked
  3490  000C6A  6FD0               	movwf	_tempC& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3494  000C6C  0100               	movlb	0	; () banked
  3495  000C6E  5189               	movf	_DS1621_tempC& (0+255),w,b
  3496  000C70  0B7F               	andlw	127
  3497  000C72  0800               	sublw	0
  3498  000C74  0F80               	addlw	128
  3499  000C76  6E4E               	movwf	Update_Screen@neg_DS1621_tempC,c
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3503  000C78  C04E  F017         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3504  000C7C  6A18               	clrf	___awdiv@dividend+1,c
  3505  000C7E  0E00               	movlw	0
  3506  000C80  6E1A               	movwf	___awdiv@divisor+1,c
  3507  000C82  0E0A               	movlw	10
  3508  000C84  6E19               	movwf	___awdiv@divisor,c
  3509  000C86  EC2D  F01F         	call	___awdiv	;wreg free
  3510  000C8A  5017               	movf	?___awdiv,w,c
  3511  000C8C  0F30               	addlw	48
  3512  000C8E  0100               	movlb	0	; () banked
  3513  000C90  6FD1               	movwf	(_tempC+1)& (0+255),b
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3517  000C92  C04E  F03D         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3518  000C96  6A3E               	clrf	___awmod@dividend+1,c
  3519  000C98  0E00               	movlw	0
  3520  000C9A  6E40               	movwf	___awmod@divisor+1,c
  3521  000C9C  0E0A               	movlw	10
  3522  000C9E  6E3F               	movwf	___awmod@divisor,c
  3523  000CA0  EC29  F021         	call	___awmod	;wreg free
  3524  000CA4  D01B               	goto	L2
  3525  000CA6                     l10504:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;Main_Screen.c: 86: else
  3529                           ;Main_Screen.c: 87: {
  3530                           ;Main_Screen.c: 88: tempC[0] = '+';
  3531  000CA6  0E2B               	movlw	43
  3532  000CA8  0100               	movlb	0	; () banked
  3533  000CAA  6FD0               	movwf	_tempC& (0+255),b
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3537  000CAC  C089  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3538  000CB0  C08A  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3539  000CB4  0E00               	movlw	0
  3540  000CB6  6E1A               	movwf	___awdiv@divisor+1,c
  3541  000CB8  0E0A               	movlw	10
  3542  000CBA  6E19               	movwf	___awdiv@divisor,c
  3543  000CBC  EC2D  F01F         	call	___awdiv	;wreg free
  3544  000CC0  5017               	movf	?___awdiv,w,c
  3545  000CC2  0F30               	addlw	48
  3546  000CC4  0100               	movlb	0	; () banked
  3547  000CC6  6FD1               	movwf	(_tempC+1)& (0+255),b
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3551  000CC8  C089  F03D         	movff	_DS1621_tempC,___awmod@dividend
  3552  000CCC  C08A  F03E         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3553  000CD0  0E00               	movlw	0
  3554  000CD2  6E40               	movwf	___awmod@divisor+1,c
  3555  000CD4  0E0A               	movlw	10
  3556  000CD6  6E3F               	movwf	___awmod@divisor,c
  3557  000CD8  EC29  F021         	call	___awmod	;wreg free
  3558  000CDC                     L2:
  3559  000CDC  503D               	movf	?___awmod,w,c
  3560  000CDE  0F30               	addlw	48
  3561  000CE0  0100               	movlb	0	; () banked
  3562  000CE2  6FD2               	movwf	(_tempC+2)& (0+255),b
  3563  000CE4  D000               	goto	l10510
  3564  000CE6                     l10510:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;Main_Screen.c: 91: }
  3568                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3569  000CE6  0100               	movlb	0	; () banked
  3570  000CE8  AF8C               	btfss	(_DS1621_tempF+1)& (0+255),7,b
  3571  000CEA  D02E               	goto	l10520
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;Main_Screen.c: 94: {
  3575                           ;Main_Screen.c: 95: tempF[0] = '-';
  3576  000CEC  0E2D               	movlw	45
  3577  000CEE  0100               	movlb	0	; () banked
  3578  000CF0  6FD4               	movwf	_tempF& (0+255),b
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3582  000CF2  0E7F               	movlw	127
  3583  000CF4  0100               	movlb	0	; () banked
  3584  000CF6  158B               	andwf	_DS1621_tempF& (0+255),w,b
  3585  000CF8  6E4A               	movwf	??_Update_Screen& (0+255),c
  3586  000CFA  0E00               	movlw	0
  3587  000CFC  0100               	movlb	0	; () banked
  3588  000CFE  158C               	andwf	(_DS1621_tempF+1)& (0+255),w,b
  3589  000D00  6E4B               	movwf	(??_Update_Screen+1)& (0+255),c
  3590  000D02  1E4A               	comf	??_Update_Screen,f,c
  3591  000D04  1E4B               	comf	??_Update_Screen+1,f,c
  3592  000D06  4A4A               	infsnz	??_Update_Screen,f,c
  3593  000D08  2A4B               	incf	??_Update_Screen+1,f,c
  3594  000D0A  0E80               	movlw	128
  3595  000D0C  244A               	addwf	??_Update_Screen,w,c
  3596  000D0E  6E4C               	movwf	Update_Screen@neg_tempF,c
  3597  000D10  0E00               	movlw	0
  3598  000D12  204B               	addwfc	??_Update_Screen+1,w,c
  3599  000D14  6E4D               	movwf	Update_Screen@neg_tempF+1,c
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3603  000D16  C04C  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3604  000D1A  C04D  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3605  000D1E  0E00               	movlw	0
  3606  000D20  6E1A               	movwf	___awdiv@divisor+1,c
  3607  000D22  0E0A               	movlw	10
  3608  000D24  6E19               	movwf	___awdiv@divisor,c
  3609  000D26  EC2D  F01F         	call	___awdiv	;wreg free
  3610  000D2A  5017               	movf	?___awdiv,w,c
  3611  000D2C  0F30               	addlw	48
  3612  000D2E  0100               	movlb	0	; () banked
  3613  000D30  6FD5               	movwf	(_tempF+1)& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3617  000D32  C04C  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3618  000D36  C04D  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3619  000D3A  0E00               	movlw	0
  3620  000D3C  6E40               	movwf	___awmod@divisor+1,c
  3621  000D3E  0E0A               	movlw	10
  3622  000D40  6E3F               	movwf	___awmod@divisor,c
  3623  000D42  EC29  F021         	call	___awmod	;wreg free
  3624  000D46  D01B               	goto	L3
  3625  000D48                     l10520:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Main_Screen.c: 100: else
  3629                           ;Main_Screen.c: 101: {
  3630                           ;Main_Screen.c: 102: tempF[0] = '+';
  3631  000D48  0E2B               	movlw	43
  3632  000D4A  0100               	movlb	0	; () banked
  3633  000D4C  6FD4               	movwf	_tempF& (0+255),b
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3637  000D4E  C08B  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3638  000D52  C08C  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3639  000D56  0E00               	movlw	0
  3640  000D58  6E1A               	movwf	___awdiv@divisor+1,c
  3641  000D5A  0E0A               	movlw	10
  3642  000D5C  6E19               	movwf	___awdiv@divisor,c
  3643  000D5E  EC2D  F01F         	call	___awdiv	;wreg free
  3644  000D62  5017               	movf	?___awdiv,w,c
  3645  000D64  0F30               	addlw	48
  3646  000D66  0100               	movlb	0	; () banked
  3647  000D68  6FD5               	movwf	(_tempF+1)& (0+255),b
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3651  000D6A  C08B  F03D         	movff	_DS1621_tempF,___awmod@dividend
  3652  000D6E  C08C  F03E         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3653  000D72  0E00               	movlw	0
  3654  000D74  6E40               	movwf	___awmod@divisor+1,c
  3655  000D76  0E0A               	movlw	10
  3656  000D78  6E3F               	movwf	___awmod@divisor,c
  3657  000D7A  EC29  F021         	call	___awmod	;wreg free
  3658  000D7E                     L3:
  3659  000D7E  503D               	movf	?___awmod,w,c
  3660  000D80  0F30               	addlw	48
  3661  000D82  0100               	movlb	0	; () banked
  3662  000D84  6FD6               	movwf	(_tempF+2)& (0+255),b
  3663  000D86  D000               	goto	l10526
  3664  000D88                     l10526:
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;Main_Screen.c: 105: }
  3668                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3669  000D88  386A               	swapf	_hour,w,c
  3670  000D8A  0B0F               	andlw	15
  3671  000D8C  0F30               	addlw	48
  3672  000D8E  0101               	movlb	1	; () banked
  3673  000D90  6F68               	movwf	_time& (0+255),b
  3674                           
  3675                           ; BSR set to: 1
  3676                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3677  000D92  506A               	movf	_hour,w,c
  3678  000D94  0B0F               	andlw	15
  3679  000D96  0F30               	addlw	48
  3680  000D98  0101               	movlb	1	; () banked
  3681  000D9A  6F69               	movwf	(_time+1)& (0+255),b
  3682                           
  3683                           ; BSR set to: 1
  3684                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3685  000D9C  386B               	swapf	_minute,w,c
  3686  000D9E  0B0F               	andlw	15
  3687  000DA0  0F30               	addlw	48
  3688  000DA2  0101               	movlb	1	; () banked
  3689  000DA4  6F6B               	movwf	(_time+3)& (0+255),b
  3690                           
  3691                           ; BSR set to: 1
  3692                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f) + '0';
  3693  000DA6  506B               	movf	_minute,w,c
  3694  000DA8  0B0F               	andlw	15
  3695  000DAA  0F30               	addlw	48
  3696  000DAC  0101               	movlb	1	; () banked
  3697  000DAE  6F6C               	movwf	(_time+4)& (0+255),b
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  3701  000DB0  386D               	swapf	_second,w,c
  3702  000DB2  0B0F               	andlw	15
  3703  000DB4  0F30               	addlw	48
  3704  000DB6  0101               	movlb	1	; () banked
  3705  000DB8  6F6E               	movwf	(_time+6)& (0+255),b
  3706                           
  3707                           ; BSR set to: 1
  3708                           ;Main_Screen.c: 112: time[7] = (second & 0x0f) + '0';
  3709  000DBA  506D               	movf	_second,w,c
  3710  000DBC  0B0F               	andlw	15
  3711  000DBE  0F30               	addlw	48
  3712  000DC0  0101               	movlb	1	; () banked
  3713  000DC2  6F6F               	movwf	(_time+7)& (0+255),b
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;Main_Screen.c: 113: date[0] = (month>>4) + '0';
  3717  000DC4  386C               	swapf	_month,w,c
  3718  000DC6  0B0F               	andlw	15
  3719  000DC8  0F30               	addlw	48
  3720  000DCA  0101               	movlb	1	; () banked
  3721  000DCC  6F44               	movwf	_date& (0+255),b
  3722                           
  3723                           ; BSR set to: 1
  3724                           ;Main_Screen.c: 114: date[1] = (month & 0x0f) + '0';
  3725  000DCE  506C               	movf	_month,w,c
  3726  000DD0  0B0F               	andlw	15
  3727  000DD2  0F30               	addlw	48
  3728  000DD4  0101               	movlb	1	; () banked
  3729  000DD6  6F45               	movwf	(_date+1)& (0+255),b
  3730                           
  3731                           ; BSR set to: 1
  3732                           ;Main_Screen.c: 115: date[3] = (day>>4) + '0';
  3733  000DD8  3867               	swapf	_day,w,c
  3734  000DDA  0B0F               	andlw	15
  3735  000DDC  0F30               	addlw	48
  3736  000DDE  0101               	movlb	1	; () banked
  3737  000DE0  6F47               	movwf	(_date+3)& (0+255),b
  3738                           
  3739                           ; BSR set to: 1
  3740                           ;Main_Screen.c: 116: date[4] = (day & 0x0f) + '0';
  3741  000DE2  5067               	movf	_day,w,c
  3742  000DE4  0B0F               	andlw	15
  3743  000DE6  0F30               	addlw	48
  3744  000DE8  0101               	movlb	1	; () banked
  3745  000DEA  6F48               	movwf	(_date+4)& (0+255),b
  3746                           
  3747                           ; BSR set to: 1
  3748                           ;Main_Screen.c: 117: date[6] = (year>>4) + '0';
  3749  000DEC  386F               	swapf	_year,w,c
  3750  000DEE  0B0F               	andlw	15
  3751  000DF0  0F30               	addlw	48
  3752  000DF2  0101               	movlb	1	; () banked
  3753  000DF4  6F4A               	movwf	(_date+6)& (0+255),b
  3754                           
  3755                           ; BSR set to: 1
  3756                           ;Main_Screen.c: 118: date[7] = (year & 0x0f) + '0';
  3757  000DF6  506F               	movf	_year,w,c
  3758  000DF8  0B0F               	andlw	15
  3759  000DFA  0F30               	addlw	48
  3760  000DFC  0101               	movlb	1	; () banked
  3761  000DFE  6F4B               	movwf	(_date+7)& (0+255),b
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;Main_Screen.c: 119: alarm_time[0] = (alarm_hour>>4) + '0';
  3765  000E00  3864               	swapf	_alarm_hour,w,c
  3766  000E02  0B0F               	andlw	15
  3767  000E04  0F30               	addlw	48
  3768  000E06  0101               	movlb	1	; () banked
  3769  000E08  6F3B               	movwf	_alarm_time& (0+255),b
  3770                           
  3771                           ; BSR set to: 1
  3772                           ;Main_Screen.c: 120: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3773  000E0A  5064               	movf	_alarm_hour,w,c
  3774  000E0C  0B0F               	andlw	15
  3775  000E0E  0F30               	addlw	48
  3776  000E10  0101               	movlb	1	; () banked
  3777  000E12  6F3C               	movwf	(_alarm_time+1)& (0+255),b
  3778                           
  3779                           ; BSR set to: 1
  3780                           ;Main_Screen.c: 121: alarm_time[3] = (alarm_minute>>4) + '0';
  3781  000E14  3865               	swapf	_alarm_minute,w,c
  3782  000E16  0B0F               	andlw	15
  3783  000E18  0F30               	addlw	48
  3784  000E1A  0101               	movlb	1	; () banked
  3785  000E1C  6F3E               	movwf	(_alarm_time+3)& (0+255),b
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;Main_Screen.c: 122: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3789  000E1E  5065               	movf	_alarm_minute,w,c
  3790  000E20  0B0F               	andlw	15
  3791  000E22  0F30               	addlw	48
  3792  000E24  0101               	movlb	1	; () banked
  3793  000E26  6F3F               	movwf	(_alarm_time+4)& (0+255),b
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;Main_Screen.c: 123: alarm_time[6] = (alarm_second>>4) + '0';
  3797  000E28  3866               	swapf	_alarm_second,w,c
  3798  000E2A  0B0F               	andlw	15
  3799  000E2C  0F30               	addlw	48
  3800  000E2E  0101               	movlb	1	; () banked
  3801  000E30  6F41               	movwf	(_alarm_time+6)& (0+255),b
  3802                           
  3803                           ; BSR set to: 1
  3804                           ;Main_Screen.c: 124: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  3805  000E32  5066               	movf	_alarm_second,w,c
  3806  000E34  0B0F               	andlw	15
  3807  000E36  0F30               	addlw	48
  3808  000E38  0101               	movlb	1	; () banked
  3809  000E3A  6F42               	movwf	(_alarm_time+7)& (0+255),b
  3810                           
  3811                           ; BSR set to: 1
  3812                           ;Main_Screen.c: 126: if (ALARMEN == 1)
  3813  000E3C  0100               	movlb	0	; () banked
  3814  000E3E  0587               	decf	_ALARMEN& (0+255),w,b
  3815  000E40  0100               	movlb	0	; () banked
  3816  000E42  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3817  000E44  A4D8               	btfss	status,2,c
  3818  000E46  D00B               	goto	l10566
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;Main_Screen.c: 127: {
  3822                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "ON ");
  3823  000E48  0EC4               	movlw	low _Alarm_SW_Txt
  3824  000E4A  6E11               	movwf	strcpy@to,c
  3825  000E4C  0E00               	movlw	high _Alarm_SW_Txt
  3826  000E4E  6E12               	movwf	strcpy@to+1,c
  3827  000E50  0EE9               	movlw	low STR_20
  3828  000E52  6E13               	movwf	strcpy@from,c
  3829  000E54  0EFF               	movlw	high STR_20
  3830  000E56  6E14               	movwf	strcpy@from+1,c
  3831  000E58  EC51  F026         	call	_strcpy	;wreg free
  3832                           
  3833                           ;Main_Screen.c: 129: }
  3834  000E5C  D00B               	goto	l10568
  3835  000E5E                     l10566:
  3836                           
  3837                           ;Main_Screen.c: 130: else
  3838                           ;Main_Screen.c: 131: {
  3839                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "OFF");
  3840  000E5E  0EC4               	movlw	low _Alarm_SW_Txt
  3841  000E60  6E11               	movwf	strcpy@to,c
  3842  000E62  0E00               	movlw	high _Alarm_SW_Txt
  3843  000E64  6E12               	movwf	strcpy@to+1,c
  3844  000E66  0EED               	movlw	low STR_21
  3845  000E68  6E13               	movwf	strcpy@from,c
  3846  000E6A  0EFF               	movlw	high STR_21
  3847  000E6C  6E14               	movwf	strcpy@from+1,c
  3848  000E6E  EC51  F026         	call	_strcpy	;wreg free
  3849  000E72  D000               	goto	l10568
  3850  000E74                     l10568:
  3851                           
  3852                           ;Main_Screen.c: 133: }
  3853                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3854  000E74  C0B7  F017         	movff	_heater_set_temp,___awdiv@dividend
  3855  000E78  6A18               	clrf	___awdiv@dividend+1,c
  3856  000E7A  0E00               	movlw	0
  3857  000E7C  6E1A               	movwf	___awdiv@divisor+1,c
  3858  000E7E  0E64               	movlw	100
  3859  000E80  6E19               	movwf	___awdiv@divisor,c
  3860  000E82  EC2D  F01F         	call	___awdiv	;wreg free
  3861  000E86  5017               	movf	?___awdiv,w,c
  3862  000E88  0F30               	addlw	48
  3863  000E8A  0100               	movlb	0	; () banked
  3864  000E8C  6FBA               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[1] = ((heater_set_temp/10) % 10) + '0';
  3868  000E8E  0E00               	movlw	0
  3869  000E90  6E1A               	movwf	___awdiv@divisor+1,c
  3870  000E92  0E0A               	movlw	10
  3871  000E94  6E19               	movwf	___awdiv@divisor,c
  3872  000E96  C0B7  F017         	movff	_heater_set_temp,___awdiv@dividend
  3873  000E9A  6A18               	clrf	___awdiv@dividend+1,c
  3874  000E9C  EC2D  F01F         	call	___awdiv	;wreg free
  3875  000EA0  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3876  000EA4  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3877  000EA8  0E00               	movlw	0
  3878  000EAA  6E40               	movwf	___awmod@divisor+1,c
  3879  000EAC  0E0A               	movlw	10
  3880  000EAE  6E3F               	movwf	___awmod@divisor,c
  3881  000EB0  EC29  F021         	call	___awmod	;wreg free
  3882  000EB4  503D               	movf	?___awmod,w,c
  3883  000EB6  0F30               	addlw	48
  3884  000EB8  0100               	movlb	0	; () banked
  3885  000EBA  6FBB               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3889  000EBC  C0B7  F03D         	movff	_heater_set_temp,___awmod@dividend
  3890  000EC0  6A3E               	clrf	___awmod@dividend+1,c
  3891  000EC2  0E00               	movlw	0
  3892  000EC4  6E40               	movwf	___awmod@divisor+1,c
  3893  000EC6  0E0A               	movlw	10
  3894  000EC8  6E3F               	movwf	___awmod@divisor,c
  3895  000ECA  EC29  F021         	call	___awmod	;wreg free
  3896  000ECE  503D               	movf	?___awmod,w,c
  3897  000ED0  0F30               	addlw	48
  3898  000ED2  0100               	movlb	0	; () banked
  3899  000ED4  6FBC               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;Main_Screen.c: 139: if (HEATER == 1)
  3903  000ED6  0100               	movlb	0	; () banked
  3904  000ED8  059D               	decf	_HEATER& (0+255),w,b
  3905  000EDA  A4D8               	btfss	status,2,c
  3906  000EDC  D00B               	goto	l10578
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;Main_Screen.c: 140: {
  3910                           ;Main_Screen.c: 141: strcpy(Heater_SW_Txt, "ON ");
  3911  000EDE  0ECC               	movlw	low _Heater_SW_Txt
  3912  000EE0  6E11               	movwf	strcpy@to,c
  3913  000EE2  0E00               	movlw	high _Heater_SW_Txt
  3914  000EE4  6E12               	movwf	strcpy@to+1,c
  3915  000EE6  0EE9               	movlw	low STR_20
  3916  000EE8  6E13               	movwf	strcpy@from,c
  3917  000EEA  0EFF               	movlw	high STR_20
  3918  000EEC  6E14               	movwf	strcpy@from+1,c
  3919  000EEE  EC51  F026         	call	_strcpy	;wreg free
  3920                           
  3921                           ;Main_Screen.c: 142: }
  3922  000EF2  D00B               	goto	l10580
  3923  000EF4                     l10578:
  3924                           
  3925                           ;Main_Screen.c: 143: else
  3926                           ;Main_Screen.c: 144: {
  3927                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "OFF");
  3928  000EF4  0ECC               	movlw	low _Heater_SW_Txt
  3929  000EF6  6E11               	movwf	strcpy@to,c
  3930  000EF8  0E00               	movlw	high _Heater_SW_Txt
  3931  000EFA  6E12               	movwf	strcpy@to+1,c
  3932  000EFC  0EED               	movlw	low STR_21
  3933  000EFE  6E13               	movwf	strcpy@from,c
  3934  000F00  0EFF               	movlw	high STR_21
  3935  000F02  6E14               	movwf	strcpy@from+1,c
  3936  000F04  EC51  F026         	call	_strcpy	;wreg free
  3937  000F08  D000               	goto	l10580
  3938  000F0A                     l10580:
  3939                           
  3940                           ;Main_Screen.c: 146: }
  3941                           ;Main_Screen.c: 148: if (PORTBbits.RB2 == 0) RTC_ALARM_Txt[0] = '1';
  3942  000F0A  B481               	btfsc	3969,2,c	;volatile
  3943  000F0C  D002               	goto	l10584
  3944  000F0E  0E31               	movlw	49
  3945  000F10  D001               	goto	L4
  3946  000F12                     l10584:
  3947                           
  3948                           ;Main_Screen.c: 149: else RTC_ALARM_Txt[0] = '0';
  3949  000F12  0E30               	movlw	48
  3950  000F14                     L4:
  3951  000F14  0100               	movlb	0	; () banked
  3952  000F16  6FD8               	movwf	_RTC_ALARM_Txt& (0+255),b
  3953  000F18  D000               	goto	l10586
  3954  000F1A                     l10586:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;Main_Screen.c: 152: DC_Txt[0] = duty_cycle/100 + '0';
  3958  000F1A  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  3959  000F1E  6A18               	clrf	___awdiv@dividend+1,c
  3960  000F20  0E00               	movlw	0
  3961  000F22  6E1A               	movwf	___awdiv@divisor+1,c
  3962  000F24  0E64               	movlw	100
  3963  000F26  6E19               	movwf	___awdiv@divisor,c
  3964  000F28  EC2D  F01F         	call	___awdiv	;wreg free
  3965  000F2C  5017               	movf	?___awdiv,w,c
  3966  000F2E  0F30               	addlw	48
  3967  000F30  0100               	movlb	0	; () banked
  3968  000F32  6FC8               	movwf	_DC_Txt& (0+255),b
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;Main_Screen.c: 153: DC_Txt[1] = ((duty_cycle/10) % 10) + '0';
  3972  000F34  0E00               	movlw	0
  3973  000F36  6E1A               	movwf	___awdiv@divisor+1,c
  3974  000F38  0E0A               	movlw	10
  3975  000F3A  6E19               	movwf	___awdiv@divisor,c
  3976  000F3C  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  3977  000F40  6A18               	clrf	___awdiv@dividend+1,c
  3978  000F42  EC2D  F01F         	call	___awdiv	;wreg free
  3979  000F46  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3980  000F4A  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3981  000F4E  0E00               	movlw	0
  3982  000F50  6E40               	movwf	___awmod@divisor+1,c
  3983  000F52  0E0A               	movlw	10
  3984  000F54  6E3F               	movwf	___awmod@divisor,c
  3985  000F56  EC29  F021         	call	___awmod	;wreg free
  3986  000F5A  503D               	movf	?___awmod,w,c
  3987  000F5C  0F30               	addlw	48
  3988  000F5E  0100               	movlb	0	; () banked
  3989  000F60  6FC9               	movwf	(_DC_Txt+1)& (0+255),b
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;Main_Screen.c: 154: DC_Txt[2] = duty_cycle%10 + '0';
  3993  000F62  C068  F03D         	movff	_duty_cycle,___awmod@dividend
  3994  000F66  6A3E               	clrf	___awmod@dividend+1,c
  3995  000F68  0E00               	movlw	0
  3996  000F6A  6E40               	movwf	___awmod@divisor+1,c
  3997  000F6C  0E0A               	movlw	10
  3998  000F6E  6E3F               	movwf	___awmod@divisor,c
  3999  000F70  EC29  F021         	call	___awmod	;wreg free
  4000  000F74  503D               	movf	?___awmod,w,c
  4001  000F76  0F30               	addlw	48
  4002  000F78  0100               	movlb	0	; () banked
  4003  000F7A  6FCA               	movwf	(_DC_Txt+2)& (0+255),b
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;Main_Screen.c: 156: Volt_Txt[0] = ((int)volt) + '0';
  4007  000F7C  C084  F02E         	movff	_volt,___fttol@f1
  4008  000F80  C085  F02F         	movff	_volt+1,___fttol@f1+1
  4009  000F84  C086  F030         	movff	_volt+2,___fttol@f1+2
  4010  000F88  ECE3  F019         	call	___fttol	;wreg free
  4011  000F8C  502E               	movf	?___fttol,w,c
  4012  000F8E  0F30               	addlw	48
  4013  000F90  0101               	movlb	1	; () banked
  4014  000F92  6F71               	movwf	_Volt_Txt& (0+255),b
  4015                           
  4016                           ; BSR set to: 1
  4017                           ;Main_Screen.c: 157: Volt_Txt[2] = ((int)(volt*10)) % 10 + '0';
  4018  000F94  0E00               	movlw	0
  4019  000F96  6E22               	movwf	___ftmul@f2,c
  4020  000F98  0E20               	movlw	32
  4021  000F9A  6E23               	movwf	___ftmul@f2+1,c
  4022  000F9C  0E41               	movlw	65
  4023  000F9E  6E24               	movwf	___ftmul@f2+2,c
  4024  000FA0  C084  F01F         	movff	_volt,___ftmul@f1
  4025  000FA4  C085  F020         	movff	_volt+1,___ftmul@f1+1
  4026  000FA8  C086  F021         	movff	_volt+2,___ftmul@f1+2
  4027  000FAC  EC8B  F017         	call	___ftmul	;wreg free
  4028  000FB0  C01F  F02E         	movff	?___ftmul,___fttol@f1
  4029  000FB4  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  4030  000FB8  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  4031  000FBC  ECE3  F019         	call	___fttol	;wreg free
  4032  000FC0  C02E  F03D         	movff	?___fttol,___awmod@dividend
  4033  000FC4  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  4034  000FC8  0E00               	movlw	0
  4035  000FCA  6E40               	movwf	___awmod@divisor+1,c
  4036  000FCC  0E0A               	movlw	10
  4037  000FCE  6E3F               	movwf	___awmod@divisor,c
  4038  000FD0  EC29  F021         	call	___awmod	;wreg free
  4039  000FD4  503D               	movf	?___awmod,w,c
  4040  000FD6  0F30               	addlw	48
  4041  000FD8  0101               	movlb	1	; () banked
  4042  000FDA  6F73               	movwf	(_Volt_Txt+2)& (0+255),b
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;Main_Screen.c: 158: Volt_Txt[3] = ((int)(volt*100)) % 10 + '0';
  4046  000FDC  0E00               	movlw	0
  4047  000FDE  6E22               	movwf	___ftmul@f2,c
  4048  000FE0  0EC8               	movlw	200
  4049  000FE2  6E23               	movwf	___ftmul@f2+1,c
  4050  000FE4  0E42               	movlw	66
  4051  000FE6  6E24               	movwf	___ftmul@f2+2,c
  4052  000FE8  C084  F01F         	movff	_volt,___ftmul@f1
  4053  000FEC  C085  F020         	movff	_volt+1,___ftmul@f1+1
  4054  000FF0  C086  F021         	movff	_volt+2,___ftmul@f1+2
  4055  000FF4  EC8B  F017         	call	___ftmul	;wreg free
  4056  000FF8  C01F  F02E         	movff	?___ftmul,___fttol@f1
  4057  000FFC  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  4058  001000  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  4059  001004  ECE3  F019         	call	___fttol	;wreg free
  4060  001008  C02E  F03D         	movff	?___fttol,___awmod@dividend
  4061  00100C  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  4062  001010  0E00               	movlw	0
  4063  001012  6E40               	movwf	___awmod@divisor+1,c
  4064  001014  0E0A               	movlw	10
  4065  001016  6E3F               	movwf	___awmod@divisor,c
  4066  001018  EC29  F021         	call	___awmod	;wreg free
  4067  00101C  503D               	movf	?___awmod,w,c
  4068  00101E  0F30               	addlw	48
  4069  001020  0101               	movlb	1	; () banked
  4070  001022  6F74               	movwf	(_Volt_Txt+3)& (0+255),b
  4071                           
  4072                           ; BSR set to: 1
  4073                           ;Main_Screen.c: 160: RPM_Txt[0] = rpm/1000 + '0';
  4074  001024  C099  F017         	movff	_rpm,___awdiv@dividend
  4075  001028  C09A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4076  00102C  0E03               	movlw	3
  4077  00102E  6E1A               	movwf	___awdiv@divisor+1,c
  4078  001030  0EE8               	movlw	232
  4079  001032  6E19               	movwf	___awdiv@divisor,c
  4080  001034  EC2D  F01F         	call	___awdiv	;wreg free
  4081  001038  5017               	movf	?___awdiv,w,c
  4082  00103A  0F30               	addlw	48
  4083  00103C  0100               	movlb	0	; () banked
  4084  00103E  6FBF               	movwf	_RPM_Txt& (0+255),b
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;Main_Screen.c: 161: RPM_Txt[1] = ((rpm/100) % 10) + '0';
  4088  001040  0E00               	movlw	0
  4089  001042  6E1A               	movwf	___awdiv@divisor+1,c
  4090  001044  0E64               	movlw	100
  4091  001046  6E19               	movwf	___awdiv@divisor,c
  4092  001048  C099  F017         	movff	_rpm,___awdiv@dividend
  4093  00104C  C09A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4094  001050  EC2D  F01F         	call	___awdiv	;wreg free
  4095  001054  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4096  001058  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4097  00105C  0E00               	movlw	0
  4098  00105E  6E40               	movwf	___awmod@divisor+1,c
  4099  001060  0E0A               	movlw	10
  4100  001062  6E3F               	movwf	___awmod@divisor,c
  4101  001064  EC29  F021         	call	___awmod	;wreg free
  4102  001068  503D               	movf	?___awmod,w,c
  4103  00106A  0F30               	addlw	48
  4104  00106C  0100               	movlb	0	; () banked
  4105  00106E  6FC0               	movwf	(_RPM_Txt+1)& (0+255),b
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;Main_Screen.c: 162: RPM_Txt[2] = ((rpm/10) % 10) + '0';
  4109  001070  0E00               	movlw	0
  4110  001072  6E1A               	movwf	___awdiv@divisor+1,c
  4111  001074  0E0A               	movlw	10
  4112  001076  6E19               	movwf	___awdiv@divisor,c
  4113  001078  C099  F017         	movff	_rpm,___awdiv@dividend
  4114  00107C  C09A  F018         	movff	_rpm+1,___awdiv@dividend+1
  4115  001080  EC2D  F01F         	call	___awdiv	;wreg free
  4116  001084  C017  F03D         	movff	?___awdiv,___awmod@dividend
  4117  001088  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  4118  00108C  0E00               	movlw	0
  4119  00108E  6E40               	movwf	___awmod@divisor+1,c
  4120  001090  0E0A               	movlw	10
  4121  001092  6E3F               	movwf	___awmod@divisor,c
  4122  001094  EC29  F021         	call	___awmod	;wreg free
  4123  001098  503D               	movf	?___awmod,w,c
  4124  00109A  0F30               	addlw	48
  4125  00109C  0100               	movlb	0	; () banked
  4126  00109E  6FC1               	movwf	(_RPM_Txt+2)& (0+255),b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;Main_Screen.c: 163: RPM_Txt[3] = rpm%10 + '0';
  4130  0010A0  C099  F03D         	movff	_rpm,___awmod@dividend
  4131  0010A4  C09A  F03E         	movff	_rpm+1,___awmod@dividend+1
  4132  0010A8  0E00               	movlw	0
  4133  0010AA  6E40               	movwf	___awmod@divisor+1,c
  4134  0010AC  0E0A               	movlw	10
  4135  0010AE  6E3F               	movwf	___awmod@divisor,c
  4136  0010B0  EC29  F021         	call	___awmod	;wreg free
  4137  0010B4  503D               	movf	?___awmod,w,c
  4138  0010B6  0F30               	addlw	48
  4139  0010B8  0100               	movlb	0	; () banked
  4140  0010BA  6FC2               	movwf	(_RPM_Txt+3)& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;Main_Screen.c: 165: drawtext(1, 23, tempC , 0x07FF , 0x0000 , 2);
  4144  0010BC  0E17               	movlw	23
  4145  0010BE  6E39               	movwf	drawtext@y,c
  4146  0010C0  0ED0               	movlw	low _tempC
  4147  0010C2  6E3A               	movwf	drawtext@_text,c
  4148  0010C4  0E00               	movlw	high _tempC
  4149  0010C6  6E3B               	movwf	drawtext@_text+1,c
  4150  0010C8  0E07               	movlw	7
  4151  0010CA  6E3D               	movwf	drawtext@color+1,c
  4152  0010CC  683C               	setf	drawtext@color,c
  4153  0010CE  0E00               	movlw	0
  4154  0010D0  6E3F               	movwf	drawtext@bg+1,c
  4155  0010D2  0E00               	movlw	0
  4156  0010D4  6E3E               	movwf	drawtext@bg,c
  4157  0010D6  0E02               	movlw	2
  4158  0010D8  6E40               	movwf	drawtext@size,c
  4159  0010DA  0E01               	movlw	1
  4160  0010DC  ECC7  F01A         	call	_drawtext
  4161                           
  4162                           ;Main_Screen.c: 166: drawtext(70, 23, tempF , 0x07FF , 0x0000 , 2);
  4163  0010E0  0E17               	movlw	23
  4164  0010E2  6E39               	movwf	drawtext@y,c
  4165  0010E4  0ED4               	movlw	low _tempF
  4166  0010E6  6E3A               	movwf	drawtext@_text,c
  4167  0010E8  0E00               	movlw	high _tempF
  4168  0010EA  6E3B               	movwf	drawtext@_text+1,c
  4169  0010EC  0E07               	movlw	7
  4170  0010EE  6E3D               	movwf	drawtext@color+1,c
  4171  0010F0  683C               	setf	drawtext@color,c
  4172  0010F2  0E00               	movlw	0
  4173  0010F4  6E3F               	movwf	drawtext@bg+1,c
  4174  0010F6  0E00               	movlw	0
  4175  0010F8  6E3E               	movwf	drawtext@bg,c
  4176  0010FA  0E02               	movlw	2
  4177  0010FC  6E40               	movwf	drawtext@size,c
  4178  0010FE  0E46               	movlw	70
  4179  001100  ECC7  F01A         	call	_drawtext
  4180                           
  4181                           ;Main_Screen.c: 167: drawtext(15 , 52 , time , 0xFFE0 , 0x0000 , 2);
  4182  001104  0E34               	movlw	52
  4183  001106  6E39               	movwf	drawtext@y,c
  4184  001108  0E68               	movlw	low _time
  4185  00110A  6E3A               	movwf	drawtext@_text,c
  4186  00110C  0E01               	movlw	high _time
  4187  00110E  6E3B               	movwf	drawtext@_text+1,c
  4188  001110  0EFF               	movlw	255
  4189  001112  6E3D               	movwf	drawtext@color+1,c
  4190  001114  0EE0               	movlw	224
  4191  001116  6E3C               	movwf	drawtext@color,c
  4192  001118  0E00               	movlw	0
  4193  00111A  6E3F               	movwf	drawtext@bg+1,c
  4194  00111C  0E00               	movlw	0
  4195  00111E  6E3E               	movwf	drawtext@bg,c
  4196  001120  0E02               	movlw	2
  4197  001122  6E40               	movwf	drawtext@size,c
  4198  001124  0E0F               	movlw	15
  4199  001126  ECC7  F01A         	call	_drawtext
  4200                           
  4201                           ;Main_Screen.c: 168: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4202  00112A  0E52               	movlw	82
  4203  00112C  6E39               	movwf	drawtext@y,c
  4204  00112E  0E44               	movlw	low _date
  4205  001130  6E3A               	movwf	drawtext@_text,c
  4206  001132  0E01               	movlw	high _date
  4207  001134  6E3B               	movwf	drawtext@_text+1,c
  4208  001136  0E07               	movlw	7
  4209  001138  6E3D               	movwf	drawtext@color+1,c
  4210  00113A  0EE0               	movlw	224
  4211  00113C  6E3C               	movwf	drawtext@color,c
  4212  00113E  0E00               	movlw	0
  4213  001140  6E3F               	movwf	drawtext@bg+1,c
  4214  001142  0E00               	movlw	0
  4215  001144  6E3E               	movwf	drawtext@bg,c
  4216  001146  0E02               	movlw	2
  4217  001148  6E40               	movwf	drawtext@size,c
  4218  00114A  0E0F               	movlw	15
  4219  00114C  ECC7  F01A         	call	_drawtext
  4220                           
  4221                           ;Main_Screen.c: 169: drawtext(10 , 110 , alarm_time , 0xFFE0 , 0x0000 , 1);
  4222  001150  0E6E               	movlw	110
  4223  001152  6E39               	movwf	drawtext@y,c
  4224  001154  0E3B               	movlw	low _alarm_time
  4225  001156  6E3A               	movwf	drawtext@_text,c
  4226  001158  0E01               	movlw	high _alarm_time
  4227  00115A  6E3B               	movwf	drawtext@_text+1,c
  4228  00115C  0EFF               	movlw	255
  4229  00115E  6E3D               	movwf	drawtext@color+1,c
  4230  001160  0EE0               	movlw	224
  4231  001162  6E3C               	movwf	drawtext@color,c
  4232  001164  0E00               	movlw	0
  4233  001166  6E3F               	movwf	drawtext@bg+1,c
  4234  001168  0E00               	movlw	0
  4235  00116A  6E3E               	movwf	drawtext@bg,c
  4236  00116C  0E01               	movlw	1
  4237  00116E  6E40               	movwf	drawtext@size,c
  4238  001170  0E0A               	movlw	10
  4239  001172  ECC7  F01A         	call	_drawtext
  4240                           
  4241                           ;Main_Screen.c: 170: drawtext(95 , 110 , Alarm_SW_Txt , 0xFFE0 , 0x0000 , 1);
  4242  001176  0E6E               	movlw	110
  4243  001178  6E39               	movwf	drawtext@y,c
  4244  00117A  0EC4               	movlw	low _Alarm_SW_Txt
  4245  00117C  6E3A               	movwf	drawtext@_text,c
  4246  00117E  0E00               	movlw	high _Alarm_SW_Txt
  4247  001180  6E3B               	movwf	drawtext@_text+1,c
  4248  001182  0EFF               	movlw	255
  4249  001184  6E3D               	movwf	drawtext@color+1,c
  4250  001186  0EE0               	movlw	224
  4251  001188  6E3C               	movwf	drawtext@color,c
  4252  00118A  0E00               	movlw	0
  4253  00118C  6E3F               	movwf	drawtext@bg+1,c
  4254  00118E  0E00               	movlw	0
  4255  001190  6E3E               	movwf	drawtext@bg,c
  4256  001192  0E01               	movlw	1
  4257  001194  6E40               	movwf	drawtext@size,c
  4258  001196  0E5F               	movlw	95
  4259  001198  ECC7  F01A         	call	_drawtext
  4260                           
  4261                           ;Main_Screen.c: 171: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0x001F, 0x0000, 1);
  4262  00119C  0E82               	movlw	130
  4263  00119E  6E39               	movwf	drawtext@y,c
  4264  0011A0  0EBA               	movlw	low _Heater_Set_Temp_Txt
  4265  0011A2  6E3A               	movwf	drawtext@_text,c
  4266  0011A4  0E00               	movlw	high _Heater_Set_Temp_Txt
  4267  0011A6  6E3B               	movwf	drawtext@_text+1,c
  4268  0011A8  0E00               	movlw	0
  4269  0011AA  6E3D               	movwf	drawtext@color+1,c
  4270  0011AC  0E1F               	movlw	31
  4271  0011AE  6E3C               	movwf	drawtext@color,c
  4272  0011B0  0E00               	movlw	0
  4273  0011B2  6E3F               	movwf	drawtext@bg+1,c
  4274  0011B4  0E00               	movlw	0
  4275  0011B6  6E3E               	movwf	drawtext@bg,c
  4276  0011B8  0E01               	movlw	1
  4277  0011BA  6E40               	movwf	drawtext@size,c
  4278  0011BC  0E23               	movlw	35
  4279  0011BE  ECC7  F01A         	call	_drawtext
  4280                           
  4281                           ;Main_Screen.c: 172: drawtext(95, 130, Heater_SW_Txt, 0x001F , 0x0000 , 1);
  4282  0011C2  0E82               	movlw	130
  4283  0011C4  6E39               	movwf	drawtext@y,c
  4284  0011C6  0ECC               	movlw	low _Heater_SW_Txt
  4285  0011C8  6E3A               	movwf	drawtext@_text,c
  4286  0011CA  0E00               	movlw	high _Heater_SW_Txt
  4287  0011CC  6E3B               	movwf	drawtext@_text+1,c
  4288  0011CE  0E00               	movlw	0
  4289  0011D0  6E3D               	movwf	drawtext@color+1,c
  4290  0011D2  0E1F               	movlw	31
  4291  0011D4  6E3C               	movwf	drawtext@color,c
  4292  0011D6  0E00               	movlw	0
  4293  0011D8  6E3F               	movwf	drawtext@bg+1,c
  4294  0011DA  0E00               	movlw	0
  4295  0011DC  6E3E               	movwf	drawtext@bg,c
  4296  0011DE  0E01               	movlw	1
  4297  0011E0  6E40               	movwf	drawtext@size,c
  4298  0011E2  0E5F               	movlw	95
  4299  0011E4  ECC7  F01A         	call	_drawtext
  4300                           
  4301                           ;Main_Screen.c: 173: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4302  0011E8  0E96               	movlw	150
  4303  0011EA  6E39               	movwf	drawtext@y,c
  4304  0011EC  0EC8               	movlw	low _DC_Txt
  4305  0011EE  6E3A               	movwf	drawtext@_text,c
  4306  0011F0  0E00               	movlw	high _DC_Txt
  4307  0011F2  6E3B               	movwf	drawtext@_text+1,c
  4308  0011F4  0E07               	movlw	7
  4309  0011F6  6E3D               	movwf	drawtext@color+1,c
  4310  0011F8  0EE0               	movlw	224
  4311  0011FA  6E3C               	movwf	drawtext@color,c
  4312  0011FC  0E00               	movlw	0
  4313  0011FE  6E3F               	movwf	drawtext@bg+1,c
  4314  001200  0E00               	movlw	0
  4315  001202  6E3E               	movwf	drawtext@bg,c
  4316  001204  0E01               	movlw	1
  4317  001206  6E40               	movwf	drawtext@size,c
  4318  001208  0E0A               	movlw	10
  4319  00120A  ECC7  F01A         	call	_drawtext
  4320                           
  4321                           ;Main_Screen.c: 174: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4322  00120E  0E96               	movlw	150
  4323  001210  6E39               	movwf	drawtext@y,c
  4324  001212  0ED8               	movlw	low _RTC_ALARM_Txt
  4325  001214  6E3A               	movwf	drawtext@_text,c
  4326  001216  0E00               	movlw	high _RTC_ALARM_Txt
  4327  001218  6E3B               	movwf	drawtext@_text+1,c
  4328  00121A  0E07               	movlw	7
  4329  00121C  6E3D               	movwf	drawtext@color+1,c
  4330  00121E  0EE0               	movlw	224
  4331  001220  6E3C               	movwf	drawtext@color,c
  4332  001222  0E00               	movlw	0
  4333  001224  6E3F               	movwf	drawtext@bg+1,c
  4334  001226  0E00               	movlw	0
  4335  001228  6E3E               	movwf	drawtext@bg,c
  4336  00122A  0E01               	movlw	1
  4337  00122C  6E40               	movwf	drawtext@size,c
  4338  00122E  0E23               	movlw	35
  4339  001230  ECC7  F01A         	call	_drawtext
  4340                           
  4341                           ;Main_Screen.c: 175: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4342  001234  0E96               	movlw	150
  4343  001236  6E39               	movwf	drawtext@y,c
  4344  001238  0E71               	movlw	low _Volt_Txt
  4345  00123A  6E3A               	movwf	drawtext@_text,c
  4346  00123C  0E01               	movlw	high _Volt_Txt
  4347  00123E  6E3B               	movwf	drawtext@_text+1,c
  4348  001240  0E07               	movlw	7
  4349  001242  6E3D               	movwf	drawtext@color+1,c
  4350  001244  0EE0               	movlw	224
  4351  001246  6E3C               	movwf	drawtext@color,c
  4352  001248  0E00               	movlw	0
  4353  00124A  6E3F               	movwf	drawtext@bg+1,c
  4354  00124C  0E00               	movlw	0
  4355  00124E  6E3E               	movwf	drawtext@bg,c
  4356  001250  0E01               	movlw	1
  4357  001252  6E40               	movwf	drawtext@size,c
  4358  001254  0E32               	movlw	50
  4359  001256  ECC7  F01A         	call	_drawtext
  4360                           
  4361                           ;Main_Screen.c: 176: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4362  00125A  0E96               	movlw	150
  4363  00125C  6E39               	movwf	drawtext@y,c
  4364  00125E  0EBF               	movlw	low _RPM_Txt
  4365  001260  6E3A               	movwf	drawtext@_text,c
  4366  001262  0E00               	movlw	high _RPM_Txt
  4367  001264  6E3B               	movwf	drawtext@_text+1,c
  4368  001266  0E07               	movlw	7
  4369  001268  6E3D               	movwf	drawtext@color+1,c
  4370  00126A  0EE0               	movlw	224
  4371  00126C  6E3C               	movwf	drawtext@color,c
  4372  00126E  0E00               	movlw	0
  4373  001270  6E3F               	movwf	drawtext@bg+1,c
  4374  001272  0E00               	movlw	0
  4375  001274  6E3E               	movwf	drawtext@bg,c
  4376  001276  0E01               	movlw	1
  4377  001278  6E40               	movwf	drawtext@size,c
  4378  00127A  0E5D               	movlw	93
  4379  00127C  ECC7  F01A         	call	_drawtext
  4380  001280  0012               	return		;funcret
  4381  001282                     __end_of_Update_Screen:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _Toggle_Heater *****************
  4394 ;; Defined at:
  4395 ;;		line 40 in file "Fan_Support.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, status,2, status,0, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;Total ram usage:        0 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    7
  4416 ;; This function calls:
  4417 ;;		_Turn_Off_Fan
  4418 ;;		_Turn_On_Fan
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text6
  4425  005006                     __ptext6:
  4426                           	opt stack 0
  4427  005006                     _Toggle_Heater:
  4428                           	opt stack 23
  4429                           
  4430                           ;Fan_Support.c: 42: if(HEATER==0) Turn_On_Fan();
  4431                           
  4432                           ;incstack = 0
  4433  005006  0100               	movlb	0	; () banked
  4434  005008  519D               	movf	_HEATER& (0+255),w,b
  4435  00500A  A4D8               	btfss	status,2,c
  4436  00500C  D003               	goto	l10414
  4437                           
  4438                           ; BSR set to: 0
  4439  00500E  EC55  F028         	call	_Turn_On_Fan	;wreg free
  4440  005012  D003               	goto	l41
  4441  005014                     l10414:
  4442                           
  4443                           ;Fan_Support.c: 43: else Turn_Off_Fan();
  4444  005014  ECDA  F028         	call	_Turn_Off_Fan	;wreg free
  4445  005018  D000               	goto	l41
  4446  00501A                     l41:
  4447  00501A  0012               	return		;funcret
  4448  00501C                     __end_of_Toggle_Heater:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           postinc0	equ	0xFEE
  4455                           wreg	equ	0xFE8
  4456                           postdec1	equ	0xFE5
  4457                           fsr1l	equ	0xFE1
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _Turn_On_Fan *****************
  4461 ;; Defined at:
  4462 ;;		line 61 in file "Fan_Support.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;		None               void
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;Total ram usage:        0 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    6
  4483 ;; This function calls:
  4484 ;;		_do_update_pwm
  4485 ;; This function is called by:
  4486 ;;		_Toggle_Heater
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           	psect	text7
  4491  0050AA                     __ptext7:
  4492                           	opt stack 0
  4493  0050AA                     _Turn_On_Fan:
  4494                           	opt stack 23
  4495                           
  4496                           ;Fan_Support.c: 63: HEATER = 1;
  4497                           
  4498                           ;incstack = 0
  4499  0050AA  0E01               	movlw	1
  4500  0050AC  0100               	movlb	0	; () banked
  4501  0050AE  6F9D               	movwf	_HEATER& (0+255),b
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;Fan_Support.c: 64: do_update_pwm(duty_cycle);
  4505  0050B0  5068               	movf	_duty_cycle,w,c
  4506  0050B2  ECEB  F01D         	call	_do_update_pwm
  4507                           
  4508                           ;Fan_Support.c: 65: PORTEbits.RE1 = 1;
  4509  0050B6  8284               	bsf	3972,1,c	;volatile
  4510                           
  4511                           ;Fan_Support.c: 66: PORTEbits.RE2 = 1;
  4512  0050B8  8484               	bsf	3972,2,c	;volatile
  4513  0050BA  0012               	return		;funcret
  4514  0050BC                     __end_of_Turn_On_Fan:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _Test_Alarm *****************
  4527 ;; Defined at:
  4528 ;;		line 208 in file "Main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    9
  4549 ;; This function calls:
  4550 ;;		_Activate_Buzzer_4KHz
  4551 ;;		_DS3231_Turn_Off_Alarm
  4552 ;;		_DS3231_Turn_On_Alarm
  4553 ;;		_Deactivate_Buzzer
  4554 ;;		_Set_Alarm_RGB
  4555 ;;		___ftge
  4556 ;; This function is called by:
  4557 ;;		_main
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text8
  4562  0032DC                     __ptext8:
  4563                           	opt stack 0
  4564  0032DC                     _Test_Alarm:
  4565                           	opt stack 21
  4566                           
  4567                           ;Main.c: 210: if (alarm_mode == 0)
  4568                           
  4569                           ;incstack = 0
  4570  0032DC  0100               	movlb	0	; () banked
  4571  0032DE  518F               	movf	_alarm_mode& (0+255),w,b
  4572  0032E0  0100               	movlb	0	; () banked
  4573  0032E2  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4574  0032E4  A4D8               	btfss	status,2,c
  4575  0032E6  D00E               	goto	l10458
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;Main.c: 211: {
  4579                           ;Main.c: 212: if (ALARMEN == 1)
  4580  0032E8  0100               	movlb	0	; () banked
  4581  0032EA  0587               	decf	_ALARMEN& (0+255),w,b
  4582  0032EC  0100               	movlb	0	; () banked
  4583  0032EE  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4584  0032F0  A4D8               	btfss	status,2,c
  4585  0032F2  D068               	goto	l557
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;Main.c: 213: {
  4589                           ;Main.c: 214: DS3231_Turn_On_Alarm();
  4590  0032F4  EC3C  F024         	call	_DS3231_Turn_On_Alarm	;wreg free
  4591                           
  4592                           ;Main.c: 215: alarm_mode = 1;
  4593  0032F8  0E00               	movlw	0
  4594  0032FA  0100               	movlb	0	; () banked
  4595  0032FC  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4596  0032FE  0E01               	movlw	1
  4597  003300  D05F               	goto	L5
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;Main.c: 216: }
  4601                           ;Main.c: 217: }
  4602  003302  D060               	goto	l557
  4603  003304                     l10458:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;Main.c: 218: else
  4607                           ;Main.c: 219: {
  4608                           ;Main.c: 220: if (ALARMEN == 0)
  4609  003304  0100               	movlb	0	; () banked
  4610  003306  5187               	movf	_ALARMEN& (0+255),w,b
  4611  003308  0100               	movlb	0	; () banked
  4612  00330A  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4613  00330C  A4D8               	btfss	status,2,c
  4614  00330E  D012               	goto	l550
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;Main.c: 221: {
  4618                           ;Main.c: 222: DS3231_Turn_Off_Alarm();
  4619  003310  EC65  F024         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4620                           
  4621                           ;Main.c: 223: MATCHED = 0;
  4622  003314  0E00               	movlw	0
  4623  003316  0100               	movlb	0	; () banked
  4624  003318  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  4625  00331A  0E00               	movlw	0
  4626  00331C  6F8D               	movwf	_MATCHED& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;Main.c: 224: alarm_mode = 0;
  4630  00331E  0E00               	movlw	0
  4631  003320  0100               	movlb	0	; () banked
  4632  003322  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4633  003324  0E00               	movlw	0
  4634  003326  6F8F               	movwf	_alarm_mode& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;Main.c: 225: Set_Alarm_RGB(7);
  4638  003328  0E07               	movlw	7
  4639  00332A  EC1E  F026         	call	_Set_Alarm_RGB
  4640                           
  4641                           ;Main.c: 226: Deactivate_Buzzer();
  4642  00332E  EC04  F029         	call	_Deactivate_Buzzer	;wreg free
  4643                           
  4644                           ;Main.c: 227: }
  4645  003332  D048               	goto	l557
  4646  003334                     l550:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;Main.c: 228: else
  4650                           ;Main.c: 229: {
  4651                           ;Main.c: 230: if(PORTBbits.RB2 == 0)
  4652  003334  B481               	btfsc	3969,2,c	;volatile
  4653  003336  D046               	goto	l557
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;Main.c: 231: {
  4657                           ;Main.c: 232: MATCHED = 1;
  4658  003338  0E00               	movlw	0
  4659  00333A  0100               	movlb	0	; () banked
  4660  00333C  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  4661  00333E  0E01               	movlw	1
  4662  003340  6F8D               	movwf	_MATCHED& (0+255),b
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;Main.c: 233: if(MATCHED == 1)
  4666  003342  0100               	movlb	0	; () banked
  4667  003344  058D               	decf	_MATCHED& (0+255),w,b
  4668  003346  0100               	movlb	0	; () banked
  4669  003348  118E               	iorwf	(_MATCHED+1)& (0+255),w,b
  4670  00334A  A4D8               	btfss	status,2,c
  4671  00334C  D03B               	goto	l557
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;Main.c: 234: {
  4675                           ;Main.c: 235: Set_Alarm_RGB(i);
  4676  00334E  0100               	movlb	0	; () banked
  4677  003350  5193               	movf	_i& (0+255),w,b
  4678  003352  EC1E  F026         	call	_Set_Alarm_RGB
  4679                           
  4680                           ;Main.c: 236: if (i < 7) i++;
  4681  003356  0100               	movlb	0	; () banked
  4682  003358  BF94               	btfsc	(_i+1)& (0+255),7,b
  4683  00335A  D008               	goto	l10478
  4684  00335C  0100               	movlb	0	; () banked
  4685  00335E  5194               	movf	(_i+1)& (0+255),w,b
  4686  003360  E109               	bnz	l10480
  4687  003362  0E07               	movlw	7
  4688  003364  0100               	movlb	0	; () banked
  4689  003366  5D93               	subwf	_i& (0+255),w,b
  4690  003368  B0D8               	btfsc	status,0,c
  4691  00336A  D004               	goto	l10480
  4692  00336C                     l10478:
  4693                           
  4694                           ; BSR set to: 0
  4695  00336C  0100               	movlb	0	; () banked
  4696  00336E  4B93               	infsnz	_i& (0+255),f,b
  4697  003370  2B94               	incf	(_i+1)& (0+255),f,b
  4698  003372  D006               	goto	l10482
  4699  003374                     l10480:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;Main.c: 237: else i= 0;
  4703  003374  0E00               	movlw	0
  4704  003376  0100               	movlb	0	; () banked
  4705  003378  6F94               	movwf	(_i+1)& (0+255),b
  4706  00337A  0E00               	movlw	0
  4707  00337C  6F93               	movwf	_i& (0+255),b
  4708  00337E  D000               	goto	l10482
  4709  003380                     l10482:
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;Main.c: 238: Activate_Buzzer_4KHz();
  4713  003380  EC5E  F028         	call	_Activate_Buzzer_4KHz	;wreg free
  4714                           
  4715                           ;Main.c: 239: if (volt > 1.0)
  4716  003384  0E00               	movlw	0
  4717  003386  6E11               	movwf	___ftge@ff1,c
  4718  003388  0E80               	movlw	128
  4719  00338A  6E12               	movwf	___ftge@ff1+1,c
  4720  00338C  0E3F               	movlw	63
  4721  00338E  6E13               	movwf	___ftge@ff1+2,c
  4722  003390  C084  F014         	movff	_volt,___ftge@ff2
  4723  003394  C085  F015         	movff	_volt+1,___ftge@ff2+1
  4724  003398  C086  F016         	movff	_volt+2,___ftge@ff2+2
  4725  00339C  EC78  F01F         	call	___ftge	;wreg free
  4726  0033A0  B0D8               	btfsc	status,0,c
  4727  0033A2  D010               	goto	l557
  4728                           
  4729                           ;Main.c: 240: {
  4730                           ;Main.c: 241: MATCHED = 0;
  4731  0033A4  0E00               	movlw	0
  4732  0033A6  0100               	movlb	0	; () banked
  4733  0033A8  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  4734  0033AA  0E00               	movlw	0
  4735  0033AC  6F8D               	movwf	_MATCHED& (0+255),b
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;Main.c: 242: Set_Alarm_RGB(7);
  4739  0033AE  0E07               	movlw	7
  4740  0033B0  EC1E  F026         	call	_Set_Alarm_RGB
  4741                           
  4742                           ;Main.c: 243: Deactivate_Buzzer();
  4743  0033B4  EC04  F029         	call	_Deactivate_Buzzer	;wreg free
  4744                           
  4745                           ;Main.c: 244: alarm_mode = 0;
  4746  0033B8  0E00               	movlw	0
  4747  0033BA  0100               	movlb	0	; () banked
  4748  0033BC  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4749  0033BE  0E00               	movlw	0
  4750  0033C0                     L5:
  4751  0033C0  6F8F               	movwf	_alarm_mode& (0+255),b
  4752                           
  4753                           ; BSR set to: 0
  4754                           
  4755                           ; BSR set to: 0
  4756                           
  4757                           ; BSR set to: 0
  4758                           
  4759                           ; BSR set to: 0
  4760  0033C2  D000               	goto	l557
  4761  0033C4                     l557:
  4762  0033C4  0012               	return		;funcret
  4763  0033C6                     __end_of_Test_Alarm:
  4764                           	opt stack 0
  4765                           tblptru	equ	0xFF8
  4766                           tblptrh	equ	0xFF7
  4767                           tblptrl	equ	0xFF6
  4768                           tablat	equ	0xFF5
  4769                           postinc0	equ	0xFEE
  4770                           wreg	equ	0xFE8
  4771                           postdec1	equ	0xFE5
  4772                           fsr1l	equ	0xFE1
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _Set_Alarm_RGB *****************
  4776 ;; Defined at:
  4777 ;;		line 162 in file "utils.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  color           1    wreg     unsigned char 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  color           1   17[COMRAM] unsigned char 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;		None               void
  4784 ;; Registers used:
  4785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;Total ram usage:        2 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    3
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_main
  4802 ;;		_Test_Alarm
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text9
  4807  004C3C                     __ptext9:
  4808                           	opt stack 0
  4809  004C3C                     _Set_Alarm_RGB:
  4810                           	opt stack 26
  4811                           
  4812                           ;incstack = 0
  4813                           ;Set_Alarm_RGB@color stored from wreg
  4814  004C3C  6E12               	movwf	Set_Alarm_RGB@color,c
  4815  004C3E  5012               	movf	Set_Alarm_RGB@color,w,c
  4816  004C40  0D01               	mullw	1
  4817  004C42  0E34               	movlw	low _RGB
  4818  004C44  24F3               	addwf	prodl,w,c
  4819  004C46  6ED9               	movwf	fsr2l,c
  4820  004C48  0E01               	movlw	high _RGB
  4821  004C4A  20F4               	addwfc	prodh,w,c
  4822  004C4C  6EDA               	movwf	fsr2h,c
  4823  004C4E  50DF               	movf	indf2,w,c
  4824  004C50  6E11               	movwf	??_Set_Alarm_RGB& (0+255),c
  4825  004C52  90D8               	bcf	status,0,c
  4826  004C54  3611               	rlcf	??_Set_Alarm_RGB,f,c
  4827  004C56  90D8               	bcf	status,0,c
  4828  004C58  3611               	rlcf	??_Set_Alarm_RGB,f,c
  4829  004C5A  90D8               	bcf	status,0,c
  4830  004C5C  3411               	rlcf	??_Set_Alarm_RGB,w,c
  4831  004C5E  D005               	goto	L6
  4832                           
  4833                           ;utils.c: 165: else if (color == 7) PORTA = (0x00<<3);
  4834  004C60  0E07               	movlw	7
  4835  004C62  1812               	xorwf	Set_Alarm_RGB@color,w,c
  4836  004C64  A4D8               	btfss	status,2,c
  4837  004C66  D003               	goto	l1163
  4838  004C68  0E00               	movlw	0
  4839  004C6A                     L6:
  4840  004C6A  6E80               	movwf	3968,c	;volatile
  4841  004C6C  D000               	goto	l1163
  4842  004C6E                     l1163:
  4843  004C6E  0012               	return		;funcret
  4844  004C70                     __end_of_Set_Alarm_RGB:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           postinc0	equ	0xFEE
  4853                           wreg	equ	0xFE8
  4854                           postdec1	equ	0xFE5
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4862 ;; Defined at:
  4863 ;;		line 210 in file "I2C_Support.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  Device          1   30[COMRAM] unsigned char 
  4868 ;;  control_F       1   29[COMRAM] unsigned char 
  4869 ;;  control_E       1   28[COMRAM] unsigned char 
  4870 ;;  Address_F       1   27[COMRAM] unsigned char 
  4871 ;;  Address_E       1   26[COMRAM] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;Total ram usage:        5 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    8
  4888 ;; This function calls:
  4889 ;;		_DS3231_Init
  4890 ;;		_I2C_Write_Address_Read_One_Byte
  4891 ;;		_I2C_Write_Address_Write_One_Byte
  4892 ;; This function is called by:
  4893 ;;		_Test_Alarm
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text10
  4898  004878                     __ptext10:
  4899                           	opt stack 0
  4900  004878                     _DS3231_Turn_On_Alarm:
  4901                           	opt stack 21
  4902                           
  4903                           ;I2C_Support.c: 212: char Device = 0x68;
  4904                           
  4905                           ;incstack = 0
  4906  004878  0E68               	movlw	104
  4907  00487A  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4908                           
  4909                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  4910  00487C  0E0E               	movlw	14
  4911  00487E  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4912                           
  4913                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  4914  004880  0E0F               	movlw	15
  4915  004882  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4916                           
  4917                           ;I2C_Support.c: 215: char control_E;
  4918                           ;I2C_Support.c: 216: char control_F;
  4919                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4920  004884  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4921  004888  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4922  00488A  EC38  F026         	call	_I2C_Write_Address_Read_One_Byte
  4923  00488E  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4924                           
  4925                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  4926  004890  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4927  004892  0901               	iorlw	1
  4928  004894  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4929                           
  4930                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4931  004896  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4932  00489A  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4933  00489E  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4934  0048A0  EC45  F027         	call	_I2C_Write_Address_Write_One_Byte
  4935                           
  4936                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4937  0048A4  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4938  0048A8  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4939  0048AA  EC38  F026         	call	_I2C_Write_Address_Read_One_Byte
  4940  0048AE  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4941                           
  4942                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  4943  0048B0  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4944  0048B2  0BFE               	andlw	254
  4945  0048B4  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4946                           
  4947                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4948  0048B6  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4949  0048BA  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4950  0048BE  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4951  0048C0  EC45  F027         	call	_I2C_Write_Address_Write_One_Byte
  4952                           
  4953                           ;I2C_Support.c: 225: DS3231_Init();
  4954  0048C4  EC75  F01C         	call	_DS3231_Init	;wreg free
  4955  0048C8  0012               	return		;funcret
  4956  0048CA                     __end_of_DS3231_Turn_On_Alarm:
  4957                           	opt stack 0
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4974 ;; Defined at:
  4975 ;;		line 193 in file "I2C_Support.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  Device          1   30[COMRAM] unsigned char 
  4980 ;;  control_F       1   29[COMRAM] unsigned char 
  4981 ;;  control_E       1   28[COMRAM] unsigned char 
  4982 ;;  Address_F       1   27[COMRAM] unsigned char 
  4983 ;;  Address_E       1   26[COMRAM] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;Total ram usage:        5 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    8
  5000 ;; This function calls:
  5001 ;;		_DS3231_Init
  5002 ;;		_I2C_Write_Address_Read_One_Byte
  5003 ;;		_I2C_Write_Address_Write_One_Byte
  5004 ;; This function is called by:
  5005 ;;		_main
  5006 ;;		_Test_Alarm
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text11
  5011  0048CA                     __ptext11:
  5012                           	opt stack 0
  5013  0048CA                     _DS3231_Turn_Off_Alarm:
  5014                           	opt stack 21
  5015                           
  5016                           ;I2C_Support.c: 195: char Device = 0x68;
  5017                           
  5018                           ;incstack = 0
  5019  0048CA  0E68               	movlw	104
  5020  0048CC  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  5021                           
  5022                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  5023  0048CE  0E0E               	movlw	14
  5024  0048D0  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  5025                           
  5026                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  5027  0048D2  0E0F               	movlw	15
  5028  0048D4  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  5029                           
  5030                           ;I2C_Support.c: 198: char control_E;
  5031                           ;I2C_Support.c: 199: char control_F;
  5032                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5033  0048D6  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5034  0048DA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5035  0048DC  EC38  F026         	call	_I2C_Write_Address_Read_One_Byte
  5036  0048E0  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5037                           
  5038                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  5039  0048E2  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  5040  0048E4  0BFE               	andlw	254
  5041  0048E6  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5042                           
  5043                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5044  0048E8  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5045  0048EC  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5046  0048F0  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5047  0048F2  EC45  F027         	call	_I2C_Write_Address_Write_One_Byte
  5048                           
  5049                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5050  0048F6  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5051  0048FA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5052  0048FC  EC38  F026         	call	_I2C_Write_Address_Read_One_Byte
  5053  004900  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5054                           
  5055                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  5056  004902  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  5057  004904  0BFE               	andlw	254
  5058  004906  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5059                           
  5060                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5061  004908  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5062  00490C  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5063  004910  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5064  004912  EC45  F027         	call	_I2C_Write_Address_Write_One_Byte
  5065                           
  5066                           ;I2C_Support.c: 207: DS3231_Init();
  5067  004916  EC75  F01C         	call	_DS3231_Init	;wreg free
  5068  00491A  0012               	return		;funcret
  5069  00491C                     __end_of_DS3231_Turn_Off_Alarm:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           postdec1	equ	0xFE5
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _DS3231_Init *****************
  5087 ;; Defined at:
  5088 ;;		line 132 in file "I2C_Support.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;		None
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  Device          1   25[COMRAM] unsigned char 
  5093 ;;  control_E       1   24[COMRAM] unsigned char 
  5094 ;;  Address_E       1   23[COMRAM] unsigned char 
  5095 ;;  Address_7       1   22[COMRAM] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;		None               void
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;Total ram usage:        4 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    7
  5112 ;; This function calls:
  5113 ;;		_I2C_ReStart
  5114 ;;		_I2C_Read
  5115 ;;		_I2C_Start
  5116 ;;		_I2C_Stop
  5117 ;;		_I2C_Write
  5118 ;;		_I2C_Write_Address_Read_One_Byte
  5119 ;;		_I2C_Write_Address_Write_One_Byte
  5120 ;; This function is called by:
  5121 ;;		_DS3231_Turn_Off_Alarm
  5122 ;;		_DS3231_Turn_On_Alarm
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text12
  5127  0038EA                     __ptext12:
  5128                           	opt stack 0
  5129  0038EA                     _DS3231_Init:
  5130                           	opt stack 21
  5131                           
  5132                           ;I2C_Support.c: 134: char Device = 0x68;
  5133                           
  5134                           ;incstack = 0
  5135  0038EA  0E68               	movlw	104
  5136  0038EC  6E1A               	movwf	DS3231_Init@Device,c
  5137                           
  5138                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  5139  0038EE  0E07               	movlw	7
  5140  0038F0  6E17               	movwf	DS3231_Init@Address_7,c
  5141                           
  5142                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  5143  0038F2  0E0E               	movlw	14
  5144  0038F4  6E18               	movwf	DS3231_Init@Address_E,c
  5145                           
  5146                           ;I2C_Support.c: 137: char control_E;
  5147                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5148  0038F6  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5149  0038FA  501A               	movf	DS3231_Init@Device,w,c
  5150  0038FC  EC38  F026         	call	_I2C_Write_Address_Read_One_Byte
  5151  003900  6E19               	movwf	DS3231_Init@control_E,c
  5152                           
  5153                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  5154  003902  5019               	movf	DS3231_Init@control_E,w,c
  5155  003904  0B01               	andlw	1
  5156  003906  6E19               	movwf	DS3231_Init@control_E,c
  5157                           
  5158                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  5159  003908  5019               	movf	DS3231_Init@control_E,w,c
  5160  00390A  0925               	iorlw	37
  5161  00390C  6E19               	movwf	DS3231_Init@control_E,c
  5162                           
  5163                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5164  00390E  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5165  003912  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5166  003916  501A               	movf	DS3231_Init@Device,w,c
  5167  003918  EC45  F027         	call	_I2C_Write_Address_Write_One_Byte
  5168                           
  5169                           ;I2C_Support.c: 143: I2C_Start();
  5170  00391C  EC8B  F028         	call	_I2C_Start	;wreg free
  5171                           
  5172                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  5173  003920  501A               	movf	DS3231_Init@Device,w,c
  5174  003922  241A               	addwf	DS3231_Init@Device,w,c
  5175  003924  ECA6  F025         	call	_I2C_Write
  5176                           
  5177                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  5178  003928  5017               	movf	DS3231_Init@Address_7,w,c
  5179  00392A  ECA6  F025         	call	_I2C_Write
  5180                           
  5181                           ;I2C_Support.c: 146: I2C_ReStart();
  5182  00392E  EC0E  F028         	call	_I2C_ReStart	;wreg free
  5183                           
  5184                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  5185  003932  80D8               	bsf	status,0,c
  5186  003934  341A               	rlcf	DS3231_Init@Device,w,c
  5187  003936  ECA6  F025         	call	_I2C_Write
  5188                           
  5189                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  5190  00393A  0E01               	movlw	1
  5191  00393C  EC03  F025         	call	_I2C_Read
  5192  003940  6E66               	movwf	_alarm_second,c
  5193                           
  5194                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  5195  003942  0E01               	movlw	1
  5196  003944  EC03  F025         	call	_I2C_Read
  5197  003948  6E65               	movwf	_alarm_minute,c
  5198                           
  5199                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  5200  00394A  0E01               	movlw	1
  5201  00394C  EC03  F025         	call	_I2C_Read
  5202  003950  6E64               	movwf	_alarm_hour,c
  5203                           
  5204                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  5205  003952  0E00               	movlw	0
  5206  003954  EC03  F025         	call	_I2C_Read
  5207  003958  0100               	movlb	0	; () banked
  5208  00395A  6FA9               	movwf	_alarm_date& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  5212  00395C  5066               	movf	_alarm_second,w,c
  5213  00395E  0B7F               	andlw	127
  5214  003960  6E66               	movwf	_alarm_second,c
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  5218  003962  5065               	movf	_alarm_minute,w,c
  5219  003964  0B7F               	andlw	127
  5220  003966  6E65               	movwf	_alarm_minute,c
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  5224  003968  5064               	movf	_alarm_hour,w,c
  5225  00396A  0B7F               	andlw	127
  5226  00396C  6E64               	movwf	_alarm_hour,c
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  5230  00396E  0100               	movlb	0	; () banked
  5231  003970  51A9               	movf	_alarm_date& (0+255),w,b
  5232  003972  0980               	iorlw	128
  5233  003974  0100               	movlb	0	; () banked
  5234  003976  6FA9               	movwf	_alarm_date& (0+255),b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;I2C_Support.c: 158: I2C_Start();
  5238  003978  EC8B  F028         	call	_I2C_Start	;wreg free
  5239                           
  5240                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  5241  00397C  501A               	movf	DS3231_Init@Device,w,c
  5242  00397E  241A               	addwf	DS3231_Init@Device,w,c
  5243  003980  ECA6  F025         	call	_I2C_Write
  5244                           
  5245                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  5246  003984  5017               	movf	DS3231_Init@Address_7,w,c
  5247  003986  ECA6  F025         	call	_I2C_Write
  5248                           
  5249                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  5250  00398A  5066               	movf	_alarm_second,w,c
  5251  00398C  ECA6  F025         	call	_I2C_Write
  5252                           
  5253                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  5254  003990  5065               	movf	_alarm_minute,w,c
  5255  003992  ECA6  F025         	call	_I2C_Write
  5256                           
  5257                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  5258  003996  5064               	movf	_alarm_hour,w,c
  5259  003998  ECA6  F025         	call	_I2C_Write
  5260                           
  5261                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  5262  00399C  0100               	movlb	0	; () banked
  5263  00399E  51A9               	movf	_alarm_date& (0+255),w,b
  5264  0039A0  ECA6  F025         	call	_I2C_Write
  5265                           
  5266                           ;I2C_Support.c: 166: I2C_Stop();
  5267  0039A4  EC82  F028         	call	_I2C_Stop	;wreg free
  5268  0039A8  0012               	return		;funcret
  5269  0039AA                     __end_of_DS3231_Init:
  5270                           	opt stack 0
  5271                           tblptru	equ	0xFF8
  5272                           tblptrh	equ	0xFF7
  5273                           tblptrl	equ	0xFF6
  5274                           tablat	equ	0xFF5
  5275                           prodh	equ	0xFF4
  5276                           prodl	equ	0xFF3
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5287 ;; Defined at:
  5288 ;;		line 131 in file "I2C_Soft.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  Device          1    wreg     unsigned char 
  5291 ;;  Address         1   18[COMRAM] unsigned char 
  5292 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  Device          1   20[COMRAM] unsigned char 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;		None               void
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;Total ram usage:        3 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    5
  5311 ;; This function calls:
  5312 ;;		_I2C_Start
  5313 ;;		_I2C_Stop
  5314 ;;		_I2C_Write
  5315 ;; This function is called by:
  5316 ;;		_DS3231_Init
  5317 ;;		_DS3231_Turn_Off_Alarm
  5318 ;;		_DS3231_Turn_On_Alarm
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text13
  5323  004E8A                     __ptext13:
  5324                           	opt stack 0
  5325  004E8A                     _I2C_Write_Address_Write_One_Byte:
  5326                           	opt stack 23
  5327                           
  5328                           ;incstack = 0
  5329                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5330  004E8A  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5331                           
  5332                           ;I2C_Soft.c: 133: I2C_Start();
  5333  004E8C  EC8B  F028         	call	_I2C_Start	;wreg free
  5334                           
  5335                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  5336  004E90  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5337  004E92  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5338  004E94  ECA6  F025         	call	_I2C_Write
  5339                           
  5340                           ;I2C_Soft.c: 135: I2C_Write(Address);
  5341  004E98  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5342  004E9A  ECA6  F025         	call	_I2C_Write
  5343                           
  5344                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  5345  004E9E  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5346  004EA0  ECA6  F025         	call	_I2C_Write
  5347                           
  5348                           ;I2C_Soft.c: 137: I2C_Stop();
  5349  004EA4  EC82  F028         	call	_I2C_Stop	;wreg free
  5350  004EA8  0012               	return		;funcret
  5351  004EAA                     __end_of_I2C_Write_Address_Write_One_Byte:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           postinc0	equ	0xFEE
  5360                           wreg	equ	0xFE8
  5361                           postdec1	equ	0xFE5
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           fsr2h	equ	0xFDA
  5365                           fsr2l	equ	0xFD9
  5366                           status	equ	0xFD8
  5367                           
  5368 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5369 ;; Defined at:
  5370 ;;		line 118 in file "I2C_Soft.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  Device          1    wreg     unsigned char 
  5373 ;;  Address         1   19[COMRAM] unsigned char 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;  Device          1   21[COMRAM] unsigned char 
  5376 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1    wreg      unsigned char 
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        3 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    6
  5393 ;; This function calls:
  5394 ;;		_I2C_ReStart
  5395 ;;		_I2C_Read
  5396 ;;		_I2C_Start
  5397 ;;		_I2C_Stop
  5398 ;;		_I2C_Write
  5399 ;; This function is called by:
  5400 ;;		_DS3231_Init
  5401 ;;		_DS3231_Turn_Off_Alarm
  5402 ;;		_DS3231_Turn_On_Alarm
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           	psect	text14
  5407  004C70                     __ptext14:
  5408                           	opt stack 0
  5409  004C70                     _I2C_Write_Address_Read_One_Byte:
  5410                           	opt stack 22
  5411                           
  5412                           ;incstack = 0
  5413                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5414  004C70  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5415                           
  5416                           ;I2C_Soft.c: 120: char Data_Ret;
  5417                           ;I2C_Soft.c: 121: I2C_Start();
  5418  004C72  EC8B  F028         	call	_I2C_Start	;wreg free
  5419                           
  5420                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5421  004C76  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5422  004C78  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5423  004C7A  ECA6  F025         	call	_I2C_Write
  5424                           
  5425                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5426  004C7E  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5427  004C80  ECA6  F025         	call	_I2C_Write
  5428                           
  5429                           ;I2C_Soft.c: 124: I2C_ReStart();
  5430  004C84  EC0E  F028         	call	_I2C_ReStart	;wreg free
  5431                           
  5432                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5433  004C88  80D8               	bsf	status,0,c
  5434  004C8A  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5435  004C8C  ECA6  F025         	call	_I2C_Write
  5436                           
  5437                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5438  004C90  0E00               	movlw	0
  5439  004C92  EC03  F025         	call	_I2C_Read
  5440  004C96  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5441                           
  5442                           ;I2C_Soft.c: 127: I2C_Stop();
  5443  004C98  EC82  F028         	call	_I2C_Stop	;wreg free
  5444                           
  5445                           ;I2C_Soft.c: 128: return Data_Ret;
  5446  004C9C  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5447  004C9E  D000               	goto	l117
  5448  004CA0                     l117:
  5449  004CA0  0012               	return		;funcret
  5450  004CA2                     __end_of_I2C_Write_Address_Read_One_Byte:
  5451                           	opt stack 0
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _Activate_Buzzer_4KHz *****************
  5468 ;; Defined at:
  5469 ;;		line 121 in file "utils.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;		None
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;		None
  5474 ;; Return value:  Size  Location     Type
  5475 ;;		None               void
  5476 ;; Registers used:
  5477 ;;		wreg, status,2
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;Total ram usage:        0 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    3
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_Test_Alarm
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text15
  5498  0050BC                     __ptext15:
  5499                           	opt stack 0
  5500  0050BC                     _Activate_Buzzer_4KHz:
  5501                           	opt stack 26
  5502                           
  5503                           ;utils.c: 123: PR2 = 0b01111100 ;
  5504                           
  5505                           ;incstack = 0
  5506  0050BC  0E7C               	movlw	124
  5507  0050BE  6ECB               	movwf	4043,c	;volatile
  5508                           
  5509                           ;utils.c: 124: T2CON = 0b00000101 ;
  5510  0050C0  0E05               	movlw	5
  5511  0050C2  6ECA               	movwf	4042,c	;volatile
  5512                           
  5513                           ;utils.c: 125: CCPR2L = 0b00111110 ;
  5514  0050C4  0E3E               	movlw	62
  5515  0050C6  6EBB               	movwf	4027,c	;volatile
  5516                           
  5517                           ;utils.c: 126: CCP2CON = 0b00011100 ;
  5518  0050C8  0E1C               	movlw	28
  5519  0050CA  6EBA               	movwf	4026,c	;volatile
  5520  0050CC  0012               	return		;funcret
  5521  0050CE                     __end_of_Activate_Buzzer_4KHz:
  5522                           	opt stack 0
  5523                           tblptru	equ	0xFF8
  5524                           tblptrh	equ	0xFF7
  5525                           tblptrl	equ	0xFF6
  5526                           tablat	equ	0xFF5
  5527                           prodh	equ	0xFF4
  5528                           prodl	equ	0xFF3
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           fsr2h	equ	0xFDA
  5535                           fsr2l	equ	0xFD9
  5536                           status	equ	0xFD8
  5537                           
  5538 ;; *************** function _Set_RPM_RGB *****************
  5539 ;; Defined at:
  5540 ;;		line 155 in file "utils.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  rpm             2   30[COMRAM] int 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5554 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;Total ram usage:        4 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    4
  5561 ;; This function calls:
  5562 ;;		___awdiv
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text16
  5569  0045F0                     __ptext16:
  5570                           	opt stack 0
  5571  0045F0                     _Set_RPM_RGB:
  5572                           	opt stack 26
  5573                           
  5574                           ;utils.c: 157: if(rpm >= 3000) PORTD = ((PORTD & 0x1F) | 0xE0) & 0xFF;
  5575                           
  5576                           ;incstack = 0
  5577  0045F0  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  5578  0045F2  D00A               	goto	l10434
  5579  0045F4  0EB8               	movlw	184
  5580  0045F6  5C1F               	subwf	Set_RPM_RGB@rpm,w,c
  5581  0045F8  0E0B               	movlw	11
  5582  0045FA  5820               	subwfb	Set_RPM_RGB@rpm+1,w,c
  5583  0045FC  A0D8               	btfss	status,0,c
  5584  0045FE  D004               	goto	l10434
  5585  004600  5083               	movf	3971,w,c	;volatile
  5586  004602  0B1F               	andlw	31
  5587  004604  09E0               	iorlw	224
  5588  004606  D022               	goto	L8
  5589  004608                     l10434:
  5590                           
  5591                           ;utils.c: 158: else if(rpm == 0) PORTD = (PORTD & 0x1F) & 0xFF;
  5592  004608  501F               	movf	Set_RPM_RGB@rpm,w,c
  5593  00460A  1020               	iorwf	Set_RPM_RGB@rpm+1,w,c
  5594  00460C  A4D8               	btfss	status,2,c
  5595  00460E  D003               	goto	l10438
  5596  004610  5083               	movf	3971,w,c	;volatile
  5597  004612  0B1F               	andlw	31
  5598  004614  D01B               	goto	L8
  5599  004616                     l10438:
  5600                           
  5601                           ;utils.c: 159: else PORTD = ((PORTD & 0x1F) | RGB[rpm/500]<<5) & 0xFF;
  5602  004616  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  5603  00461A  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  5604  00461E  0E01               	movlw	1
  5605  004620  6E1A               	movwf	___awdiv@divisor+1,c
  5606  004622  0EF4               	movlw	244
  5607  004624  6E19               	movwf	___awdiv@divisor,c
  5608  004626  EC2D  F01F         	call	___awdiv	;wreg free
  5609  00462A  0E34               	movlw	low _RGB
  5610  00462C  2417               	addwf	?___awdiv,w,c
  5611  00462E  6ED9               	movwf	fsr2l,c
  5612  004630  0E01               	movlw	high _RGB
  5613  004632  2018               	addwfc	?___awdiv+1,w,c
  5614  004634  6EDA               	movwf	fsr2h,c
  5615  004636  50DF               	movf	indf2,w,c
  5616  004638  6E21               	movwf	??_Set_RPM_RGB& (0+255),c
  5617  00463A  0E05               	movlw	5
  5618  00463C  6E22               	movwf	(??_Set_RPM_RGB+1)& (0+255),c
  5619  00463E                     u8935:
  5620  00463E  90D8               	bcf	status,0,c
  5621  004640  3621               	rlcf	??_Set_RPM_RGB,f,c
  5622  004642  2E22               	decfsz	(??_Set_RPM_RGB+1)& (0+255),f,c
  5623  004644  D7FC               	goto	u8935
  5624  004646  5083               	movf	3971,w,c	;volatile
  5625  004648  0B1F               	andlw	31
  5626  00464A  1021               	iorwf	??_Set_RPM_RGB,w,c
  5627  00464C                     L8:
  5628  00464C  6E83               	movwf	3971,c	;volatile
  5629  00464E  D000               	goto	l1157
  5630  004650                     l1157:
  5631  004650  0012               	return		;funcret
  5632  004652                     __end_of_Set_RPM_RGB:
  5633                           	opt stack 0
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postdec1	equ	0xFE5
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _Set_DC_RGB *****************
  5650 ;; Defined at:
  5651 ;;		line 148 in file "utils.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  duty_cycle      1    wreg     unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  duty_cycle      1   30[COMRAM] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;		None               void
  5658 ;; Registers used:
  5659 ;;		wreg, status,2, status,0, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;Total ram usage:        1 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    4
  5672 ;; This function calls:
  5673 ;;		___awdiv
  5674 ;; This function is called by:
  5675 ;;		_main
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text17
  5680  004C02                     __ptext17:
  5681                           	opt stack 0
  5682  004C02                     _Set_DC_RGB:
  5683                           	opt stack 26
  5684                           
  5685                           ;incstack = 0
  5686                           ;Set_DC_RGB@duty_cycle stored from wreg
  5687  004C02  6E1F               	movwf	Set_DC_RGB@duty_cycle,c
  5688                           
  5689                           ;utils.c: 150: if(duty_cycle >= 70) PORTD = ((PORTD & 0xF0) | 0x07) & 0xFF;
  5690  004C04  0E45               	movlw	69
  5691  004C06  641F               	cpfsgt	Set_DC_RGB@duty_cycle,c
  5692  004C08  D004               	goto	l10444
  5693  004C0A  5083               	movf	3971,w,c	;volatile
  5694  004C0C  0BF0               	andlw	240
  5695  004C0E  0907               	iorlw	7
  5696  004C10  D012               	goto	L10
  5697  004C12                     l10444:
  5698                           
  5699                           ;utils.c: 151: else if(duty_cycle < 9) PORTD = (PORTD & 0xF0) & 0xFF;
  5700  004C12  0E09               	movlw	9
  5701  004C14  601F               	cpfslt	Set_DC_RGB@duty_cycle,c
  5702  004C16  D003               	goto	l10448
  5703  004C18  5083               	movf	3971,w,c	;volatile
  5704  004C1A  0BF0               	andlw	240
  5705  004C1C  D00C               	goto	L10
  5706  004C1E                     l10448:
  5707                           
  5708                           ;utils.c: 152: else PORTD = ((PORTD & 0xF8) | duty_cycle/10) & 0xFF;
  5709  004C1E  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  5710  004C22  6A18               	clrf	___awdiv@dividend+1,c
  5711  004C24  0E00               	movlw	0
  5712  004C26  6E1A               	movwf	___awdiv@divisor+1,c
  5713  004C28  0E0A               	movlw	10
  5714  004C2A  6E19               	movwf	___awdiv@divisor,c
  5715  004C2C  EC2D  F01F         	call	___awdiv	;wreg free
  5716  004C30  5083               	movf	3971,w,c	;volatile
  5717  004C32  0BF8               	andlw	248
  5718  004C34  1017               	iorwf	?___awdiv,w,c
  5719  004C36                     L10:
  5720  004C36  6E83               	movwf	3971,c	;volatile
  5721  004C38  D000               	goto	l1150
  5722  004C3A                     l1150:
  5723  004C3A  0012               	return		;funcret
  5724  004C3C                     __end_of_Set_DC_RGB:
  5725                           	opt stack 0
  5726                           tblptru	equ	0xFF8
  5727                           tblptrh	equ	0xFF7
  5728                           tblptrl	equ	0xFF6
  5729                           tablat	equ	0xFF5
  5730                           prodh	equ	0xFF4
  5731                           prodl	equ	0xFF3
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           postdec1	equ	0xFE5
  5735                           fsr1l	equ	0xFE1
  5736                           indf2	equ	0xFDF
  5737                           fsr2h	equ	0xFDA
  5738                           fsr2l	equ	0xFD9
  5739                           status	equ	0xFD8
  5740                           
  5741 ;; *************** function _Monitor_Heater *****************
  5742 ;; Defined at:
  5743 ;;		line 28 in file "Fan_Support.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;		None               void
  5750 ;; Registers used:
  5751 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;Total ram usage:        0 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    7
  5764 ;; This function calls:
  5765 ;;		_do_update_pwm
  5766 ;;		_get_duty_cycle
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text18
  5773  004D04                     __ptext18:
  5774                           	opt stack 0
  5775  004D04                     _Monitor_Heater:
  5776                           	opt stack 23
  5777                           
  5778                           ;Fan_Support.c: 30: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5779                           
  5780                           ;incstack = 0
  5781  004D04  C08B  F046         	movff	_DS1621_tempF,get_duty_cycle@temp
  5782  004D08  C08C  F047         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5783  004D0C  C0B7  F048         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5784  004D10  6A49               	clrf	get_duty_cycle@set_temp+1,c
  5785  004D12  EC46  F01E         	call	_get_duty_cycle	;wreg free
  5786  004D16  5046               	movf	?_get_duty_cycle,w,c
  5787  004D18  6E68               	movwf	_duty_cycle,c
  5788                           
  5789                           ;Fan_Support.c: 31: do_update_pwm(duty_cycle);
  5790  004D1A  5068               	movf	_duty_cycle,w,c
  5791  004D1C  ECEB  F01D         	call	_do_update_pwm
  5792                           
  5793                           ;Fan_Support.c: 33: if (HEATER == 1)
  5794  004D20  0100               	movlb	0	; () banked
  5795  004D22  059D               	decf	_HEATER& (0+255),w,b
  5796  004D24  A4D8               	btfss	status,2,c
  5797  004D26  D002               	goto	l34
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;Fan_Support.c: 34: {
  5801                           ;Fan_Support.c: 35: PORTEbits.RE1 = 1;
  5802  004D28  8284               	bsf	3972,1,c	;volatile
  5803                           
  5804                           ;Fan_Support.c: 36: }
  5805  004D2A  D002               	goto	l36
  5806  004D2C                     l34:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;Fan_Support.c: 37: else PORTEbits.RE1 = 0;
  5810  004D2C  9284               	bcf	3972,1,c	;volatile
  5811  004D2E  D000               	goto	l36
  5812  004D30                     l36:
  5813                           
  5814                           ; BSR set to: 0
  5815  004D30  0012               	return		;funcret
  5816  004D32                     __end_of_Monitor_Heater:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1l	equ	0xFE1
  5828                           indf2	equ	0xFDF
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function _get_duty_cycle *****************
  5834 ;; Defined at:
  5835 ;;		line 12 in file "Fan_Support.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  temp            2   69[COMRAM] int 
  5838 ;;  set_temp        2   71[COMRAM] int 
  5839 ;; Auto vars:     Size  Location     Type
  5840 ;;  diff            1   74[COMRAM] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;                  2   69[COMRAM] int 
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5850 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;Total ram usage:        6 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    6
  5857 ;; This function calls:
  5858 ;;		___awdiv
  5859 ;;		_do_update_pwm
  5860 ;; This function is called by:
  5861 ;;		_Monitor_Heater
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text19
  5866  003C8C                     __ptext19:
  5867                           	opt stack 0
  5868  003C8C                     _get_duty_cycle:
  5869                           	opt stack 23
  5870                           
  5871                           ;Fan_Support.c: 14: char diff = 0;
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;incstack = 0
  5875  003C8C  0E00               	movlw	0
  5876  003C8E  6E4B               	movwf	get_duty_cycle@diff,c
  5877                           
  5878                           ;Fan_Support.c: 15: if (temp >= set_temp) duty_cycle = 0;
  5879  003C90  5048               	movf	get_duty_cycle@set_temp,w,c
  5880  003C92  5C46               	subwf	get_duty_cycle@temp,w,c
  5881  003C94  5047               	movf	get_duty_cycle@temp+1,w,c
  5882  003C96  0A80               	xorlw	128
  5883  003C98  6E4A               	movwf	??_get_duty_cycle& (0+255),c
  5884  003C9A  5049               	movf	get_duty_cycle@set_temp+1,w,c
  5885  003C9C  0A80               	xorlw	128
  5886  003C9E  584A               	subwfb	??_get_duty_cycle& (0+255),w,c
  5887  003CA0  A0D8               	btfss	status,0,c
  5888  003CA2  D002               	goto	l10056
  5889  003CA4  0E00               	movlw	0
  5890  003CA6  D031               	goto	L12
  5891  003CA8                     l10056:
  5892                           
  5893                           ;Fan_Support.c: 16: else if (temp < set_temp)
  5894  003CA8  5048               	movf	get_duty_cycle@set_temp,w,c
  5895  003CAA  5C46               	subwf	get_duty_cycle@temp,w,c
  5896  003CAC  5047               	movf	get_duty_cycle@temp+1,w,c
  5897  003CAE  0A80               	xorlw	128
  5898  003CB0  6E4A               	movwf	??_get_duty_cycle& (0+255),c
  5899  003CB2  5049               	movf	get_duty_cycle@set_temp+1,w,c
  5900  003CB4  0A80               	xorlw	128
  5901  003CB6  584A               	subwfb	??_get_duty_cycle& (0+255),w,c
  5902  003CB8  B0D8               	btfsc	status,0,c
  5903  003CBA  D02F               	goto	l10078
  5904                           
  5905                           ;Fan_Support.c: 17: {
  5906                           ;Fan_Support.c: 18: diff = set_temp - temp;
  5907  003CBC  5046               	movf	get_duty_cycle@temp,w,c
  5908  003CBE  0800               	sublw	0
  5909  003CC0  2448               	addwf	get_duty_cycle@set_temp,w,c
  5910  003CC2  6E4B               	movwf	get_duty_cycle@diff,c
  5911                           
  5912                           ;Fan_Support.c: 19: if (diff > 50) duty_cycle = 100;
  5913  003CC4  0E32               	movlw	50
  5914  003CC6  644B               	cpfsgt	get_duty_cycle@diff,c
  5915  003CC8  D002               	goto	l10062
  5916  003CCA  0E64               	movlw	100
  5917  003CCC  D01E               	goto	L12
  5918  003CCE                     l10062:
  5919                           
  5920                           ;Fan_Support.c: 20: else if (25<=diff && diff < 50) duty_cycle = diff * 2;
  5921  003CCE  0E18               	movlw	24
  5922  003CD0  644B               	cpfsgt	get_duty_cycle@diff,c
  5923  003CD2  D008               	goto	l10068
  5924  003CD4  0E32               	movlw	50
  5925  003CD6  604B               	cpfslt	get_duty_cycle@diff,c
  5926  003CD8  D005               	goto	l10068
  5927  003CDA  504B               	movf	get_duty_cycle@diff,w,c
  5928  003CDC  0D02               	mullw	2
  5929  003CDE  CFF3 F068          	movff	prodl,_duty_cycle
  5930  003CE2  D01B               	goto	l10078
  5931  003CE4                     l10068:
  5932                           
  5933                           ;Fan_Support.c: 21: else if (10<=diff && diff < 25) duty_cycle = diff*3/2;
  5934  003CE4  0E09               	movlw	9
  5935  003CE6  644B               	cpfsgt	get_duty_cycle@diff,c
  5936  003CE8  D012               	goto	l10074
  5937  003CEA  0E19               	movlw	25
  5938  003CEC  604B               	cpfslt	get_duty_cycle@diff,c
  5939  003CEE  D00F               	goto	l10074
  5940  003CF0  504B               	movf	get_duty_cycle@diff,w,c
  5941  003CF2  0D03               	mullw	3
  5942  003CF4  CFF3 F017          	movff	prodl,___awdiv@dividend
  5943  003CF8  CFF4 F018          	movff	prodh,___awdiv@dividend+1
  5944  003CFC  0E00               	movlw	0
  5945  003CFE  6E1A               	movwf	___awdiv@divisor+1,c
  5946  003D00  0E02               	movlw	2
  5947  003D02  6E19               	movwf	___awdiv@divisor,c
  5948  003D04  EC2D  F01F         	call	___awdiv	;wreg free
  5949  003D08  5017               	movf	?___awdiv,w,c
  5950  003D0A                     L12:
  5951  003D0A  6E68               	movwf	_duty_cycle,c
  5952  003D0C  D006               	goto	l10078
  5953  003D0E                     l10074:
  5954  003D0E  0E0A               	movlw	10
  5955  003D10  604B               	cpfslt	get_duty_cycle@diff,c
  5956  003D12  D003               	goto	l10078
  5957  003D14  C04B  F068         	movff	get_duty_cycle@diff,_duty_cycle
  5958  003D18  D000               	goto	l10078
  5959  003D1A                     l10078:
  5960                           
  5961                           ;Fan_Support.c: 23: }
  5962                           ;Fan_Support.c: 24: do_update_pwm(duty_cycle);
  5963  003D1A  5068               	movf	_duty_cycle,w,c
  5964  003D1C  ECEB  F01D         	call	_do_update_pwm
  5965                           
  5966                           ;Fan_Support.c: 25: return duty_cycle;
  5967  003D20  C068  F046         	movff	_duty_cycle,?_get_duty_cycle
  5968  003D24  6A47               	clrf	?_get_duty_cycle+1,c
  5969  003D26  D000               	goto	l31
  5970  003D28                     l31:
  5971  003D28  0012               	return		;funcret
  5972  003D2A                     __end_of_get_duty_cycle:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1l	equ	0xFE1
  5984                           indf2	equ	0xFDF
  5985                           fsr2h	equ	0xFDA
  5986                           fsr2l	equ	0xFD9
  5987                           status	equ	0xFD8
  5988                           
  5989 ;; *************** function _Do_Setup_Time *****************
  5990 ;; Defined at:
  5991 ;;		line 33 in file "Setup_Time.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;		None
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2  378[None  ] int 
  5998 ;; Registers used:
  5999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;Total ram usage:        0 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:   12
  6012 ;; This function calls:
  6013 ;;		_DS3231_Read_Time
  6014 ;;		_Decrease_Time
  6015 ;;		_Do_Beep_Bad
  6016 ;;		_Do_Beep_Good
  6017 ;;		_Do_Save_New_Time
  6018 ;;		_Exit_Time_Setup
  6019 ;;		_Go_Next_Field
  6020 ;;		_Go_Prev_Field
  6021 ;;		_Increase_Time
  6022 ;;		_Initialize_Setup_Time_Screen
  6023 ;;		_Update_Setup_Time_Screen
  6024 ;;		_bcd_2_dec
  6025 ;;		_check_for_button_input
  6026 ;; This function is called by:
  6027 ;;		_main
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text20
  6032  00374C                     __ptext20:
  6033                           	opt stack 0
  6034  00374C                     _Do_Setup_Time:
  6035                           	opt stack 18
  6036                           
  6037                           ;Setup_Time.c: 36: Select_Field = 0;
  6038                           
  6039                           ;incstack = 0
  6040  00374C  0E00               	movlw	0
  6041  00374E  0100               	movlb	0	; () banked
  6042  003750  6FA6               	movwf	_Select_Field& (0+255),b
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;Setup_Time.c: 38: DS3231_Read_Time();
  6046  003752  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  6047                           
  6048                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  6049  003756  506D               	movf	_second,w,c
  6050  003758  ECAF  F026         	call	_bcd_2_dec
  6051  00375C  0100               	movlb	0	; () banked
  6052  00375E  6FB5               	movwf	_setup_second& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6056  003760  506B               	movf	_minute,w,c
  6057  003762  ECAF  F026         	call	_bcd_2_dec
  6058  003766  0100               	movlb	0	; () banked
  6059  003768  6FB3               	movwf	_setup_minute& (0+255),b
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6063  00376A  506A               	movf	_hour,w,c
  6064  00376C  ECAF  F026         	call	_bcd_2_dec
  6065  003770  0100               	movlb	0	; () banked
  6066  003772  6FB2               	movwf	_setup_hour& (0+255),b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6070  003774  5067               	movf	_day,w,c
  6071  003776  ECAF  F026         	call	_bcd_2_dec
  6072  00377A  0100               	movlb	0	; () banked
  6073  00377C  6FB0               	movwf	_setup_day& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6077  00377E  506C               	movf	_month,w,c
  6078  003780  ECAF  F026         	call	_bcd_2_dec
  6079  003784  0100               	movlb	0	; () banked
  6080  003786  6FB4               	movwf	_setup_month& (0+255),b
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6084  003788  506F               	movf	_year,w,c
  6085  00378A  ECAF  F026         	call	_bcd_2_dec
  6086  00378E  0100               	movlb	0	; () banked
  6087  003790  6FB6               	movwf	_setup_year& (0+255),b
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6091  003792  ECF8  F015         	call	_Initialize_Setup_Time_Screen	;wreg free
  6092                           
  6093                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6094  003796  ECBA  F012         	call	_Update_Setup_Time_Screen	;wreg free
  6095                           
  6096                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6097  00379A  0E01               	movlw	1
  6098  00379C  0100               	movlb	0	; () banked
  6099  00379E  6FA2               	movwf	_In_Time_Setup& (0+255),b
  6100                           
  6101                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6102  0037A0  D03C               	goto	l10688
  6103  0037A2                     l10652:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;Setup_Time.c: 51: {
  6107                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6108  0037A2  EC0D  F020         	call	_check_for_button_input	;wreg free
  6109  0037A6  06E8               	decf	wreg,f,c
  6110  0037A8  A4D8               	btfss	status,2,c
  6111  0037AA  D037               	goto	l10688
  6112                           
  6113                           ;Setup_Time.c: 53: {
  6114                           ;Setup_Time.c: 54: if (found >= 3 && found <= 8)
  6115  0037AC  0E02               	movlw	2
  6116  0037AE  6469               	cpfsgt	_found,c
  6117  0037B0  D031               	goto	l10686
  6118  0037B2  0E09               	movlw	9
  6119  0037B4  6069               	cpfslt	_found,c
  6120  0037B6  D02E               	goto	l10686
  6121                           
  6122                           ;Setup_Time.c: 55: {
  6123                           ;Setup_Time.c: 56: Do_Beep_Good();
  6124  0037B8  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  6125                           
  6126                           ;Setup_Time.c: 57: if (found == 3) Go_Prev_Field();
  6127  0037BC  0E03               	movlw	3
  6128  0037BE  1869               	xorwf	_found,w,c
  6129  0037C0  A4D8               	btfss	status,2,c
  6130  0037C2  D003               	goto	l10664
  6131  0037C4  EC55  F027         	call	_Go_Prev_Field	;wreg free
  6132  0037C8  D000               	goto	l10664
  6133  0037CA                     l10664:
  6134                           
  6135                           ;Setup_Time.c: 58: if (found == 4) Go_Next_Field();
  6136  0037CA  0E04               	movlw	4
  6137  0037CC  1869               	xorwf	_found,w,c
  6138  0037CE  A4D8               	btfss	status,2,c
  6139  0037D0  D003               	goto	l10668
  6140  0037D2  EC65  F027         	call	_Go_Next_Field	;wreg free
  6141  0037D6  D000               	goto	l10668
  6142  0037D8                     l10668:
  6143                           
  6144                           ;Setup_Time.c: 59: if (found == 5) Do_Save_New_Time();
  6145  0037D8  0E05               	movlw	5
  6146  0037DA  1869               	xorwf	_found,w,c
  6147  0037DC  A4D8               	btfss	status,2,c
  6148  0037DE  D003               	goto	l10672
  6149  0037E0  EC19  F028         	call	_Do_Save_New_Time	;wreg free
  6150  0037E4  D000               	goto	l10672
  6151  0037E6                     l10672:
  6152                           
  6153                           ;Setup_Time.c: 60: if (found == 6) Decrease_Time();
  6154  0037E6  0E06               	movlw	6
  6155  0037E8  1869               	xorwf	_found,w,c
  6156  0037EA  A4D8               	btfss	status,2,c
  6157  0037EC  D003               	goto	l10676
  6158  0037EE  EC90  F01D         	call	_Decrease_Time	;wreg free
  6159  0037F2  D000               	goto	l10676
  6160  0037F4                     l10676:
  6161                           
  6162                           ;Setup_Time.c: 61: if (found == 7) Increase_Time();
  6163  0037F4  0E07               	movlw	7
  6164  0037F6  1869               	xorwf	_found,w,c
  6165  0037F8  A4D8               	btfss	status,2,c
  6166  0037FA  D003               	goto	l10680
  6167  0037FC  EC35  F01D         	call	_Increase_Time	;wreg free
  6168  003800  D000               	goto	l10680
  6169  003802                     l10680:
  6170                           
  6171                           ;Setup_Time.c: 62: if (found == 8) Exit_Time_Setup();
  6172  003802  0E08               	movlw	8
  6173  003804  1869               	xorwf	_found,w,c
  6174  003806  A4D8               	btfss	status,2,c
  6175  003808  D003               	goto	l10684
  6176  00380A  EC9D  F028         	call	_Exit_Time_Setup	;wreg free
  6177  00380E  D000               	goto	l10684
  6178  003810                     l10684:
  6179                           
  6180                           ;Setup_Time.c: 63: found = 0xff;
  6181  003810  6869               	setf	_found,c
  6182                           
  6183                           ;Setup_Time.c: 64: }
  6184  003812  D003               	goto	l10688
  6185  003814                     l10686:
  6186                           
  6187                           ;Setup_Time.c: 65: else
  6188                           ;Setup_Time.c: 66: {
  6189                           ;Setup_Time.c: 67: Do_Beep_Bad();
  6190  003814  EC37  F028         	call	_Do_Beep_Bad	;wreg free
  6191  003818  D000               	goto	l10688
  6192  00381A                     l10688:
  6193  00381A  0100               	movlb	0	; () banked
  6194  00381C  05A2               	decf	_In_Time_Setup& (0+255),w,b
  6195  00381E  B4D8               	btfsc	status,2,c
  6196  003820  D7C0               	goto	l10652
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  003822  0012               	return		;funcret
  6202  003824                     __end_of_Do_Setup_Time:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           prodh	equ	0xFF4
  6209                           prodl	equ	0xFF3
  6210                           postinc0	equ	0xFEE
  6211                           wreg	equ	0xFE8
  6212                           postdec1	equ	0xFE5
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6220 ;; Defined at:
  6221 ;;		line 172 in file "Setup_Time.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;		None               void
  6228 ;; Registers used:
  6229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;Total ram usage:        0 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:   10
  6242 ;; This function calls:
  6243 ;;		_drawtext
  6244 ;;		_fillRect
  6245 ;;		_fillScreen
  6246 ;;		_strcpy
  6247 ;; This function is called by:
  6248 ;;		_Do_Setup_Time
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text21
  6253  002BF0                     __ptext21:
  6254                           	opt stack 0
  6255  002BF0                     _Initialize_Setup_Time_Screen:
  6256                           	opt stack 19
  6257                           
  6258                           ;Setup_Time.c: 174: fillScreen(0x0000);
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;incstack = 0
  6262  002BF0  0E00               	movlw	0
  6263  002BF2  6E25               	movwf	fillScreen@color+1,c
  6264  002BF4  0E00               	movlw	0
  6265  002BF6  6E24               	movwf	fillScreen@color,c
  6266  002BF8  ECB4  F027         	call	_fillScreen	;wreg free
  6267                           
  6268                           ;Setup_Time.c: 176: strcpy(txt, "ECE3301L Fa'22 S1\0");
  6269  002BFC  C062  F011         	movff	_txt,strcpy@to
  6270  002C00  C063  F012         	movff	_txt+1,strcpy@to+1
  6271  002C04  0E1D               	movlw	low STR_6
  6272  002C06  6E13               	movwf	strcpy@from,c
  6273  002C08  0EFF               	movlw	high STR_6
  6274  002C0A  6E14               	movwf	strcpy@from+1,c
  6275  002C0C  EC51  F026         	call	_strcpy	;wreg free
  6276                           
  6277                           ;Setup_Time.c: 177: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6278  002C10  0E01               	movlw	1
  6279  002C12  6E39               	movwf	drawtext@y,c
  6280  002C14  C062  F03A         	movff	_txt,drawtext@_text
  6281  002C18  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6282  002C1C  0EFF               	movlw	255
  6283  002C1E  6E3D               	movwf	drawtext@color+1,c
  6284  002C20  683C               	setf	drawtext@color,c
  6285  002C22  0E00               	movlw	0
  6286  002C24  6E3F               	movwf	drawtext@bg+1,c
  6287  002C26  0E00               	movlw	0
  6288  002C28  6E3E               	movwf	drawtext@bg,c
  6289  002C2A  0E01               	movlw	1
  6290  002C2C  6E40               	movwf	drawtext@size,c
  6291  002C2E  0E01               	movlw	1
  6292  002C30  ECC7  F01A         	call	_drawtext
  6293                           
  6294                           ;Setup_Time.c: 180: strcpy(txt, "Time Setup\0");
  6295  002C34  C062  F011         	movff	_txt,strcpy@to
  6296  002C38  C063  F012         	movff	_txt+1,strcpy@to+1
  6297  002C3C  0E7D               	movlw	low STR_34
  6298  002C3E  6E13               	movwf	strcpy@from,c
  6299  002C40  0EFF               	movlw	high STR_34
  6300  002C42  6E14               	movwf	strcpy@from+1,c
  6301  002C44  EC51  F026         	call	_strcpy	;wreg free
  6302                           
  6303                           ;Setup_Time.c: 181: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6304  002C48  0E10               	movlw	16
  6305  002C4A  6E39               	movwf	drawtext@y,c
  6306  002C4C  C062  F03A         	movff	_txt,drawtext@_text
  6307  002C50  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6308  002C54  0EF8               	movlw	248
  6309  002C56  6E3D               	movwf	drawtext@color+1,c
  6310  002C58  0E1F               	movlw	31
  6311  002C5A  6E3C               	movwf	drawtext@color,c
  6312  002C5C  0E00               	movlw	0
  6313  002C5E  6E3F               	movwf	drawtext@bg+1,c
  6314  002C60  0E00               	movlw	0
  6315  002C62  6E3E               	movwf	drawtext@bg,c
  6316  002C64  0E02               	movlw	2
  6317  002C66  6E40               	movwf	drawtext@size,c
  6318  002C68  0E04               	movlw	4
  6319  002C6A  ECC7  F01A         	call	_drawtext
  6320                           
  6321                           ;Setup_Time.c: 183: strcpy(txt, "Time");
  6322  002C6E  C062  F011         	movff	_txt,strcpy@to
  6323  002C72  C063  F012         	movff	_txt+1,strcpy@to+1
  6324  002C76  0EA5               	movlw	low (STR_12+6)
  6325  002C78  6E13               	movwf	strcpy@from,c
  6326  002C7A  0EFF               	movlw	high (STR_12+6)
  6327  002C7C  6E14               	movwf	strcpy@from+1,c
  6328  002C7E  EC51  F026         	call	_strcpy	;wreg free
  6329                           
  6330                           ;Setup_Time.c: 184: drawtext(50 , 40 , txt, 0xF800 , 0x0000, 1);
  6331  002C82  0E28               	movlw	40
  6332  002C84  6E39               	movwf	drawtext@y,c
  6333  002C86  C062  F03A         	movff	_txt,drawtext@_text
  6334  002C8A  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6335  002C8E  0EF8               	movlw	248
  6336  002C90  6E3D               	movwf	drawtext@color+1,c
  6337  002C92  0E00               	movlw	0
  6338  002C94  6E3C               	movwf	drawtext@color,c
  6339  002C96  0E00               	movlw	0
  6340  002C98  6E3F               	movwf	drawtext@bg+1,c
  6341  002C9A  0E00               	movlw	0
  6342  002C9C  6E3E               	movwf	drawtext@bg,c
  6343  002C9E  0E01               	movlw	1
  6344  002CA0  6E40               	movwf	drawtext@size,c
  6345  002CA2  0E32               	movlw	50
  6346  002CA4  ECC7  F01A         	call	_drawtext
  6347                           
  6348                           ;Setup_Time.c: 186: fillRect(15-1, 52+16, 25,2,0xFFE0);
  6349  002CA8  0E44               	movlw	68
  6350  002CAA  6E23               	movwf	fillRect@y,c
  6351  002CAC  0E19               	movlw	25
  6352  002CAE  6E24               	movwf	fillRect@w,c
  6353  002CB0  0E02               	movlw	2
  6354  002CB2  6E25               	movwf	fillRect@h,c
  6355  002CB4  0EFF               	movlw	255
  6356  002CB6  6E27               	movwf	fillRect@color+1,c
  6357  002CB8  0EE0               	movlw	224
  6358  002CBA  6E26               	movwf	fillRect@color,c
  6359  002CBC  0E0E               	movlw	14
  6360  002CBE  ECDE  F024         	call	_fillRect
  6361                           
  6362                           ;Setup_Time.c: 187: strcpy(txt, "Date");
  6363  002CC2  C062  F011         	movff	_txt,strcpy@to
  6364  002CC6  C063  F012         	movff	_txt+1,strcpy@to+1
  6365  002CCA  0EDF               	movlw	low STR_11
  6366  002CCC  6E13               	movwf	strcpy@from,c
  6367  002CCE  0EFF               	movlw	high STR_11
  6368  002CD0  6E14               	movwf	strcpy@from+1,c
  6369  002CD2  EC51  F026         	call	_strcpy	;wreg free
  6370                           
  6371                           ;Setup_Time.c: 188: drawtext(50 , 71 , txt, 0x001F , 0x0000, 1);
  6372  002CD6  0E47               	movlw	71
  6373  002CD8  6E39               	movwf	drawtext@y,c
  6374  002CDA  C062  F03A         	movff	_txt,drawtext@_text
  6375  002CDE  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6376  002CE2  0E00               	movlw	0
  6377  002CE4  6E3D               	movwf	drawtext@color+1,c
  6378  002CE6  0E1F               	movlw	31
  6379  002CE8  6E3C               	movwf	drawtext@color,c
  6380  002CEA  0E00               	movlw	0
  6381  002CEC  6E3F               	movwf	drawtext@bg+1,c
  6382  002CEE  0E00               	movlw	0
  6383  002CF0  6E3E               	movwf	drawtext@bg,c
  6384  002CF2  0E01               	movlw	1
  6385  002CF4  6E40               	movwf	drawtext@size,c
  6386  002CF6  0E32               	movlw	50
  6387  002CF8  ECC7  F01A         	call	_drawtext
  6388  002CFC  0012               	return		;funcret
  6389  002CFE                     __end_of_Initialize_Setup_Time_Screen:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           postinc0	equ	0xFEE
  6398                           wreg	equ	0xFE8
  6399                           postdec1	equ	0xFE5
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _Increase_Time *****************
  6407 ;; Defined at:
  6408 ;;		line 73 in file "Setup_Time.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:   11
  6429 ;; This function calls:
  6430 ;;		_Update_Setup_Time_Screen
  6431 ;; This function is called by:
  6432 ;;		_Do_Setup_Time
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text22
  6437  003A6A                     __ptext22:
  6438                           	opt stack 0
  6439  003A6A                     _Increase_Time:
  6440                           	opt stack 18
  6441                           
  6442                           ;Setup_Time.c: 75: switch (Select_Field)
  6443                           
  6444                           ;incstack = 0
  6445  003A6A  D042               	goto	l10380
  6446  003A6C                     l10342:
  6447                           
  6448                           ;Setup_Time.c: 78: setup_hour++;
  6449  003A6C  0100               	movlb	0	; () banked
  6450  003A6E  2BB2               	incf	_setup_hour& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;Setup_Time.c: 79: if (setup_hour == 24) setup_hour = 0;
  6454  003A70  0E18               	movlw	24
  6455  003A72  0100               	movlb	0	; () banked
  6456  003A74  19B2               	xorwf	_setup_hour& (0+255),w,b
  6457  003A76  A4D8               	btfss	status,2,c
  6458  003A78  D050               	goto	l10382
  6459                           
  6460                           ; BSR set to: 0
  6461  003A7A  0E00               	movlw	0
  6462  003A7C  0100               	movlb	0	; () banked
  6463  003A7E  6FB2               	movwf	_setup_hour& (0+255),b
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;Setup_Time.c: 80: break;
  6467  003A80  D04C               	goto	l10382
  6468  003A82                     l10348:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;Setup_Time.c: 82: setup_minute++;
  6472  003A82  0100               	movlb	0	; () banked
  6473  003A84  2BB3               	incf	_setup_minute& (0+255),f,b
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;Setup_Time.c: 83: if (setup_minute == 60) setup_minute = 0;
  6477  003A86  0E3C               	movlw	60
  6478  003A88  0100               	movlb	0	; () banked
  6479  003A8A  19B3               	xorwf	_setup_minute& (0+255),w,b
  6480  003A8C  A4D8               	btfss	status,2,c
  6481  003A8E  D045               	goto	l10382
  6482                           
  6483                           ; BSR set to: 0
  6484  003A90  0E00               	movlw	0
  6485  003A92  0100               	movlb	0	; () banked
  6486  003A94  6FB3               	movwf	_setup_minute& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;Setup_Time.c: 84: break;
  6490  003A96  D041               	goto	l10382
  6491  003A98                     l10354:
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;Setup_Time.c: 86: setup_second++;
  6495  003A98  0100               	movlb	0	; () banked
  6496  003A9A  2BB5               	incf	_setup_second& (0+255),f,b
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;Setup_Time.c: 87: if (setup_second == 60) setup_second = 0;
  6500  003A9C  0E3C               	movlw	60
  6501  003A9E  0100               	movlb	0	; () banked
  6502  003AA0  19B5               	xorwf	_setup_second& (0+255),w,b
  6503  003AA2  A4D8               	btfss	status,2,c
  6504  003AA4  D03A               	goto	l10382
  6505                           
  6506                           ; BSR set to: 0
  6507  003AA6  0E00               	movlw	0
  6508  003AA8  0100               	movlb	0	; () banked
  6509  003AAA  6FB5               	movwf	_setup_second& (0+255),b
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;Setup_Time.c: 88: break;
  6513  003AAC  D036               	goto	l10382
  6514  003AAE                     l10360:
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;Setup_Time.c: 90: setup_month++;
  6518  003AAE  0100               	movlb	0	; () banked
  6519  003AB0  2BB4               	incf	_setup_month& (0+255),f,b
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;Setup_Time.c: 91: if (setup_month == 13) setup_month = 1;
  6523  003AB2  0E0D               	movlw	13
  6524  003AB4  0100               	movlb	0	; () banked
  6525  003AB6  19B4               	xorwf	_setup_month& (0+255),w,b
  6526  003AB8  A4D8               	btfss	status,2,c
  6527  003ABA  D02F               	goto	l10382
  6528                           
  6529                           ; BSR set to: 0
  6530  003ABC  0E01               	movlw	1
  6531  003ABE  0100               	movlb	0	; () banked
  6532  003AC0  6FB4               	movwf	_setup_month& (0+255),b
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;Setup_Time.c: 92: break;
  6536  003AC2  D02B               	goto	l10382
  6537  003AC4                     l10366:
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;Setup_Time.c: 94: setup_day++;
  6541  003AC4  0100               	movlb	0	; () banked
  6542  003AC6  2BB0               	incf	_setup_day& (0+255),f,b
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;Setup_Time.c: 95: if (setup_day == 32) setup_day = 1;
  6546  003AC8  0E20               	movlw	32
  6547  003ACA  0100               	movlb	0	; () banked
  6548  003ACC  19B0               	xorwf	_setup_day& (0+255),w,b
  6549  003ACE  A4D8               	btfss	status,2,c
  6550  003AD0  D024               	goto	l10382
  6551                           
  6552                           ; BSR set to: 0
  6553  003AD2  0E01               	movlw	1
  6554  003AD4  0100               	movlb	0	; () banked
  6555  003AD6  6FB0               	movwf	_setup_day& (0+255),b
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;Setup_Time.c: 96: break;
  6559  003AD8  D020               	goto	l10382
  6560  003ADA                     l10372:
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;Setup_Time.c: 98: setup_year++;
  6564  003ADA  0100               	movlb	0	; () banked
  6565  003ADC  2BB6               	incf	_setup_year& (0+255),f,b
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;Setup_Time.c: 99: if (setup_year == 100) setup_year = 1;
  6569  003ADE  0E64               	movlw	100
  6570  003AE0  0100               	movlb	0	; () banked
  6571  003AE2  19B6               	xorwf	_setup_year& (0+255),w,b
  6572  003AE4  A4D8               	btfss	status,2,c
  6573  003AE6  D019               	goto	l10382
  6574                           
  6575                           ; BSR set to: 0
  6576  003AE8  0E01               	movlw	1
  6577  003AEA  0100               	movlb	0	; () banked
  6578  003AEC  6FB6               	movwf	_setup_year& (0+255),b
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;Setup_Time.c: 103: }
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;Setup_Time.c: 102: break;
  6585                           
  6586                           ;Setup_Time.c: 101: default:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;Setup_Time.c: 100: break;
  6590  003AEE  D015               	goto	l10382
  6591  003AF0                     l10380:
  6592  003AF0  0100               	movlb	0	; () banked
  6593  003AF2  51A6               	movf	_Select_Field& (0+255),w,b
  6594                           
  6595                           ; Switch size 1, requested type "space"
  6596                           ; Number of cases is 6, Range of values is 0 to 5
  6597                           ; switch strategies available:
  6598                           ; Name         Instructions Cycles
  6599                           ; simple_byte           19    10 (average)
  6600                           ;	Chosen strategy is simple_byte
  6601  003AF4  0A00               	xorlw	0	; case 0
  6602  003AF6  B4D8               	btfsc	status,2,c
  6603  003AF8  D7B9               	goto	l10342
  6604  003AFA  0A01               	xorlw	1	; case 1
  6605  003AFC  B4D8               	btfsc	status,2,c
  6606  003AFE  D7C1               	goto	l10348
  6607  003B00  0A03               	xorlw	3	; case 2
  6608  003B02  B4D8               	btfsc	status,2,c
  6609  003B04  D7C9               	goto	l10354
  6610  003B06  0A01               	xorlw	1	; case 3
  6611  003B08  B4D8               	btfsc	status,2,c
  6612  003B0A  D7D1               	goto	l10360
  6613  003B0C  0A07               	xorlw	7	; case 4
  6614  003B0E  B4D8               	btfsc	status,2,c
  6615  003B10  D7D9               	goto	l10366
  6616  003B12  0A01               	xorlw	1	; case 5
  6617  003B14  B4D8               	btfsc	status,2,c
  6618  003B16  D7E1               	goto	l10372
  6619  003B18  D000               	goto	l10382
  6620  003B1A                     l10382:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;Setup_Time.c: 104: Update_Setup_Time_Screen();
  6624  003B1A  ECBA  F012         	call	_Update_Setup_Time_Screen	;wreg free
  6625  003B1E  0012               	return		;funcret
  6626  003B20                     __end_of_Increase_Time:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           postdec1	equ	0xFE5
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function _Go_Prev_Field *****************
  6644 ;; Defined at:
  6645 ;;		line 151 in file "Setup_Time.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;		None               void
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;Total ram usage:        0 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    9
  6666 ;; This function calls:
  6667 ;;		_Update_Setup_Screen_Cursor_Backward
  6668 ;; This function is called by:
  6669 ;;		_Do_Setup_Time
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text23
  6674  004EAA                     __ptext23:
  6675                           	opt stack 0
  6676  004EAA                     _Go_Prev_Field:
  6677                           	opt stack 20
  6678                           
  6679                           ;Setup_Time.c: 153: if (Select_Field == 0) Select_Field = 5;
  6680                           
  6681                           ;incstack = 0
  6682  004EAA  0100               	movlb	0	; () banked
  6683  004EAC  51A6               	movf	_Select_Field& (0+255),w,b
  6684  004EAE  A4D8               	btfss	status,2,c
  6685  004EB0  D004               	goto	l7658
  6686                           
  6687                           ; BSR set to: 0
  6688  004EB2  0E05               	movlw	5
  6689  004EB4  0100               	movlb	0	; () banked
  6690  004EB6  6FA6               	movwf	_Select_Field& (0+255),b
  6691  004EB8  D003               	goto	l7660
  6692  004EBA                     l7658:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;Setup_Time.c: 154: else Select_Field--;
  6696  004EBA  0100               	movlb	0	; () banked
  6697  004EBC  07A6               	decf	_Select_Field& (0+255),f,b
  6698  004EBE  D000               	goto	l7660
  6699  004EC0                     l7660:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;Setup_Time.c: 155: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6703  004EC0  0100               	movlb	0	; () banked
  6704  004EC2  51A6               	movf	_Select_Field& (0+255),w,b
  6705  004EC4  EC03  F011         	call	_Update_Setup_Screen_Cursor_Backward
  6706  004EC8  0012               	return		;funcret
  6707  004ECA                     __end_of_Go_Prev_Field:
  6708                           	opt stack 0
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           prodh	equ	0xFF4
  6714                           prodl	equ	0xFF3
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1l	equ	0xFE1
  6719                           indf2	equ	0xFDF
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _Go_Next_Field *****************
  6725 ;; Defined at:
  6726 ;;		line 142 in file "Setup_Time.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;		None               void
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    9
  6747 ;; This function calls:
  6748 ;;		_Update_Setup_Screen_Cursor_Forward
  6749 ;; This function is called by:
  6750 ;;		_Do_Setup_Time
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text24
  6755  004ECA                     __ptext24:
  6756                           	opt stack 0
  6757  004ECA                     _Go_Next_Field:
  6758                           	opt stack 20
  6759                           
  6760                           ;Setup_Time.c: 145: Select_Field++;
  6761                           
  6762                           ;incstack = 0
  6763  004ECA  0100               	movlb	0	; () banked
  6764  004ECC  2BA6               	incf	_Select_Field& (0+255),f,b
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;Setup_Time.c: 146: if (Select_Field == 6) Select_Field = 0;
  6768  004ECE  0E06               	movlw	6
  6769  004ED0  0100               	movlb	0	; () banked
  6770  004ED2  19A6               	xorwf	_Select_Field& (0+255),w,b
  6771  004ED4  A4D8               	btfss	status,2,c
  6772  004ED6  D004               	goto	l7668
  6773                           
  6774                           ; BSR set to: 0
  6775  004ED8  0E00               	movlw	0
  6776  004EDA  0100               	movlb	0	; () banked
  6777  004EDC  6FA6               	movwf	_Select_Field& (0+255),b
  6778  004EDE  D000               	goto	l7668
  6779  004EE0                     l7668:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;Setup_Time.c: 147: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6783  004EE0  0100               	movlb	0	; () banked
  6784  004EE2  51A6               	movf	_Select_Field& (0+255),w,b
  6785  004EE4  EC3E  F00F         	call	_Update_Setup_Screen_Cursor_Forward
  6786  004EE8  0012               	return		;funcret
  6787  004EEA                     __end_of_Go_Next_Field:
  6788                           	opt stack 0
  6789                           tblptru	equ	0xFF8
  6790                           tblptrh	equ	0xFF7
  6791                           tblptrl	equ	0xFF6
  6792                           tablat	equ	0xFF5
  6793                           prodh	equ	0xFF4
  6794                           prodl	equ	0xFF3
  6795                           postinc0	equ	0xFEE
  6796                           wreg	equ	0xFE8
  6797                           postdec1	equ	0xFE5
  6798                           fsr1l	equ	0xFE1
  6799                           indf2	equ	0xFDF
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function _Exit_Time_Setup *****************
  6805 ;; Defined at:
  6806 ;;		line 166 in file "Setup_Time.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;		None
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;Total ram usage:        0 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:   11
  6827 ;; This function calls:
  6828 ;;		_DS3231_Read_Time
  6829 ;;		_Initialize_Screen
  6830 ;; This function is called by:
  6831 ;;		_Do_Setup_Time
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text25
  6836  00513A                     __ptext25:
  6837                           	opt stack 0
  6838  00513A                     _Exit_Time_Setup:
  6839                           	opt stack 18
  6840                           
  6841                           ;Setup_Time.c: 168: DS3231_Read_Time();
  6842                           
  6843                           ;incstack = 0
  6844  00513A  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  6845                           
  6846                           ;Setup_Time.c: 169: Initialize_Screen();
  6847  00513E  EC31  F00B         	call	_Initialize_Screen	;wreg free
  6848                           
  6849                           ;Setup_Time.c: 170: In_Time_Setup = 0;
  6850  005142  0E00               	movlw	0
  6851  005144  0100               	movlb	0	; () banked
  6852  005146  6FA2               	movwf	_In_Time_Setup& (0+255),b
  6853                           
  6854                           ; BSR set to: 0
  6855  005148  0012               	return		;funcret
  6856  00514A                     __end_of_Exit_Time_Setup:
  6857                           	opt stack 0
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           postinc0	equ	0xFEE
  6865                           wreg	equ	0xFE8
  6866                           postdec1	equ	0xFE5
  6867                           fsr1l	equ	0xFE1
  6868                           indf2	equ	0xFDF
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _Do_Save_New_Time *****************
  6874 ;; Defined at:
  6875 ;;		line 158 in file "Setup_Time.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;		None
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;		None
  6880 ;; Return value:  Size  Location     Type
  6881 ;;		None               void
  6882 ;; Registers used:
  6883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;Total ram usage:        0 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:   11
  6896 ;; This function calls:
  6897 ;;		_DS3231_Read_Time
  6898 ;;		_DS3231_Write_Time
  6899 ;;		_Initialize_Screen
  6900 ;; This function is called by:
  6901 ;;		_Do_Setup_Time
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text26
  6906  005032                     __ptext26:
  6907                           	opt stack 0
  6908  005032                     _Do_Save_New_Time:
  6909                           	opt stack 18
  6910                           
  6911                           ;Setup_Time.c: 160: DS3231_Write_Time();
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;incstack = 0
  6915  005032  EC95  F01E         	call	_DS3231_Write_Time	;wreg free
  6916                           
  6917                           ;Setup_Time.c: 161: DS3231_Read_Time();
  6918  005036  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  6919                           
  6920                           ;Setup_Time.c: 162: Initialize_Screen();
  6921  00503A  EC31  F00B         	call	_Initialize_Screen	;wreg free
  6922                           
  6923                           ;Setup_Time.c: 163: In_Time_Setup = 0;
  6924  00503E  0E00               	movlw	0
  6925  005040  0100               	movlb	0	; () banked
  6926  005042  6FA2               	movwf	_In_Time_Setup& (0+255),b
  6927                           
  6928                           ; BSR set to: 0
  6929  005044  0012               	return		;funcret
  6930  005046                     __end_of_Do_Save_New_Time:
  6931                           	opt stack 0
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec1	equ	0xFE5
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function _DS3231_Write_Time *****************
  6948 ;; Defined at:
  6949 ;;		line 90 in file "I2C_Support.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  Address         1   74[COMRAM] unsigned char 
  6954 ;;  Device          1   73[COMRAM] unsigned char 
  6955 ;; Return value:  Size  Location     Type
  6956 ;;		None               void
  6957 ;; Registers used:
  6958 ;;		wreg, status,2, status,0, cstack
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;Total ram usage:        2 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    5
  6971 ;; This function calls:
  6972 ;;		_I2C_Start
  6973 ;;		_I2C_Stop
  6974 ;;		_I2C_Write
  6975 ;;		_dec_2_bcd
  6976 ;; This function is called by:
  6977 ;;		_Do_Save_New_Time
  6978 ;; This function uses a non-reentrant model
  6979 ;;
  6980                           
  6981                           	psect	text27
  6982  003D2A                     __ptext27:
  6983                           	opt stack 0
  6984  003D2A                     _DS3231_Write_Time:
  6985                           	opt stack 23
  6986                           
  6987                           ;I2C_Support.c: 92: char Device = 0x68;
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;incstack = 0
  6991  003D2A  0E68               	movlw	104
  6992  003D2C  6E4A               	movwf	DS3231_Write_Time@Device,c
  6993                           
  6994                           ;I2C_Support.c: 93: char Address = 0x00;
  6995  003D2E  0E00               	movlw	0
  6996  003D30  6E4B               	movwf	DS3231_Write_Time@Address,c
  6997                           
  6998                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  6999  003D32  0100               	movlb	0	; () banked
  7000  003D34  51B5               	movf	_setup_second& (0+255),w,b
  7001  003D36  ECE5  F023         	call	_dec_2_bcd
  7002  003D3A  5043               	movf	?_dec_2_bcd,w,c
  7003  003D3C  6E6D               	movwf	_second,c
  7004                           
  7005                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  7006  003D3E  0100               	movlb	0	; () banked
  7007  003D40  51B3               	movf	_setup_minute& (0+255),w,b
  7008  003D42  ECE5  F023         	call	_dec_2_bcd
  7009  003D46  5043               	movf	?_dec_2_bcd,w,c
  7010  003D48  6E6B               	movwf	_minute,c
  7011                           
  7012                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  7013  003D4A  0100               	movlb	0	; () banked
  7014  003D4C  51B2               	movf	_setup_hour& (0+255),w,b
  7015  003D4E  ECE5  F023         	call	_dec_2_bcd
  7016  003D52  5043               	movf	?_dec_2_bcd,w,c
  7017  003D54  6E6A               	movwf	_hour,c
  7018                           
  7019                           ;I2C_Support.c: 97: dow = 0x01;
  7020  003D56  0E01               	movlw	1
  7021  003D58  0100               	movlb	0	; () banked
  7022  003D5A  6FAC               	movwf	_dow& (0+255),b
  7023                           
  7024                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  7025  003D5C  0100               	movlb	0	; () banked
  7026  003D5E  51B0               	movf	_setup_day& (0+255),w,b
  7027  003D60  ECE5  F023         	call	_dec_2_bcd
  7028  003D64  5043               	movf	?_dec_2_bcd,w,c
  7029  003D66  6E67               	movwf	_day,c
  7030                           
  7031                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  7032  003D68  0100               	movlb	0	; () banked
  7033  003D6A  51B4               	movf	_setup_month& (0+255),w,b
  7034  003D6C  ECE5  F023         	call	_dec_2_bcd
  7035  003D70  5043               	movf	?_dec_2_bcd,w,c
  7036  003D72  6E6C               	movwf	_month,c
  7037                           
  7038                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  7039  003D74  0100               	movlb	0	; () banked
  7040  003D76  51B6               	movf	_setup_year& (0+255),w,b
  7041  003D78  ECE5  F023         	call	_dec_2_bcd
  7042  003D7C  5043               	movf	?_dec_2_bcd,w,c
  7043  003D7E  6E6F               	movwf	_year,c
  7044                           
  7045                           ;I2C_Support.c: 101: I2C_Start();
  7046  003D80  EC8B  F028         	call	_I2C_Start	;wreg free
  7047                           
  7048                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  7049  003D84  504A               	movf	DS3231_Write_Time@Device,w,c
  7050  003D86  244A               	addwf	DS3231_Write_Time@Device,w,c
  7051  003D88  ECA6  F025         	call	_I2C_Write
  7052                           
  7053                           ;I2C_Support.c: 103: I2C_Write(Address);
  7054  003D8C  504B               	movf	DS3231_Write_Time@Address,w,c
  7055  003D8E  ECA6  F025         	call	_I2C_Write
  7056                           
  7057                           ;I2C_Support.c: 104: I2C_Write(second);
  7058  003D92  506D               	movf	_second,w,c
  7059  003D94  ECA6  F025         	call	_I2C_Write
  7060                           
  7061                           ;I2C_Support.c: 105: I2C_Write(minute);
  7062  003D98  506B               	movf	_minute,w,c
  7063  003D9A  ECA6  F025         	call	_I2C_Write
  7064                           
  7065                           ;I2C_Support.c: 106: I2C_Write(hour);
  7066  003D9E  506A               	movf	_hour,w,c
  7067  003DA0  ECA6  F025         	call	_I2C_Write
  7068                           
  7069                           ;I2C_Support.c: 107: I2C_Write(dow);
  7070  003DA4  0100               	movlb	0	; () banked
  7071  003DA6  51AC               	movf	_dow& (0+255),w,b
  7072  003DA8  ECA6  F025         	call	_I2C_Write
  7073                           
  7074                           ;I2C_Support.c: 108: I2C_Write(day);
  7075  003DAC  5067               	movf	_day,w,c
  7076  003DAE  ECA6  F025         	call	_I2C_Write
  7077                           
  7078                           ;I2C_Support.c: 109: I2C_Write(month);
  7079  003DB2  506C               	movf	_month,w,c
  7080  003DB4  ECA6  F025         	call	_I2C_Write
  7081                           
  7082                           ;I2C_Support.c: 110: I2C_Write(year);
  7083  003DB8  506F               	movf	_year,w,c
  7084  003DBA  ECA6  F025         	call	_I2C_Write
  7085                           
  7086                           ;I2C_Support.c: 111: I2C_Stop();
  7087  003DBE  EC82  F028         	call	_I2C_Stop	;wreg free
  7088  003DC2  0012               	return		;funcret
  7089  003DC4                     __end_of_DS3231_Write_Time:
  7090                           	opt stack 0
  7091                           tblptru	equ	0xFF8
  7092                           tblptrh	equ	0xFF7
  7093                           tblptrl	equ	0xFF6
  7094                           tablat	equ	0xFF5
  7095                           prodh	equ	0xFF4
  7096                           prodl	equ	0xFF3
  7097                           postinc0	equ	0xFEE
  7098                           wreg	equ	0xFE8
  7099                           postdec1	equ	0xFE5
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _Decrease_Time *****************
  7107 ;; Defined at:
  7108 ;;		line 107 in file "Setup_Time.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;		None
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;		None
  7113 ;; Return value:  Size  Location     Type
  7114 ;;		None               void
  7115 ;; Registers used:
  7116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7117 ;; Tracked objects:
  7118 ;;		On entry : 0/0
  7119 ;;		On exit  : 0/0
  7120 ;;		Unchanged: 0/0
  7121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;Total ram usage:        0 bytes
  7127 ;; Hardware stack levels used:    1
  7128 ;; Hardware stack levels required when called:   11
  7129 ;; This function calls:
  7130 ;;		_Update_Setup_Time_Screen
  7131 ;; This function is called by:
  7132 ;;		_Do_Setup_Time
  7133 ;; This function uses a non-reentrant model
  7134 ;;
  7135                           
  7136                           	psect	text28
  7137  003B20                     __ptext28:
  7138                           	opt stack 0
  7139  003B20                     _Decrease_Time:
  7140                           	opt stack 18
  7141                           
  7142                           ;Setup_Time.c: 109: switch (Select_Field)
  7143                           
  7144                           ;incstack = 0
  7145  003B20  D042               	goto	l10336
  7146  003B22                     l10298:
  7147                           
  7148                           ;Setup_Time.c: 112: if (setup_hour == 0) setup_hour = 23;
  7149  003B22  0100               	movlb	0	; () banked
  7150  003B24  51B2               	movf	_setup_hour& (0+255),w,b
  7151  003B26  A4D8               	btfss	status,2,c
  7152  003B28  D004               	goto	l10302
  7153                           
  7154                           ; BSR set to: 0
  7155  003B2A  0E17               	movlw	23
  7156  003B2C  0100               	movlb	0	; () banked
  7157  003B2E  6FB2               	movwf	_setup_hour& (0+255),b
  7158  003B30  D04F               	goto	l10338
  7159  003B32                     l10302:
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;Setup_Time.c: 113: else --setup_hour;
  7163  003B32  0100               	movlb	0	; () banked
  7164  003B34  07B2               	decf	_setup_hour& (0+255),f,b
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;Setup_Time.c: 114: break;
  7168  003B36  D04C               	goto	l10338
  7169  003B38                     l10304:
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;Setup_Time.c: 116: if (setup_minute == 0) setup_minute = 59;
  7173  003B38  0100               	movlb	0	; () banked
  7174  003B3A  51B3               	movf	_setup_minute& (0+255),w,b
  7175  003B3C  A4D8               	btfss	status,2,c
  7176  003B3E  D004               	goto	l10308
  7177                           
  7178                           ; BSR set to: 0
  7179  003B40  0E3B               	movlw	59
  7180  003B42  0100               	movlb	0	; () banked
  7181  003B44  6FB3               	movwf	_setup_minute& (0+255),b
  7182  003B46  D044               	goto	l10338
  7183  003B48                     l10308:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;Setup_Time.c: 117: else --setup_minute;
  7187  003B48  0100               	movlb	0	; () banked
  7188  003B4A  07B3               	decf	_setup_minute& (0+255),f,b
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;Setup_Time.c: 118: break;
  7192  003B4C  D041               	goto	l10338
  7193  003B4E                     l10310:
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;Setup_Time.c: 120: if (setup_second == 0) setup_second = 59;
  7197  003B4E  0100               	movlb	0	; () banked
  7198  003B50  51B5               	movf	_setup_second& (0+255),w,b
  7199  003B52  A4D8               	btfss	status,2,c
  7200  003B54  D004               	goto	l10314
  7201                           
  7202                           ; BSR set to: 0
  7203  003B56  0E3B               	movlw	59
  7204  003B58  0100               	movlb	0	; () banked
  7205  003B5A  6FB5               	movwf	_setup_second& (0+255),b
  7206  003B5C  D039               	goto	l10338
  7207  003B5E                     l10314:
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;Setup_Time.c: 121: else --setup_second;
  7211  003B5E  0100               	movlb	0	; () banked
  7212  003B60  07B5               	decf	_setup_second& (0+255),f,b
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;Setup_Time.c: 122: break;
  7216  003B62  D036               	goto	l10338
  7217  003B64                     l10316:
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;Setup_Time.c: 124: if (setup_month == 1) setup_month = 12;
  7221  003B64  0100               	movlb	0	; () banked
  7222  003B66  05B4               	decf	_setup_month& (0+255),w,b
  7223  003B68  A4D8               	btfss	status,2,c
  7224  003B6A  D004               	goto	l10320
  7225                           
  7226                           ; BSR set to: 0
  7227  003B6C  0E0C               	movlw	12
  7228  003B6E  0100               	movlb	0	; () banked
  7229  003B70  6FB4               	movwf	_setup_month& (0+255),b
  7230  003B72  D02E               	goto	l10338
  7231  003B74                     l10320:
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;Setup_Time.c: 125: else --setup_month;
  7235  003B74  0100               	movlb	0	; () banked
  7236  003B76  07B4               	decf	_setup_month& (0+255),f,b
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;Setup_Time.c: 126: break;
  7240  003B78  D02B               	goto	l10338
  7241  003B7A                     l10322:
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;Setup_Time.c: 128: if (setup_day == 1) setup_day = 31;
  7245  003B7A  0100               	movlb	0	; () banked
  7246  003B7C  05B0               	decf	_setup_day& (0+255),w,b
  7247  003B7E  A4D8               	btfss	status,2,c
  7248  003B80  D004               	goto	l10326
  7249                           
  7250                           ; BSR set to: 0
  7251  003B82  0E1F               	movlw	31
  7252  003B84  0100               	movlb	0	; () banked
  7253  003B86  6FB0               	movwf	_setup_day& (0+255),b
  7254  003B88  D023               	goto	l10338
  7255  003B8A                     l10326:
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;Setup_Time.c: 129: else --setup_day;
  7259  003B8A  0100               	movlb	0	; () banked
  7260  003B8C  07B0               	decf	_setup_day& (0+255),f,b
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;Setup_Time.c: 130: break;
  7264  003B8E  D020               	goto	l10338
  7265  003B90                     l10328:
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;Setup_Time.c: 132: if (setup_year == 1) setup_year = 99;
  7269  003B90  0100               	movlb	0	; () banked
  7270  003B92  05B6               	decf	_setup_year& (0+255),w,b
  7271  003B94  A4D8               	btfss	status,2,c
  7272  003B96  D004               	goto	l10332
  7273                           
  7274                           ; BSR set to: 0
  7275  003B98  0E63               	movlw	99
  7276  003B9A  0100               	movlb	0	; () banked
  7277  003B9C  6FB6               	movwf	_setup_year& (0+255),b
  7278  003B9E  D018               	goto	l10338
  7279  003BA0                     l10332:
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;Setup_Time.c: 133: else --setup_year;
  7283  003BA0  0100               	movlb	0	; () banked
  7284  003BA2  07B6               	decf	_setup_year& (0+255),f,b
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;Setup_Time.c: 138: }
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;Setup_Time.c: 137: break;
  7291                           
  7292                           ;Setup_Time.c: 136: default:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;Setup_Time.c: 134: break;
  7296  003BA4  D015               	goto	l10338
  7297  003BA6                     l10336:
  7298  003BA6  0100               	movlb	0	; () banked
  7299  003BA8  51A6               	movf	_Select_Field& (0+255),w,b
  7300                           
  7301                           ; Switch size 1, requested type "space"
  7302                           ; Number of cases is 6, Range of values is 0 to 5
  7303                           ; switch strategies available:
  7304                           ; Name         Instructions Cycles
  7305                           ; simple_byte           19    10 (average)
  7306                           ;	Chosen strategy is simple_byte
  7307  003BAA  0A00               	xorlw	0	; case 0
  7308  003BAC  B4D8               	btfsc	status,2,c
  7309  003BAE  D7B9               	goto	l10298
  7310  003BB0  0A01               	xorlw	1	; case 1
  7311  003BB2  B4D8               	btfsc	status,2,c
  7312  003BB4  D7C1               	goto	l10304
  7313  003BB6  0A03               	xorlw	3	; case 2
  7314  003BB8  B4D8               	btfsc	status,2,c
  7315  003BBA  D7C9               	goto	l10310
  7316  003BBC  0A01               	xorlw	1	; case 3
  7317  003BBE  B4D8               	btfsc	status,2,c
  7318  003BC0  D7D1               	goto	l10316
  7319  003BC2  0A07               	xorlw	7	; case 4
  7320  003BC4  B4D8               	btfsc	status,2,c
  7321  003BC6  D7D9               	goto	l10322
  7322  003BC8  0A01               	xorlw	1	; case 5
  7323  003BCA  B4D8               	btfsc	status,2,c
  7324  003BCC  D7E1               	goto	l10328
  7325  003BCE  D000               	goto	l10338
  7326  003BD0                     l10338:
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;Setup_Time.c: 139: Update_Setup_Time_Screen();
  7330  003BD0  ECBA  F012         	call	_Update_Setup_Time_Screen	;wreg free
  7331  003BD4  0012               	return		;funcret
  7332  003BD6                     __end_of_Decrease_Time:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           postdec1	equ	0xFE5
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _Update_Setup_Time_Screen *****************
  7350 ;; Defined at:
  7351 ;;		line 191 in file "Setup_Time.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;		None               void
  7358 ;; Registers used:
  7359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        0 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:   10
  7372 ;; This function calls:
  7373 ;;		___awdiv
  7374 ;;		___awmod
  7375 ;;		_drawtext
  7376 ;; This function is called by:
  7377 ;;		_Do_Setup_Time
  7378 ;;		_Increase_Time
  7379 ;;		_Decrease_Time
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text29
  7384  002574                     __ptext29:
  7385                           	opt stack 0
  7386  002574                     _Update_Setup_Time_Screen:
  7387                           	opt stack 19
  7388                           
  7389                           ;Setup_Time.c: 193: setup_time[0] = (setup_hour/10) + '0';
  7390                           
  7391                           ;incstack = 0
  7392  002574  C0B2  F017         	movff	_setup_hour,___awdiv@dividend
  7393  002578  6A18               	clrf	___awdiv@dividend+1,c
  7394  00257A  0E00               	movlw	0
  7395  00257C  6E1A               	movwf	___awdiv@divisor+1,c
  7396  00257E  0E0A               	movlw	10
  7397  002580  6E19               	movwf	___awdiv@divisor,c
  7398  002582  EC2D  F01F         	call	___awdiv	;wreg free
  7399  002586  5017               	movf	?___awdiv,w,c
  7400  002588  0F30               	addlw	48
  7401  00258A  0101               	movlb	1	; () banked
  7402  00258C  6F5F               	movwf	_setup_time& (0+255),b
  7403                           
  7404                           ;Setup_Time.c: 194: setup_time[1] = (setup_hour%10)+ '0';
  7405  00258E  C0B2  F03D         	movff	_setup_hour,___awmod@dividend
  7406  002592  6A3E               	clrf	___awmod@dividend+1,c
  7407  002594  0E00               	movlw	0
  7408  002596  6E40               	movwf	___awmod@divisor+1,c
  7409  002598  0E0A               	movlw	10
  7410  00259A  6E3F               	movwf	___awmod@divisor,c
  7411  00259C  EC29  F021         	call	___awmod	;wreg free
  7412  0025A0  503D               	movf	?___awmod,w,c
  7413  0025A2  0F30               	addlw	48
  7414  0025A4  0101               	movlb	1	; () banked
  7415  0025A6  6F60               	movwf	(_setup_time+1)& (0+255),b
  7416                           
  7417                           ;Setup_Time.c: 195: setup_time[3] = (setup_minute/10) + '0';
  7418  0025A8  C0B3  F017         	movff	_setup_minute,___awdiv@dividend
  7419  0025AC  6A18               	clrf	___awdiv@dividend+1,c
  7420  0025AE  0E00               	movlw	0
  7421  0025B0  6E1A               	movwf	___awdiv@divisor+1,c
  7422  0025B2  0E0A               	movlw	10
  7423  0025B4  6E19               	movwf	___awdiv@divisor,c
  7424  0025B6  EC2D  F01F         	call	___awdiv	;wreg free
  7425  0025BA  5017               	movf	?___awdiv,w,c
  7426  0025BC  0F30               	addlw	48
  7427  0025BE  0101               	movlb	1	; () banked
  7428  0025C0  6F62               	movwf	(_setup_time+3)& (0+255),b
  7429                           
  7430                           ;Setup_Time.c: 196: setup_time[4] = (setup_minute%10) + '0';
  7431  0025C2  C0B3  F03D         	movff	_setup_minute,___awmod@dividend
  7432  0025C6  6A3E               	clrf	___awmod@dividend+1,c
  7433  0025C8  0E00               	movlw	0
  7434  0025CA  6E40               	movwf	___awmod@divisor+1,c
  7435  0025CC  0E0A               	movlw	10
  7436  0025CE  6E3F               	movwf	___awmod@divisor,c
  7437  0025D0  EC29  F021         	call	___awmod	;wreg free
  7438  0025D4  503D               	movf	?___awmod,w,c
  7439  0025D6  0F30               	addlw	48
  7440  0025D8  0101               	movlb	1	; () banked
  7441  0025DA  6F63               	movwf	(_setup_time+4)& (0+255),b
  7442                           
  7443                           ;Setup_Time.c: 197: setup_time[6] = (setup_second/10) + '0';
  7444  0025DC  C0B5  F017         	movff	_setup_second,___awdiv@dividend
  7445  0025E0  6A18               	clrf	___awdiv@dividend+1,c
  7446  0025E2  0E00               	movlw	0
  7447  0025E4  6E1A               	movwf	___awdiv@divisor+1,c
  7448  0025E6  0E0A               	movlw	10
  7449  0025E8  6E19               	movwf	___awdiv@divisor,c
  7450  0025EA  EC2D  F01F         	call	___awdiv	;wreg free
  7451  0025EE  5017               	movf	?___awdiv,w,c
  7452  0025F0  0F30               	addlw	48
  7453  0025F2  0101               	movlb	1	; () banked
  7454  0025F4  6F65               	movwf	(_setup_time+6)& (0+255),b
  7455                           
  7456                           ;Setup_Time.c: 198: setup_time[7] = (setup_second%10) + '0';
  7457  0025F6  C0B5  F03D         	movff	_setup_second,___awmod@dividend
  7458  0025FA  6A3E               	clrf	___awmod@dividend+1,c
  7459  0025FC  0E00               	movlw	0
  7460  0025FE  6E40               	movwf	___awmod@divisor+1,c
  7461  002600  0E0A               	movlw	10
  7462  002602  6E3F               	movwf	___awmod@divisor,c
  7463  002604  EC29  F021         	call	___awmod	;wreg free
  7464  002608  503D               	movf	?___awmod,w,c
  7465  00260A  0F30               	addlw	48
  7466  00260C  0101               	movlb	1	; () banked
  7467  00260E  6F66               	movwf	(_setup_time+7)& (0+255),b
  7468                           
  7469                           ;Setup_Time.c: 200: setup_date[0] = (setup_month/10) + '0';
  7470  002610  C0B4  F017         	movff	_setup_month,___awdiv@dividend
  7471  002614  6A18               	clrf	___awdiv@dividend+1,c
  7472  002616  0E00               	movlw	0
  7473  002618  6E1A               	movwf	___awdiv@divisor+1,c
  7474  00261A  0E0A               	movlw	10
  7475  00261C  6E19               	movwf	___awdiv@divisor,c
  7476  00261E  EC2D  F01F         	call	___awdiv	;wreg free
  7477  002622  5017               	movf	?___awdiv,w,c
  7478  002624  0F30               	addlw	48
  7479  002626  0101               	movlb	1	; () banked
  7480  002628  6F56               	movwf	_setup_date& (0+255),b
  7481                           
  7482                           ;Setup_Time.c: 201: setup_date[1] = (setup_month%10) + '0';
  7483  00262A  C0B4  F03D         	movff	_setup_month,___awmod@dividend
  7484  00262E  6A3E               	clrf	___awmod@dividend+1,c
  7485  002630  0E00               	movlw	0
  7486  002632  6E40               	movwf	___awmod@divisor+1,c
  7487  002634  0E0A               	movlw	10
  7488  002636  6E3F               	movwf	___awmod@divisor,c
  7489  002638  EC29  F021         	call	___awmod	;wreg free
  7490  00263C  503D               	movf	?___awmod,w,c
  7491  00263E  0F30               	addlw	48
  7492  002640  0101               	movlb	1	; () banked
  7493  002642  6F57               	movwf	(_setup_date+1)& (0+255),b
  7494                           
  7495                           ;Setup_Time.c: 202: setup_date[3] = (setup_day/10) + '0';
  7496  002644  C0B0  F017         	movff	_setup_day,___awdiv@dividend
  7497  002648  6A18               	clrf	___awdiv@dividend+1,c
  7498  00264A  0E00               	movlw	0
  7499  00264C  6E1A               	movwf	___awdiv@divisor+1,c
  7500  00264E  0E0A               	movlw	10
  7501  002650  6E19               	movwf	___awdiv@divisor,c
  7502  002652  EC2D  F01F         	call	___awdiv	;wreg free
  7503  002656  5017               	movf	?___awdiv,w,c
  7504  002658  0F30               	addlw	48
  7505  00265A  0101               	movlb	1	; () banked
  7506  00265C  6F59               	movwf	(_setup_date+3)& (0+255),b
  7507                           
  7508                           ;Setup_Time.c: 203: setup_date[4] = (setup_day%10) + '0';
  7509  00265E  C0B0  F03D         	movff	_setup_day,___awmod@dividend
  7510  002662  6A3E               	clrf	___awmod@dividend+1,c
  7511  002664  0E00               	movlw	0
  7512  002666  6E40               	movwf	___awmod@divisor+1,c
  7513  002668  0E0A               	movlw	10
  7514  00266A  6E3F               	movwf	___awmod@divisor,c
  7515  00266C  EC29  F021         	call	___awmod	;wreg free
  7516  002670  503D               	movf	?___awmod,w,c
  7517  002672  0F30               	addlw	48
  7518  002674  0101               	movlb	1	; () banked
  7519  002676  6F5A               	movwf	(_setup_date+4)& (0+255),b
  7520                           
  7521                           ;Setup_Time.c: 204: setup_date[6] = (setup_year/10) + '0';
  7522  002678  C0B6  F017         	movff	_setup_year,___awdiv@dividend
  7523  00267C  6A18               	clrf	___awdiv@dividend+1,c
  7524  00267E  0E00               	movlw	0
  7525  002680  6E1A               	movwf	___awdiv@divisor+1,c
  7526  002682  0E0A               	movlw	10
  7527  002684  6E19               	movwf	___awdiv@divisor,c
  7528  002686  EC2D  F01F         	call	___awdiv	;wreg free
  7529  00268A  5017               	movf	?___awdiv,w,c
  7530  00268C  0F30               	addlw	48
  7531  00268E  0101               	movlb	1	; () banked
  7532  002690  6F5C               	movwf	(_setup_date+6)& (0+255),b
  7533                           
  7534                           ;Setup_Time.c: 205: setup_date[7] = (setup_year%10) + '0';
  7535  002692  C0B6  F03D         	movff	_setup_year,___awmod@dividend
  7536  002696  6A3E               	clrf	___awmod@dividend+1,c
  7537  002698  0E00               	movlw	0
  7538  00269A  6E40               	movwf	___awmod@divisor+1,c
  7539  00269C  0E0A               	movlw	10
  7540  00269E  6E3F               	movwf	___awmod@divisor,c
  7541  0026A0  EC29  F021         	call	___awmod	;wreg free
  7542  0026A4  503D               	movf	?___awmod,w,c
  7543  0026A6  0F30               	addlw	48
  7544  0026A8  0101               	movlb	1	; () banked
  7545  0026AA  6F5D               	movwf	(_setup_date+7)& (0+255),b
  7546                           
  7547                           ; BSR set to: 1
  7548                           ;Setup_Time.c: 207: drawtext(15, 52, setup_time, 0xFFE0, 0x0000, 2);
  7549  0026AC  0E34               	movlw	52
  7550  0026AE  6E39               	movwf	drawtext@y,c
  7551  0026B0  0E5F               	movlw	low _setup_time
  7552  0026B2  6E3A               	movwf	drawtext@_text,c
  7553  0026B4  0E01               	movlw	high _setup_time
  7554  0026B6  6E3B               	movwf	drawtext@_text+1,c
  7555  0026B8  0EFF               	movlw	255
  7556  0026BA  6E3D               	movwf	drawtext@color+1,c
  7557  0026BC  0EE0               	movlw	224
  7558  0026BE  6E3C               	movwf	drawtext@color,c
  7559  0026C0  0E00               	movlw	0
  7560  0026C2  6E3F               	movwf	drawtext@bg+1,c
  7561  0026C4  0E00               	movlw	0
  7562  0026C6  6E3E               	movwf	drawtext@bg,c
  7563  0026C8  0E02               	movlw	2
  7564  0026CA  6E40               	movwf	drawtext@size,c
  7565  0026CC  0E0F               	movlw	15
  7566  0026CE  ECC7  F01A         	call	_drawtext
  7567                           
  7568                           ;Setup_Time.c: 208: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7569  0026D2  0E52               	movlw	82
  7570  0026D4  6E39               	movwf	drawtext@y,c
  7571  0026D6  0E56               	movlw	low _setup_date
  7572  0026D8  6E3A               	movwf	drawtext@_text,c
  7573  0026DA  0E01               	movlw	high _setup_date
  7574  0026DC  6E3B               	movwf	drawtext@_text+1,c
  7575  0026DE  0E07               	movlw	7
  7576  0026E0  6E3D               	movwf	drawtext@color+1,c
  7577  0026E2  0EE0               	movlw	224
  7578  0026E4  6E3C               	movwf	drawtext@color,c
  7579  0026E6  0E00               	movlw	0
  7580  0026E8  6E3F               	movwf	drawtext@bg+1,c
  7581  0026EA  0E00               	movlw	0
  7582  0026EC  6E3E               	movwf	drawtext@bg,c
  7583  0026EE  0E02               	movlw	2
  7584  0026F0  6E40               	movwf	drawtext@size,c
  7585  0026F2  0E0F               	movlw	15
  7586  0026F4  ECC7  F01A         	call	_drawtext
  7587  0026F8  0012               	return		;funcret
  7588  0026FA                     __end_of_Update_Setup_Time_Screen:
  7589                           	opt stack 0
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           postinc0	equ	0xFEE
  7597                           wreg	equ	0xFE8
  7598                           postdec1	equ	0xFE5
  7599                           fsr1l	equ	0xFE1
  7600                           indf2	equ	0xFDF
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8
  7604                           
  7605 ;; *************** function _Do_Setup_Heater_Temp *****************
  7606 ;; Defined at:
  7607 ;;		line 24 in file "Setup_Heater_Temp.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  2  382[None  ] int 
  7614 ;; Registers used:
  7615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;Total ram usage:        2 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:   12
  7628 ;; This function calls:
  7629 ;;		_Decrease_Heater_Temp
  7630 ;;		_Do_Beep_Bad
  7631 ;;		_Do_Beep_Good
  7632 ;;		_Do_Save_New_Heater_Temp
  7633 ;;		_Exit_Setup_Heater_Temp
  7634 ;;		_Increase_Heater_Temp
  7635 ;;		_Initialize_Setup_Heater_Screen
  7636 ;;		_Update_Setup_Heater_Screen
  7637 ;;		_check_for_button_input
  7638 ;; This function is called by:
  7639 ;;		_main
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text30
  7644  003F86                     __ptext30:
  7645                           	opt stack 0
  7646  003F86                     _Do_Setup_Heater_Temp:
  7647                           	opt stack 18
  7648                           
  7649                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  7650                           
  7651                           ;incstack = 0
  7652  003F86  0E01               	movlw	1
  7653  003F88  0100               	movlb	0	; () banked
  7654  003F8A  6FA1               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  7658  003F8C  C0B7  F0B1         	movff	_heater_set_temp,_setup_heater_set_temp
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  7662  003F90  EC80  F018         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7663                           
  7664                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  7665  003F94  ECE2  F01E         	call	_Update_Setup_Heater_Screen	;wreg free
  7666                           
  7667                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  7668  003F98  D03B               	goto	l10786
  7669  003F9A                     l10756:
  7670                           
  7671                           ;Setup_Heater_Temp.c: 33: {
  7672                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  7673  003F9A  0E01               	movlw	1
  7674  003F9C  0100               	movlb	0	; () banked
  7675  003F9E  6FF0               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7676  003FA0  0E00               	movlw	0
  7677  003FA2  0100               	movlb	0	; () banked
  7678  003FA4  6FF1               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7679  003FA6  EC0D  F020         	call	_check_for_button_input	;wreg free
  7680  003FAA  0100               	movlb	0	; () banked
  7681  003FAC  19F0               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7682  003FAE  11F1               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7683  003FB0  A4D8               	btfss	status,2,c
  7684  003FB2  D02E               	goto	l10786
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;Setup_Heater_Temp.c: 35: {
  7688                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  7689  003FB4  0E00               	movlw	0
  7690  003FB6  0100               	movlb	0	; () banked
  7691  003FB8  6F98               	movwf	(_nec_ok+1)& (0+255),b
  7692  003FBA  0E00               	movlw	0
  7693  003FBC  6F97               	movwf	_nec_ok& (0+255),b
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  7697  003FBE  0E04               	movlw	4
  7698  003FC0  6469               	cpfsgt	_found,c
  7699  003FC2  D023               	goto	l10784
  7700                           
  7701                           ; BSR set to: 0
  7702  003FC4  0E09               	movlw	9
  7703  003FC6  6069               	cpfslt	_found,c
  7704  003FC8  D020               	goto	l10784
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;Setup_Heater_Temp.c: 38: {
  7708                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  7709  003FCA  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  7710                           
  7711                           ;Setup_Heater_Temp.c: 40: if (found == 5) Do_Save_New_Heater_Temp();
  7712  003FCE  0E05               	movlw	5
  7713  003FD0  1869               	xorwf	_found,w,c
  7714  003FD2  A4D8               	btfss	status,2,c
  7715  003FD4  D003               	goto	l10770
  7716  003FD6  EC23  F028         	call	_Do_Save_New_Heater_Temp	;wreg free
  7717  003FDA  D000               	goto	l10770
  7718  003FDC                     l10770:
  7719                           
  7720                           ;Setup_Heater_Temp.c: 41: if (found == 6) Decrease_Heater_Temp();
  7721  003FDC  0E06               	movlw	6
  7722  003FDE  1869               	xorwf	_found,w,c
  7723  003FE0  A4D8               	btfss	status,2,c
  7724  003FE2  D003               	goto	l10774
  7725  003FE4  ECDD  F027         	call	_Decrease_Heater_Temp	;wreg free
  7726  003FE8  D000               	goto	l10774
  7727  003FEA                     l10774:
  7728                           
  7729                           ;Setup_Heater_Temp.c: 42: if (found == 7) Increase_Heater_Temp();
  7730  003FEA  0E07               	movlw	7
  7731  003FEC  1869               	xorwf	_found,w,c
  7732  003FEE  A4D8               	btfss	status,2,c
  7733  003FF0  D003               	goto	l10778
  7734  003FF2  ECD0  F027         	call	_Increase_Heater_Temp	;wreg free
  7735  003FF6  D000               	goto	l10778
  7736  003FF8                     l10778:
  7737                           
  7738                           ;Setup_Heater_Temp.c: 43: if (found == 8) Exit_Setup_Heater_Temp();
  7739  003FF8  0E08               	movlw	8
  7740  003FFA  1869               	xorwf	_found,w,c
  7741  003FFC  A4D8               	btfss	status,2,c
  7742  003FFE  D003               	goto	l10782
  7743  004000  ECA5  F028         	call	_Exit_Setup_Heater_Temp	;wreg free
  7744  004004  D000               	goto	l10782
  7745  004006                     l10782:
  7746                           
  7747                           ;Setup_Heater_Temp.c: 44: found = 0xff;
  7748  004006  6869               	setf	_found,c
  7749                           
  7750                           ;Setup_Heater_Temp.c: 45: }
  7751  004008  D003               	goto	l10786
  7752  00400A                     l10784:
  7753                           
  7754                           ;Setup_Heater_Temp.c: 46: else
  7755                           ;Setup_Heater_Temp.c: 47: {
  7756                           ;Setup_Heater_Temp.c: 48: Do_Beep_Bad();
  7757  00400A  EC37  F028         	call	_Do_Beep_Bad	;wreg free
  7758  00400E  D000               	goto	l10786
  7759  004010                     l10786:
  7760  004010  0100               	movlb	0	; () banked
  7761  004012  05A1               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  7762  004014  B4D8               	btfsc	status,2,c
  7763  004016  D7C1               	goto	l10756
  7764                           
  7765                           ; BSR set to: 0
  7766                           
  7767                           ; BSR set to: 0
  7768  004018  0012               	return		;funcret
  7769  00401A                     __end_of_Do_Setup_Heater_Temp:
  7770                           	opt stack 0
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodh	equ	0xFF4
  7776                           prodl	equ	0xFF3
  7777                           postinc0	equ	0xFEE
  7778                           wreg	equ	0xFE8
  7779                           postdec1	equ	0xFE5
  7780                           fsr1l	equ	0xFE1
  7781                           indf2	equ	0xFDF
  7782                           fsr2h	equ	0xFDA
  7783                           fsr2l	equ	0xFD9
  7784                           status	equ	0xFD8
  7785                           
  7786 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7787 ;; Defined at:
  7788 ;;		line 84 in file "Setup_Heater_Temp.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:   10
  7809 ;; This function calls:
  7810 ;;		_drawtext
  7811 ;;		_fillScreen
  7812 ;;		_strcpy
  7813 ;; This function is called by:
  7814 ;;		_Do_Setup_Heater_Temp
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text31
  7819  003100                     __ptext31:
  7820                           	opt stack 0
  7821  003100                     _Initialize_Setup_Heater_Screen:
  7822                           	opt stack 19
  7823                           
  7824                           ;Setup_Heater_Temp.c: 86: fillScreen(0x0000);
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;incstack = 0
  7828  003100  0E00               	movlw	0
  7829  003102  6E25               	movwf	fillScreen@color+1,c
  7830  003104  0E00               	movlw	0
  7831  003106  6E24               	movwf	fillScreen@color,c
  7832  003108  ECB4  F027         	call	_fillScreen	;wreg free
  7833                           
  7834                           ;Setup_Heater_Temp.c: 88: strcpy(txt, "ECE3301L Fa'22 S1\0");
  7835  00310C  C062  F011         	movff	_txt,strcpy@to
  7836  003110  C063  F012         	movff	_txt+1,strcpy@to+1
  7837  003114  0E1D               	movlw	low STR_6
  7838  003116  6E13               	movwf	strcpy@from,c
  7839  003118  0EFF               	movlw	high STR_6
  7840  00311A  6E14               	movwf	strcpy@from+1,c
  7841  00311C  EC51  F026         	call	_strcpy	;wreg free
  7842                           
  7843                           ;Setup_Heater_Temp.c: 89: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7844  003120  0E01               	movlw	1
  7845  003122  6E39               	movwf	drawtext@y,c
  7846  003124  C062  F03A         	movff	_txt,drawtext@_text
  7847  003128  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7848  00312C  0EFF               	movlw	255
  7849  00312E  6E3D               	movwf	drawtext@color+1,c
  7850  003130  683C               	setf	drawtext@color,c
  7851  003132  0E00               	movlw	0
  7852  003134  6E3F               	movwf	drawtext@bg+1,c
  7853  003136  0E00               	movlw	0
  7854  003138  6E3E               	movwf	drawtext@bg,c
  7855  00313A  0E01               	movlw	1
  7856  00313C  6E40               	movwf	drawtext@size,c
  7857  00313E  0E01               	movlw	1
  7858  003140  ECC7  F01A         	call	_drawtext
  7859                           
  7860                           ;Setup_Heater_Temp.c: 91: strcpy(txt, "  Heater\0 ");
  7861  003144  C062  F011         	movff	_txt,strcpy@to
  7862  003148  C063  F012         	movff	_txt+1,strcpy@to+1
  7863  00314C  0E89               	movlw	low STR_30
  7864  00314E  6E13               	movwf	strcpy@from,c
  7865  003150  0EFF               	movlw	high STR_30
  7866  003152  6E14               	movwf	strcpy@from+1,c
  7867  003154  EC51  F026         	call	_strcpy	;wreg free
  7868                           
  7869                           ;Setup_Heater_Temp.c: 92: drawtext(1 , 1+25, txt, 0x07FF, 0x0000, 2);
  7870  003158  0E1A               	movlw	26
  7871  00315A  6E39               	movwf	drawtext@y,c
  7872  00315C  C062  F03A         	movff	_txt,drawtext@_text
  7873  003160  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7874  003164  0E07               	movlw	7
  7875  003166  6E3D               	movwf	drawtext@color+1,c
  7876  003168  683C               	setf	drawtext@color,c
  7877  00316A  0E00               	movlw	0
  7878  00316C  6E3F               	movwf	drawtext@bg+1,c
  7879  00316E  0E00               	movlw	0
  7880  003170  6E3E               	movwf	drawtext@bg,c
  7881  003172  0E02               	movlw	2
  7882  003174  6E40               	movwf	drawtext@size,c
  7883  003176  0E01               	movlw	1
  7884  003178  ECC7  F01A         	call	_drawtext
  7885                           
  7886                           ;Setup_Heater_Temp.c: 93: strcpy(txt, "  Setup\0 ");
  7887  00317C  C062  F011         	movff	_txt,strcpy@to
  7888  003180  C063  F012         	movff	_txt+1,strcpy@to+1
  7889  003184  0EB5               	movlw	low STR_31
  7890  003186  6E13               	movwf	strcpy@from,c
  7891  003188  0EFF               	movlw	high STR_31
  7892  00318A  6E14               	movwf	strcpy@from+1,c
  7893  00318C  EC51  F026         	call	_strcpy	;wreg free
  7894                           
  7895                           ;Setup_Heater_Temp.c: 94: drawtext(1 , 1+40, txt, 0x07FF, 0x0000, 2);
  7896  003190  0E29               	movlw	41
  7897  003192  6E39               	movwf	drawtext@y,c
  7898  003194  C062  F03A         	movff	_txt,drawtext@_text
  7899  003198  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7900  00319C  0E07               	movlw	7
  7901  00319E  6E3D               	movwf	drawtext@color+1,c
  7902  0031A0  683C               	setf	drawtext@color,c
  7903  0031A2  0E00               	movlw	0
  7904  0031A4  6E3F               	movwf	drawtext@bg+1,c
  7905  0031A6  0E00               	movlw	0
  7906  0031A8  6E3E               	movwf	drawtext@bg,c
  7907  0031AA  0E02               	movlw	2
  7908  0031AC  6E40               	movwf	drawtext@size,c
  7909  0031AE  0E01               	movlw	1
  7910  0031B0  ECC7  F01A         	call	_drawtext
  7911                           
  7912                           ;Setup_Heater_Temp.c: 95: strcpy(txt, "Set Heater Temp");
  7913  0031B4  C062  F011         	movff	_txt,strcpy@to
  7914  0031B8  C063  F012         	movff	_txt+1,strcpy@to+1
  7915  0031BC  0E53               	movlw	low STR_32
  7916  0031BE  6E13               	movwf	strcpy@from,c
  7917  0031C0  0EFF               	movlw	high STR_32
  7918  0031C2  6E14               	movwf	strcpy@from+1,c
  7919  0031C4  EC51  F026         	call	_strcpy	;wreg free
  7920                           
  7921                           ;Setup_Heater_Temp.c: 96: drawtext(15 , 60, txt, 0xFFE0 , 0x0000, 1);
  7922  0031C8  0E3C               	movlw	60
  7923  0031CA  6E39               	movwf	drawtext@y,c
  7924  0031CC  C062  F03A         	movff	_txt,drawtext@_text
  7925  0031D0  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7926  0031D4  0EFF               	movlw	255
  7927  0031D6  6E3D               	movwf	drawtext@color+1,c
  7928  0031D8  0EE0               	movlw	224
  7929  0031DA  6E3C               	movwf	drawtext@color,c
  7930  0031DC  0E00               	movlw	0
  7931  0031DE  6E3F               	movwf	drawtext@bg+1,c
  7932  0031E0  0E00               	movlw	0
  7933  0031E2  6E3E               	movwf	drawtext@bg,c
  7934  0031E4  0E01               	movlw	1
  7935  0031E6  6E40               	movwf	drawtext@size,c
  7936  0031E8  0E0F               	movlw	15
  7937  0031EA  ECC7  F01A         	call	_drawtext
  7938  0031EE  0012               	return		;funcret
  7939  0031F0                     __end_of_Initialize_Setup_Heater_Screen:
  7940                           	opt stack 0
  7941                           tblptru	equ	0xFF8
  7942                           tblptrh	equ	0xFF7
  7943                           tblptrl	equ	0xFF6
  7944                           tablat	equ	0xFF5
  7945                           prodh	equ	0xFF4
  7946                           prodl	equ	0xFF3
  7947                           postinc0	equ	0xFEE
  7948                           wreg	equ	0xFE8
  7949                           postdec1	equ	0xFE5
  7950                           fsr1l	equ	0xFE1
  7951                           indf2	equ	0xFDF
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _Increase_Heater_Temp *****************
  7957 ;; Defined at:
  7958 ;;		line 54 in file "Setup_Heater_Temp.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;		None               void
  7965 ;; Registers used:
  7966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:   11
  7979 ;; This function calls:
  7980 ;;		_Update_Setup_Heater_Screen
  7981 ;; This function is called by:
  7982 ;;		_Do_Setup_Heater_Temp
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text32
  7987  004FA0                     __ptext32:
  7988                           	opt stack 0
  7989  004FA0                     _Increase_Heater_Temp:
  7990                           	opt stack 18
  7991                           
  7992                           ;Setup_Heater_Temp.c: 56: setup_heater_set_temp++;
  7993                           
  7994                           ;incstack = 0
  7995  004FA0  0100               	movlb	0	; () banked
  7996  004FA2  2BB1               	incf	_setup_heater_set_temp& (0+255),f,b
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;Setup_Heater_Temp.c: 57: if (setup_heater_set_temp > 120) setup_heater_set_temp = 120;
  8000  004FA4  0E78               	movlw	120
  8001  004FA6  0100               	movlb	0	; () banked
  8002  004FA8  65B1               	cpfsgt	_setup_heater_set_temp& (0+255),b
  8003  004FAA  D004               	goto	l10264
  8004                           
  8005                           ; BSR set to: 0
  8006  004FAC  0E78               	movlw	120
  8007  004FAE  0100               	movlb	0	; () banked
  8008  004FB0  6FB1               	movwf	_setup_heater_set_temp& (0+255),b
  8009  004FB2  D000               	goto	l10264
  8010  004FB4                     l10264:
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;Setup_Heater_Temp.c: 58: Update_Setup_Heater_Screen();
  8014  004FB4  ECE2  F01E         	call	_Update_Setup_Heater_Screen	;wreg free
  8015  004FB8  0012               	return		;funcret
  8016  004FBA                     __end_of_Increase_Heater_Temp:
  8017                           	opt stack 0
  8018                           tblptru	equ	0xFF8
  8019                           tblptrh	equ	0xFF7
  8020                           tblptrl	equ	0xFF6
  8021                           tablat	equ	0xFF5
  8022                           prodh	equ	0xFF4
  8023                           prodl	equ	0xFF3
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           postdec1	equ	0xFE5
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           fsr2h	equ	0xFDA
  8030                           fsr2l	equ	0xFD9
  8031                           status	equ	0xFD8
  8032                           
  8033 ;; *************** function _Exit_Setup_Heater_Temp *****************
  8034 ;; Defined at:
  8035 ;;		line 69 in file "Setup_Heater_Temp.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;		None
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;		None
  8040 ;; Return value:  Size  Location     Type
  8041 ;;		None               void
  8042 ;; Registers used:
  8043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;Total ram usage:        0 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:   11
  8056 ;; This function calls:
  8057 ;;		_DS3231_Read_Time
  8058 ;;		_Initialize_Screen
  8059 ;; This function is called by:
  8060 ;;		_Do_Setup_Heater_Temp
  8061 ;; This function uses a non-reentrant model
  8062 ;;
  8063                           
  8064                           	psect	text33
  8065  00514A                     __ptext33:
  8066                           	opt stack 0
  8067  00514A                     _Exit_Setup_Heater_Temp:
  8068                           	opt stack 18
  8069                           
  8070                           ;Setup_Heater_Temp.c: 71: DS3231_Read_Time();
  8071                           
  8072                           ;incstack = 0
  8073  00514A  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  8074                           
  8075                           ;Setup_Heater_Temp.c: 72: Initialize_Screen();
  8076  00514E  EC31  F00B         	call	_Initialize_Screen	;wreg free
  8077                           
  8078                           ;Setup_Heater_Temp.c: 73: In_Heater_Temp_Setup = 0;
  8079  005152  0E00               	movlw	0
  8080  005154  0100               	movlb	0	; () banked
  8081  005156  6FA1               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8082                           
  8083                           ; BSR set to: 0
  8084  005158  0012               	return		;funcret
  8085  00515A                     __end_of_Exit_Setup_Heater_Temp:
  8086                           	opt stack 0
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           fsr2h	equ	0xFDA
  8099                           fsr2l	equ	0xFD9
  8100                           status	equ	0xFD8
  8101                           
  8102 ;; *************** function _Do_Save_New_Heater_Temp *****************
  8103 ;; Defined at:
  8104 ;;		line 76 in file "Setup_Heater_Temp.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;		None
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;		None
  8109 ;; Return value:  Size  Location     Type
  8110 ;;		None               void
  8111 ;; Registers used:
  8112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;Total ram usage:        0 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:   11
  8125 ;; This function calls:
  8126 ;;		_DS3231_Read_Time
  8127 ;;		_Initialize_Screen
  8128 ;; This function is called by:
  8129 ;;		_Do_Setup_Heater_Temp
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text34
  8134  005046                     __ptext34:
  8135                           	opt stack 0
  8136  005046                     _Do_Save_New_Heater_Temp:
  8137                           	opt stack 18
  8138                           
  8139                           ;Setup_Heater_Temp.c: 78: heater_set_temp = setup_heater_set_temp;
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;incstack = 0
  8143  005046  C0B1  F0B7         	movff	_setup_heater_set_temp,_heater_set_temp
  8144                           
  8145                           ;Setup_Heater_Temp.c: 79: DS3231_Read_Time();
  8146  00504A  EC94  F022         	call	_DS3231_Read_Time	;wreg free
  8147                           
  8148                           ;Setup_Heater_Temp.c: 80: Initialize_Screen();
  8149  00504E  EC31  F00B         	call	_Initialize_Screen	;wreg free
  8150                           
  8151                           ;Setup_Heater_Temp.c: 81: In_Heater_Temp_Setup = 0;
  8152  005052  0E00               	movlw	0
  8153  005054  0100               	movlb	0	; () banked
  8154  005056  6FA1               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157  005058  0012               	return		;funcret
  8158  00505A                     __end_of_Do_Save_New_Heater_Temp:
  8159                           	opt stack 0
  8160                           tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           postinc0	equ	0xFEE
  8167                           wreg	equ	0xFE8
  8168                           postdec1	equ	0xFE5
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function _Decrease_Heater_Temp *****************
  8176 ;; Defined at:
  8177 ;;		line 62 in file "Setup_Heater_Temp.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;		None
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;		None               void
  8184 ;; Registers used:
  8185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;Total ram usage:        0 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; Hardware stack levels required when called:   11
  8198 ;; This function calls:
  8199 ;;		_Update_Setup_Heater_Screen
  8200 ;; This function is called by:
  8201 ;;		_Do_Setup_Heater_Temp
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text35
  8206  004FBA                     __ptext35:
  8207                           	opt stack 0
  8208  004FBA                     _Decrease_Heater_Temp:
  8209                           	opt stack 18
  8210                           
  8211                           ;Setup_Heater_Temp.c: 64: --setup_heater_set_temp;
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;incstack = 0
  8215  004FBA  0100               	movlb	0	; () banked
  8216  004FBC  07B1               	decf	_setup_heater_set_temp& (0+255),f,b
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;Setup_Heater_Temp.c: 65: if (setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  8220  004FBE  0E32               	movlw	50
  8221  004FC0  0100               	movlb	0	; () banked
  8222  004FC2  61B1               	cpfslt	_setup_heater_set_temp& (0+255),b
  8223  004FC4  D004               	goto	l10256
  8224                           
  8225                           ; BSR set to: 0
  8226  004FC6  0E32               	movlw	50
  8227  004FC8  0100               	movlb	0	; () banked
  8228  004FCA  6FB1               	movwf	_setup_heater_set_temp& (0+255),b
  8229  004FCC  D000               	goto	l10256
  8230  004FCE                     l10256:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;Setup_Heater_Temp.c: 66: Update_Setup_Heater_Screen();
  8234  004FCE  ECE2  F01E         	call	_Update_Setup_Heater_Screen	;wreg free
  8235  004FD2  0012               	return		;funcret
  8236  004FD4                     __end_of_Decrease_Heater_Temp:
  8237                           	opt stack 0
  8238                           tblptru	equ	0xFF8
  8239                           tblptrh	equ	0xFF7
  8240                           tblptrl	equ	0xFF6
  8241                           tablat	equ	0xFF5
  8242                           prodh	equ	0xFF4
  8243                           prodl	equ	0xFF3
  8244                           postinc0	equ	0xFEE
  8245                           wreg	equ	0xFE8
  8246                           postdec1	equ	0xFE5
  8247                           fsr1l	equ	0xFE1
  8248                           indf2	equ	0xFDF
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function _Update_Setup_Heater_Screen *****************
  8254 ;; Defined at:
  8255 ;;		line 99 in file "Setup_Heater_Temp.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;  dc_char3        1   75[COMRAM] unsigned char 
  8260 ;;  dc_char2        1   74[COMRAM] unsigned char 
  8261 ;;  dc_char1        1   73[COMRAM] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;		None               void
  8264 ;; Registers used:
  8265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8272 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8275 ;;Total ram usage:        3 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:   10
  8278 ;; This function calls:
  8279 ;;		___awdiv
  8280 ;;		___awmod
  8281 ;;		_drawtext
  8282 ;; This function is called by:
  8283 ;;		_Do_Setup_Heater_Temp
  8284 ;;		_Increase_Heater_Temp
  8285 ;;		_Decrease_Heater_Temp
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text36
  8290  003DC4                     __ptext36:
  8291                           	opt stack 0
  8292  003DC4                     _Update_Setup_Heater_Screen:
  8293                           	opt stack 19
  8294                           
  8295                           ;Setup_Heater_Temp.c: 101: char dc_char1 = setup_heater_set_temp/100;
  8296                           
  8297                           ;incstack = 0
  8298  003DC4  C0B1  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8299  003DC8  6A18               	clrf	___awdiv@dividend+1,c
  8300  003DCA  0E00               	movlw	0
  8301  003DCC  6E1A               	movwf	___awdiv@divisor+1,c
  8302  003DCE  0E64               	movlw	100
  8303  003DD0  6E19               	movwf	___awdiv@divisor,c
  8304  003DD2  EC2D  F01F         	call	___awdiv	;wreg free
  8305  003DD6  5017               	movf	?___awdiv,w,c
  8306  003DD8  6E4A               	movwf	Update_Setup_Heater_Screen@dc_char1,c
  8307                           
  8308                           ;Setup_Heater_Temp.c: 102: char dc_char2 = ((setup_heater_set_temp/10) % 10);
  8309  003DDA  0E00               	movlw	0
  8310  003DDC  6E1A               	movwf	___awdiv@divisor+1,c
  8311  003DDE  0E0A               	movlw	10
  8312  003DE0  6E19               	movwf	___awdiv@divisor,c
  8313  003DE2  C0B1  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8314  003DE6  6A18               	clrf	___awdiv@dividend+1,c
  8315  003DE8  EC2D  F01F         	call	___awdiv	;wreg free
  8316  003DEC  C017  F03D         	movff	?___awdiv,___awmod@dividend
  8317  003DF0  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  8318  003DF4  0E00               	movlw	0
  8319  003DF6  6E40               	movwf	___awmod@divisor+1,c
  8320  003DF8  0E0A               	movlw	10
  8321  003DFA  6E3F               	movwf	___awmod@divisor,c
  8322  003DFC  EC29  F021         	call	___awmod	;wreg free
  8323  003E00  503D               	movf	?___awmod,w,c
  8324  003E02  6E4B               	movwf	Update_Setup_Heater_Screen@dc_char2,c
  8325                           
  8326                           ;Setup_Heater_Temp.c: 103: char dc_char3 = setup_heater_set_temp % 10;
  8327  003E04  C0B1  F03D         	movff	_setup_heater_set_temp,___awmod@dividend
  8328  003E08  6A3E               	clrf	___awmod@dividend+1,c
  8329  003E0A  0E00               	movlw	0
  8330  003E0C  6E40               	movwf	___awmod@divisor+1,c
  8331  003E0E  0E0A               	movlw	10
  8332  003E10  6E3F               	movwf	___awmod@divisor,c
  8333  003E12  EC29  F021         	call	___awmod	;wreg free
  8334  003E16  503D               	movf	?___awmod,w,c
  8335  003E18  6E4C               	movwf	Update_Setup_Heater_Screen@dc_char3,c
  8336                           
  8337                           ;Setup_Heater_Temp.c: 104: setup_heater_set_text[0] = dc_char1 + '0';
  8338  003E1A  504A               	movf	Update_Setup_Heater_Screen@dc_char1,w,c
  8339  003E1C  0F30               	addlw	48
  8340  003E1E  0101               	movlb	1	; () banked
  8341  003E20  6F77               	movwf	_setup_heater_set_text& (0+255),b
  8342                           
  8343                           ; BSR set to: 1
  8344                           ;Setup_Heater_Temp.c: 105: setup_heater_set_text[1] = dc_char2 + '0';
  8345  003E22  504B               	movf	Update_Setup_Heater_Screen@dc_char2,w,c
  8346  003E24  0F30               	addlw	48
  8347  003E26  0101               	movlb	1	; () banked
  8348  003E28  6F78               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8349                           
  8350                           ; BSR set to: 1
  8351                           ;Setup_Heater_Temp.c: 106: setup_heater_set_text[2] = dc_char3 + '0';
  8352  003E2A  504C               	movf	Update_Setup_Heater_Screen@dc_char3,w,c
  8353  003E2C  0F30               	addlw	48
  8354  003E2E  0101               	movlb	1	; () banked
  8355  003E30  6F79               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8356                           
  8357                           ; BSR set to: 1
  8358                           ;Setup_Heater_Temp.c: 107: drawtext(40, 74 ,setup_heater_set_text, 0x001F, 0x0000, 2);
  8359  003E32  0E4A               	movlw	74
  8360  003E34  6E39               	movwf	drawtext@y,c
  8361  003E36  0E77               	movlw	low _setup_heater_set_text
  8362  003E38  6E3A               	movwf	drawtext@_text,c
  8363  003E3A  0E01               	movlw	high _setup_heater_set_text
  8364  003E3C  6E3B               	movwf	drawtext@_text+1,c
  8365  003E3E  0E00               	movlw	0
  8366  003E40  6E3D               	movwf	drawtext@color+1,c
  8367  003E42  0E1F               	movlw	31
  8368  003E44  6E3C               	movwf	drawtext@color,c
  8369  003E46  0E00               	movlw	0
  8370  003E48  6E3F               	movwf	drawtext@bg+1,c
  8371  003E4A  0E00               	movlw	0
  8372  003E4C  6E3E               	movwf	drawtext@bg,c
  8373  003E4E  0E02               	movlw	2
  8374  003E50  6E40               	movwf	drawtext@size,c
  8375  003E52  0E28               	movlw	40
  8376  003E54  ECC7  F01A         	call	_drawtext
  8377  003E58  0012               	return		;funcret
  8378  003E5A                     __end_of_Update_Setup_Heater_Screen:
  8379                           	opt stack 0
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           postinc0	equ	0xFEE
  8387                           wreg	equ	0xFE8
  8388                           postdec1	equ	0xFE5
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _Do_Setup_Alarm_Time *****************
  8396 ;; Defined at:
  8397 ;;		line 24 in file "Setup_Alarm_Time.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  2  380[None  ] int 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;Total ram usage:        0 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:   12
  8418 ;; This function calls:
  8419 ;;		_DS3231_Read_Alarm_Time
  8420 ;;		_Decrease_Alarm_Time
  8421 ;;		_Do_Beep_Bad
  8422 ;;		_Do_Beep_Good
  8423 ;;		_Do_Save_New_Alarm_Time
  8424 ;;		_Exit_Setup_Alarm_Time
  8425 ;;		_Go_Next_Alarm_Field
  8426 ;;		_Go_Prev_Alarm_Field
  8427 ;;		_Increase_Alarm_Time
  8428 ;;		_Initialize_Setup_Alarm_Time_Screen
  8429 ;;		_Update_Setup_Alarm_Time_Screen
  8430 ;;		_bcd_2_dec
  8431 ;;		_check_for_button_input
  8432 ;; This function is called by:
  8433 ;;		_main
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text37
  8438  0039AA                     __ptext37:
  8439                           	opt stack 0
  8440  0039AA                     _Do_Setup_Alarm_Time:
  8441                           	opt stack 18
  8442                           
  8443                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8444                           
  8445                           ;incstack = 0
  8446  0039AA  0E00               	movlw	0
  8447  0039AC  0100               	movlb	0	; () banked
  8448  0039AE  6FA5               	movwf	_Select_Alarm_Field& (0+255),b
  8449                           
  8450                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8451  0039B0  0E01               	movlw	1
  8452  0039B2  0100               	movlb	0	; () banked
  8453  0039B4  6FA0               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8457  0039B6  ECB7  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
  8458                           
  8459                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8460  0039BA  5066               	movf	_alarm_second,w,c
  8461  0039BC  ECAF  F026         	call	_bcd_2_dec
  8462  0039C0  6E66               	movwf	_alarm_second,c
  8463                           
  8464                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8465  0039C2  5065               	movf	_alarm_minute,w,c
  8466  0039C4  ECAF  F026         	call	_bcd_2_dec
  8467  0039C8  6E65               	movwf	_alarm_minute,c
  8468                           
  8469                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8470  0039CA  5064               	movf	_alarm_hour,w,c
  8471  0039CC  ECAF  F026         	call	_bcd_2_dec
  8472  0039D0  6E64               	movwf	_alarm_hour,c
  8473                           
  8474                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8475  0039D2  C066  F0AF         	movff	_alarm_second,_setup_alarm_second
  8476                           
  8477                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8478  0039D6  C065  F0AE         	movff	_alarm_minute,_setup_alarm_minute
  8479                           
  8480                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8481  0039DA  C064  F06E         	movff	_alarm_hour,_setup_alarm_hour
  8482                           
  8483                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8484  0039DE  EC7F  F016         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8485                           
  8486                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8487  0039E2  ECF8  F018         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8488                           
  8489                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8490  0039E6  D03C               	goto	l10746
  8491  0039E8                     l10710:
  8492                           
  8493                           ;Setup_Alarm_Time.c: 38: {
  8494                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8495  0039E8  EC0D  F020         	call	_check_for_button_input	;wreg free
  8496  0039EC  06E8               	decf	wreg,f,c
  8497  0039EE  A4D8               	btfss	status,2,c
  8498  0039F0  D037               	goto	l10746
  8499                           
  8500                           ;Setup_Alarm_Time.c: 40: {
  8501                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8502  0039F2  0E02               	movlw	2
  8503  0039F4  6469               	cpfsgt	_found,c
  8504  0039F6  D031               	goto	l10744
  8505  0039F8  0E09               	movlw	9
  8506  0039FA  6069               	cpfslt	_found,c
  8507  0039FC  D02E               	goto	l10744
  8508                           
  8509                           ;Setup_Alarm_Time.c: 42: {
  8510                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8511  0039FE  EC2D  F028         	call	_Do_Beep_Good	;wreg free
  8512                           
  8513                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8514  003A02  0E03               	movlw	3
  8515  003A04  1869               	xorwf	_found,w,c
  8516  003A06  A4D8               	btfss	status,2,c
  8517  003A08  D003               	goto	l10722
  8518  003A0A  EC75  F027         	call	_Go_Prev_Alarm_Field	;wreg free
  8519  003A0E  D000               	goto	l10722
  8520  003A10                     l10722:
  8521                           
  8522                           ;Setup_Alarm_Time.c: 45: if (found == 4) Go_Next_Alarm_Field();
  8523  003A10  0E04               	movlw	4
  8524  003A12  1869               	xorwf	_found,w,c
  8525  003A14  A4D8               	btfss	status,2,c
  8526  003A16  D003               	goto	l10726
  8527  003A18  EC85  F027         	call	_Go_Next_Alarm_Field	;wreg free
  8528  003A1C  D000               	goto	l10726
  8529  003A1E                     l10726:
  8530                           
  8531                           ;Setup_Alarm_Time.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  8532  003A1E  0E05               	movlw	5
  8533  003A20  1869               	xorwf	_found,w,c
  8534  003A22  A4D8               	btfss	status,2,c
  8535  003A24  D003               	goto	l10730
  8536  003A26  ECF7  F027         	call	_Do_Save_New_Alarm_Time	;wreg free
  8537  003A2A  D000               	goto	l10730
  8538  003A2C                     l10730:
  8539                           
  8540                           ;Setup_Alarm_Time.c: 47: if (found == 6) Decrease_Alarm_Time();
  8541  003A2C  0E06               	movlw	6
  8542  003A2E  1869               	xorwf	_found,w,c
  8543  003A30  A4D8               	btfss	status,2,c
  8544  003A32  D003               	goto	l10734
  8545  003A34  ECB7  F023         	call	_Decrease_Alarm_Time	;wreg free
  8546  003A38  D000               	goto	l10734
  8547  003A3A                     l10734:
  8548                           
  8549                           ;Setup_Alarm_Time.c: 48: if (found == 7) Increase_Alarm_Time();
  8550  003A3A  0E07               	movlw	7
  8551  003A3C  1869               	xorwf	_found,w,c
  8552  003A3E  A4D8               	btfss	status,2,c
  8553  003A40  D003               	goto	l10738
  8554  003A42  EC89  F023         	call	_Increase_Alarm_Time	;wreg free
  8555  003A46  D000               	goto	l10738
  8556  003A48                     l10738:
  8557                           
  8558                           ;Setup_Alarm_Time.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  8559  003A48  0E08               	movlw	8
  8560  003A4A  1869               	xorwf	_found,w,c
  8561  003A4C  A4D8               	btfss	status,2,c
  8562  003A4E  D003               	goto	l10742
  8563  003A50  ECAD  F028         	call	_Exit_Setup_Alarm_Time	;wreg free
  8564  003A54  D000               	goto	l10742
  8565  003A56                     l10742:
  8566                           
  8567                           ;Setup_Alarm_Time.c: 50: found = 0xff;
  8568  003A56  6869               	setf	_found,c
  8569                           
  8570                           ;Setup_Alarm_Time.c: 51: }
  8571  003A58  D003               	goto	l10746
  8572  003A5A                     l10744:
  8573                           
  8574                           ;Setup_Alarm_Time.c: 52: else
  8575                           ;Setup_Alarm_Time.c: 53: {
  8576                           ;Setup_Alarm_Time.c: 54: Do_Beep_Bad();
  8577  003A5A  EC37  F028         	call	_Do_Beep_Bad	;wreg free
  8578  003A5E  D000               	goto	l10746
  8579  003A60                     l10746:
  8580  003A60  0100               	movlb	0	; () banked
  8581  003A62  05A0               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8582  003A64  B4D8               	btfsc	status,2,c
  8583  003A66  D7C0               	goto	l10710
  8584                           
  8585                           ; BSR set to: 0
  8586                           
  8587                           ; BSR set to: 0
  8588  003A68  0012               	return		;funcret
  8589  003A6A                     __end_of_Do_Setup_Alarm_Time:
  8590                           	opt stack 0
  8591                           tblptru	equ	0xFF8
  8592                           tblptrh	equ	0xFF7
  8593                           tblptrl	equ	0xFF6
  8594                           tablat	equ	0xFF5
  8595                           prodh	equ	0xFF4
  8596                           prodl	equ	0xFF3
  8597                           postinc0	equ	0xFEE
  8598                           wreg	equ	0xFE8
  8599                           postdec1	equ	0xFE5
  8600                           fsr1l	equ	0xFE1
  8601                           indf2	equ	0xFDF
  8602                           fsr2h	equ	0xFDA
  8603                           fsr2l	equ	0xFD9
  8604                           status	equ	0xFD8
  8605                           
  8606 ;; *************** function _check_for_button_input *****************
  8607 ;; Defined at:
  8608 ;;		line 16 in file "utils.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;		None
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  j               2   20[BANK0 ] int 
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  1    wreg      unsigned char 
  8615 ;; Registers used:
  8616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;Total ram usage:        3 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    7
  8629 ;; This function calls:
  8630 ;;		_printf
  8631 ;; This function is called by:
  8632 ;;		_main
  8633 ;;		_Do_Setup_Alarm_Time
  8634 ;;		_Do_Setup_Heater_Temp
  8635 ;;		_Do_Setup_Time
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text38
  8640  00401A                     __ptext38:
  8641                           	opt stack 0
  8642  00401A                     _check_for_button_input:
  8643                           	opt stack 23
  8644                           
  8645                           ;utils.c: 18: if (nec_ok == 1)
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;incstack = 0
  8649  00401A  0100               	movlb	0	; () banked
  8650  00401C  0597               	decf	_nec_ok& (0+255),w,b
  8651  00401E  0100               	movlb	0	; () banked
  8652  004020  1198               	iorwf	(_nec_ok+1)& (0+255),w,b
  8653  004022  A4D8               	btfss	status,2,c
  8654  004024  D043               	goto	l1103
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;utils.c: 19: {
  8658                           ;utils.c: 20: nec_ok = 0;
  8659  004026  0E00               	movlw	0
  8660  004028  0100               	movlb	0	; () banked
  8661  00402A  6F98               	movwf	(_nec_ok+1)& (0+255),b
  8662  00402C  0E00               	movlw	0
  8663  00402E  6F97               	movwf	_nec_ok& (0+255),b
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;utils.c: 23: INTCONbits.INT0IE = 1;
  8667  004030  88F2               	bsf	intcon,4,c	;volatile
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;utils.c: 24: INTCON2bits.INTEDG0 = 0;
  8671  004032  9CF1               	bcf	intcon2,6,c	;volatile
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;utils.c: 26: found = 0xff;
  8675  004034  6869               	setf	_found,c
  8676                           
  8677                           ;utils.c: 27: for (int j=0; j< 21; j++)
  8678  004036  0E00               	movlw	0
  8679  004038  0100               	movlb	0	; () banked
  8680  00403A  6FEF               	movwf	(check_for_button_input@j+1)& (0+255),b
  8681  00403C  0E00               	movlw	0
  8682  00403E  6FEE               	movwf	check_for_button_input@j& (0+255),b
  8683  004040                     l10102:
  8684                           
  8685                           ; BSR set to: 0
  8686  004040  0100               	movlb	0	; () banked
  8687  004042  BFEF               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  8688  004044  D00A               	goto	l10106
  8689  004046  0100               	movlb	0	; () banked
  8690  004048  51EF               	movf	(check_for_button_input@j+1)& (0+255),w,b
  8691  00404A  E121               	bnz	l10116
  8692  00404C  0E15               	movlw	21
  8693  00404E  0100               	movlb	0	; () banked
  8694  004050  5DEE               	subwf	check_for_button_input@j& (0+255),w,b
  8695  004052  B0D8               	btfsc	status,0,c
  8696  004054  D01C               	goto	l10116
  8697  004056  D001               	goto	l10106
  8698                           
  8699                           ; BSR set to: 0
  8700  004058  D01A               	goto	l10116
  8701  00405A                     l10106:
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;utils.c: 28: {
  8705                           ;utils.c: 29: if (Nec_code1 == array1[j])
  8706  00405A  0E1F               	movlw	low _array1
  8707  00405C  0100               	movlb	0	; () banked
  8708  00405E  25EE               	addwf	check_for_button_input@j& (0+255),w,b
  8709  004060  6ED9               	movwf	fsr2l,c
  8710  004062  0E01               	movlw	high _array1
  8711  004064  0100               	movlb	0	; () banked
  8712  004066  21EF               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  8713  004068  6EDA               	movwf	fsr2h,c
  8714  00406A  0100               	movlb	0	; () banked
  8715  00406C  51A3               	movf	_Nec_code1& (0+255),w,b
  8716  00406E  18DE               	xorwf	postinc2,w,c
  8717  004070  A4D8               	btfss	status,2,c
  8718  004072  D008               	goto	l10112
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;utils.c: 30: {
  8722                           ;utils.c: 31: found = j;
  8723  004074  C0EE  F069         	movff	check_for_button_input@j,_found
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;utils.c: 32: j = 21;
  8727  004078  0E00               	movlw	0
  8728  00407A  0100               	movlb	0	; () banked
  8729  00407C  6FEF               	movwf	(check_for_button_input@j+1)& (0+255),b
  8730  00407E  0E15               	movlw	21
  8731  004080  6FEE               	movwf	check_for_button_input@j& (0+255),b
  8732  004082  D000               	goto	l10112
  8733  004084                     l10112:
  8734                           
  8735                           ; BSR set to: 0
  8736  004084  0100               	movlb	0	; () banked
  8737  004086  4BEE               	infsnz	check_for_button_input@j& (0+255),f,b
  8738  004088  2BEF               	incf	(check_for_button_input@j+1)& (0+255),f,b
  8739  00408A  D7DA               	goto	l10102
  8740                           
  8741                           ; BSR set to: 0
  8742  00408C  D000               	goto	l10116
  8743  00408E                     l10116:
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;utils.c: 33: }
  8747                           ;utils.c: 34: }
  8748                           ;utils.c: 36: if (found == 0xff)
  8749  00408E  2869               	incf	_found,w,c
  8750  004090  A4D8               	btfss	status,2,c
  8751  004092  D00A               	goto	l10126
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;utils.c: 37: {
  8755                           ;utils.c: 38: printf ("Cannot find button \r\n");
  8756  004094  0EDE               	movlw	low STR_37
  8757  004096  0100               	movlb	0	; () banked
  8758  004098  6FDA               	movwf	printf@f& (0+255),b
  8759  00409A  0EFE               	movlw	high STR_37
  8760  00409C  0100               	movlb	0	; () banked
  8761  00409E  6FDB               	movwf	(printf@f+1)& (0+255),b
  8762  0040A0  EC0E  F000         	call	_printf	;wreg free
  8763                           
  8764                           ;utils.c: 39: return (0);
  8765  0040A4  0E00               	movlw	0
  8766                           
  8767                           ;utils.c: 40: }
  8768  0040A6  D002               	goto	l1103
  8769  0040A8                     l10126:
  8770                           
  8771                           ;utils.c: 41: else
  8772                           ;utils.c: 42: {
  8773                           ;utils.c: 43: return (1);
  8774  0040A8  0E01               	movlw	1
  8775  0040AA  D000               	goto	l1103
  8776  0040AC                     l1103:
  8777  0040AC  0012               	return		;funcret
  8778  0040AE                     __end_of_check_for_button_input:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           postinc0	equ	0xFEE
  8789                           wreg	equ	0xFE8
  8790                           postdec1	equ	0xFE5
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           fsr2h	equ	0xFDA
  8795                           fsr2l	equ	0xFD9
  8796                           status	equ	0xFD8
  8797                           
  8798 ;; *************** function _bcd_2_dec *****************
  8799 ;; Defined at:
  8800 ;;		line 48 in file "utils.c"
  8801 ;; Parameters:    Size  Location     Type
  8802 ;;  bcd             1    wreg     unsigned char 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  bcd             1   20[COMRAM] unsigned char 
  8805 ;;  dec             2   18[COMRAM] int 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;                  1    wreg      unsigned char 
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0, prodl, prodh
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;Total ram usage:        5 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    3
  8822 ;; This function calls:
  8823 ;;		Nothing
  8824 ;; This function is called by:
  8825 ;;		_Do_Setup_Alarm_Time
  8826 ;;		_Do_Setup_Time
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text39
  8831  004D5E                     __ptext39:
  8832                           	opt stack 0
  8833  004D5E                     _bcd_2_dec:
  8834                           	opt stack 26
  8835                           
  8836                           ;incstack = 0
  8837                           ;bcd_2_dec@bcd stored from wreg
  8838  004D5E  6E15               	movwf	bcd_2_dec@bcd,c
  8839                           
  8840                           ;utils.c: 50: int dec;
  8841                           ;utils.c: 51: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8842  004D60  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8843  004D64  0E0F               	movlw	15
  8844  004D66  1611               	andwf	??_bcd_2_dec,f,c
  8845  004D68  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8846  004D6C  3A12               	swapf	??_bcd_2_dec+1,f,c
  8847  004D6E  0E0F               	movlw	15
  8848  004D70  1612               	andwf	??_bcd_2_dec+1,f,c
  8849  004D72  5012               	movf	??_bcd_2_dec+1,w,c
  8850  004D74  0D0A               	mullw	10
  8851  004D76  5011               	movf	??_bcd_2_dec,w,c
  8852  004D78  24F3               	addwf	prodl,w,c
  8853  004D7A  6E13               	movwf	bcd_2_dec@dec,c
  8854  004D7C  0E00               	movlw	0
  8855  004D7E  20F4               	addwfc	prodh,w,c
  8856  004D80  6E14               	movwf	bcd_2_dec@dec+1,c
  8857                           
  8858                           ;utils.c: 52: return dec;
  8859  004D82  5013               	movf	bcd_2_dec@dec,w,c
  8860  004D84  D000               	goto	l1107
  8861  004D86                     l1107:
  8862  004D86  0012               	return		;funcret
  8863  004D88                     __end_of_bcd_2_dec:
  8864                           	opt stack 0
  8865                           tblptru	equ	0xFF8
  8866                           tblptrh	equ	0xFF7
  8867                           tblptrl	equ	0xFF6
  8868                           tablat	equ	0xFF5
  8869                           prodh	equ	0xFF4
  8870                           prodl	equ	0xFF3
  8871                           intcon	equ	0xFF2
  8872                           intcon2	equ	0xFF1
  8873                           postinc0	equ	0xFEE
  8874                           wreg	equ	0xFE8
  8875                           postdec1	equ	0xFE5
  8876                           fsr1l	equ	0xFE1
  8877                           indf2	equ	0xFDF
  8878                           postinc2	equ	0xFDE
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8884 ;; Defined at:
  8885 ;;		line 139 in file "Setup_Alarm_Time.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;		None
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;		None
  8890 ;; Return value:  Size  Location     Type
  8891 ;;		None               void
  8892 ;; Registers used:
  8893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8903 ;;Total ram usage:        0 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:   10
  8906 ;; This function calls:
  8907 ;;		_drawtext
  8908 ;;		_fillRect
  8909 ;;		_fillScreen
  8910 ;;		_strcpy
  8911 ;; This function is called by:
  8912 ;;		_Do_Setup_Alarm_Time
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text40
  8917  002CFE                     __ptext40:
  8918                           	opt stack 0
  8919  002CFE                     _Initialize_Setup_Alarm_Time_Screen:
  8920                           	opt stack 19
  8921                           
  8922                           ;Setup_Alarm_Time.c: 141: fillScreen(0x0000);
  8923                           
  8924                           ;incstack = 0
  8925  002CFE  0E00               	movlw	0
  8926  002D00  6E25               	movwf	fillScreen@color+1,c
  8927  002D02  0E00               	movlw	0
  8928  002D04  6E24               	movwf	fillScreen@color,c
  8929  002D06  ECB4  F027         	call	_fillScreen	;wreg free
  8930                           
  8931                           ;Setup_Alarm_Time.c: 143: strcpy(txt, "ECE3301L Fa'22 S1");
  8932  002D0A  C062  F011         	movff	_txt,strcpy@to
  8933  002D0E  C063  F012         	movff	_txt+1,strcpy@to+1
  8934  002D12  0E30               	movlw	low STR_24
  8935  002D14  6E13               	movwf	strcpy@from,c
  8936  002D16  0EFF               	movlw	high STR_24
  8937  002D18  6E14               	movwf	strcpy@from+1,c
  8938  002D1A  EC51  F026         	call	_strcpy	;wreg free
  8939                           
  8940                           ;Setup_Alarm_Time.c: 144: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8941  002D1E  0E01               	movlw	1
  8942  002D20  6E39               	movwf	drawtext@y,c
  8943  002D22  C062  F03A         	movff	_txt,drawtext@_text
  8944  002D26  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8945  002D2A  0EFF               	movlw	255
  8946  002D2C  6E3D               	movwf	drawtext@color+1,c
  8947  002D2E  683C               	setf	drawtext@color,c
  8948  002D30  0E00               	movlw	0
  8949  002D32  6E3F               	movwf	drawtext@bg+1,c
  8950  002D34  0E00               	movlw	0
  8951  002D36  6E3E               	movwf	drawtext@bg,c
  8952  002D38  0E01               	movlw	1
  8953  002D3A  6E40               	movwf	drawtext@size,c
  8954  002D3C  0E01               	movlw	1
  8955  002D3E  ECC7  F01A         	call	_drawtext
  8956                           
  8957                           ;Setup_Alarm_Time.c: 147: strcpy(txt, "  Alarm");
  8958  002D42  C062  F011         	movff	_txt,strcpy@to
  8959  002D46  C063  F012         	movff	_txt+1,strcpy@to+1
  8960  002D4A  0EC8               	movlw	low STR_25
  8961  002D4C  6E13               	movwf	strcpy@from,c
  8962  002D4E  0EFF               	movlw	high STR_25
  8963  002D50  6E14               	movwf	strcpy@from+1,c
  8964  002D52  EC51  F026         	call	_strcpy	;wreg free
  8965                           
  8966                           ;Setup_Alarm_Time.c: 148: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8967  002D56  0E0B               	movlw	11
  8968  002D58  6E39               	movwf	drawtext@y,c
  8969  002D5A  C062  F03A         	movff	_txt,drawtext@_text
  8970  002D5E  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8971  002D62  0EF8               	movlw	248
  8972  002D64  6E3D               	movwf	drawtext@color+1,c
  8973  002D66  0E1F               	movlw	31
  8974  002D68  6E3C               	movwf	drawtext@color,c
  8975  002D6A  0E00               	movlw	0
  8976  002D6C  6E3F               	movwf	drawtext@bg+1,c
  8977  002D6E  0E00               	movlw	0
  8978  002D70  6E3E               	movwf	drawtext@bg,c
  8979  002D72  0E02               	movlw	2
  8980  002D74  6E40               	movwf	drawtext@size,c
  8981  002D76  0E06               	movlw	6
  8982  002D78  ECC7  F01A         	call	_drawtext
  8983                           
  8984                           ;Setup_Alarm_Time.c: 149: strcpy(txt, "  Setup");
  8985  002D7C  C062  F011         	movff	_txt,strcpy@to
  8986  002D80  C063  F012         	movff	_txt+1,strcpy@to+1
  8987  002D84  0ED0               	movlw	low STR_26
  8988  002D86  6E13               	movwf	strcpy@from,c
  8989  002D88  0EFF               	movlw	high STR_26
  8990  002D8A  6E14               	movwf	strcpy@from+1,c
  8991  002D8C  EC51  F026         	call	_strcpy	;wreg free
  8992                           
  8993                           ;Setup_Alarm_Time.c: 150: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8994  002D90  0E1A               	movlw	26
  8995  002D92  6E39               	movwf	drawtext@y,c
  8996  002D94  C062  F03A         	movff	_txt,drawtext@_text
  8997  002D98  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8998  002D9C  0EF8               	movlw	248
  8999  002D9E  6E3D               	movwf	drawtext@color+1,c
  9000  002DA0  0E1F               	movlw	31
  9001  002DA2  6E3C               	movwf	drawtext@color,c
  9002  002DA4  0E00               	movlw	0
  9003  002DA6  6E3F               	movwf	drawtext@bg+1,c
  9004  002DA8  0E00               	movlw	0
  9005  002DAA  6E3E               	movwf	drawtext@bg,c
  9006  002DAC  0E02               	movlw	2
  9007  002DAE  6E40               	movwf	drawtext@size,c
  9008  002DB0  0E06               	movlw	6
  9009  002DB2  ECC7  F01A         	call	_drawtext
  9010                           
  9011                           ;Setup_Alarm_Time.c: 152: strcpy(txt, "Time");
  9012  002DB6  C062  F011         	movff	_txt,strcpy@to
  9013  002DBA  C063  F012         	movff	_txt+1,strcpy@to+1
  9014  002DBE  0EA5               	movlw	low (STR_12+6)
  9015  002DC0  6E13               	movwf	strcpy@from,c
  9016  002DC2  0EFF               	movlw	high (STR_12+6)
  9017  002DC4  6E14               	movwf	strcpy@from+1,c
  9018  002DC6  EC51  F026         	call	_strcpy	;wreg free
  9019                           
  9020                           ;Setup_Alarm_Time.c: 153: drawtext(50 , 40 , txt, 0xF800 , 0x0000, 1);
  9021  002DCA  0E28               	movlw	40
  9022  002DCC  6E39               	movwf	drawtext@y,c
  9023  002DCE  C062  F03A         	movff	_txt,drawtext@_text
  9024  002DD2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  9025  002DD6  0EF8               	movlw	248
  9026  002DD8  6E3D               	movwf	drawtext@color+1,c
  9027  002DDA  0E00               	movlw	0
  9028  002DDC  6E3C               	movwf	drawtext@color,c
  9029  002DDE  0E00               	movlw	0
  9030  002DE0  6E3F               	movwf	drawtext@bg+1,c
  9031  002DE2  0E00               	movlw	0
  9032  002DE4  6E3E               	movwf	drawtext@bg,c
  9033  002DE6  0E01               	movlw	1
  9034  002DE8  6E40               	movwf	drawtext@size,c
  9035  002DEA  0E32               	movlw	50
  9036  002DEC  ECC7  F01A         	call	_drawtext
  9037                           
  9038                           ;Setup_Alarm_Time.c: 154: fillRect(15-1, 52+16, 25,2,0xFFE0);
  9039  002DF0  0E44               	movlw	68
  9040  002DF2  6E23               	movwf	fillRect@y,c
  9041  002DF4  0E19               	movlw	25
  9042  002DF6  6E24               	movwf	fillRect@w,c
  9043  002DF8  0E02               	movlw	2
  9044  002DFA  6E25               	movwf	fillRect@h,c
  9045  002DFC  0EFF               	movlw	255
  9046  002DFE  6E27               	movwf	fillRect@color+1,c
  9047  002E00  0EE0               	movlw	224
  9048  002E02  6E26               	movwf	fillRect@color,c
  9049  002E04  0E0E               	movlw	14
  9050  002E06  ECDE  F024         	call	_fillRect
  9051  002E0A  0012               	return		;funcret
  9052  002E0C                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon2	equ	0xFF1
  9062                           postinc0	equ	0xFEE
  9063                           wreg	equ	0xFE8
  9064                           postdec1	equ	0xFE5
  9065                           fsr1l	equ	0xFE1
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           fsr2h	equ	0xFDA
  9069                           fsr2l	equ	0xFD9
  9070                           status	equ	0xFD8
  9071                           
  9072 ;; *************** function _Increase_Alarm_Time *****************
  9073 ;; Defined at:
  9074 ;;		line 60 in file "Setup_Alarm_Time.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;		None
  9077 ;; Auto vars:     Size  Location     Type
  9078 ;;		None
  9079 ;; Return value:  Size  Location     Type
  9080 ;;		None               void
  9081 ;; Registers used:
  9082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;Total ram usage:        0 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:   11
  9095 ;; This function calls:
  9096 ;;		_Update_Setup_Alarm_Time_Screen
  9097 ;; This function is called by:
  9098 ;;		_Do_Setup_Alarm_Time
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           	psect	text41
  9103  004712                     __ptext41:
  9104                           	opt stack 0
  9105  004712                     _Increase_Alarm_Time:
  9106                           	opt stack 18
  9107                           
  9108                           ;Setup_Alarm_Time.c: 62: switch (Select_Alarm_Field)
  9109                           
  9110                           ;incstack = 0
  9111  004712  D01E               	goto	l10214
  9112  004714                     l10194:
  9113                           
  9114                           ;Setup_Alarm_Time.c: 65: setup_alarm_hour++;
  9115  004714  2A6E               	incf	_setup_alarm_hour,f,c
  9116                           
  9117                           ;Setup_Alarm_Time.c: 66: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  9118  004716  0E18               	movlw	24
  9119  004718  186E               	xorwf	_setup_alarm_hour,w,c
  9120  00471A  A4D8               	btfss	status,2,c
  9121  00471C  D025               	goto	l10216
  9122  00471E  0E00               	movlw	0
  9123  004720  6E6E               	movwf	_setup_alarm_hour,c
  9124                           
  9125                           ;Setup_Alarm_Time.c: 67: break;
  9126  004722  D022               	goto	l10216
  9127  004724                     l10200:
  9128                           
  9129                           ;Setup_Alarm_Time.c: 70: setup_alarm_minute++;
  9130  004724  0100               	movlb	0	; () banked
  9131  004726  2BAE               	incf	_setup_alarm_minute& (0+255),f,b
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;Setup_Alarm_Time.c: 71: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  9135  004728  0E3C               	movlw	60
  9136  00472A  0100               	movlb	0	; () banked
  9137  00472C  19AE               	xorwf	_setup_alarm_minute& (0+255),w,b
  9138  00472E  A4D8               	btfss	status,2,c
  9139  004730  D01B               	goto	l10216
  9140                           
  9141                           ; BSR set to: 0
  9142  004732  0E00               	movlw	0
  9143  004734  0100               	movlb	0	; () banked
  9144  004736  6FAE               	movwf	_setup_alarm_minute& (0+255),b
  9145                           
  9146                           ; BSR set to: 0
  9147                           ;Setup_Alarm_Time.c: 72: break;
  9148  004738  D017               	goto	l10216
  9149  00473A                     l10206:
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;Setup_Alarm_Time.c: 74: setup_alarm_second++;
  9153  00473A  0100               	movlb	0	; () banked
  9154  00473C  2BAF               	incf	_setup_alarm_second& (0+255),f,b
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;Setup_Alarm_Time.c: 75: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9158  00473E  0E3C               	movlw	60
  9159  004740  0100               	movlb	0	; () banked
  9160  004742  19AF               	xorwf	_setup_alarm_second& (0+255),w,b
  9161  004744  A4D8               	btfss	status,2,c
  9162  004746  D010               	goto	l10216
  9163                           
  9164                           ; BSR set to: 0
  9165  004748  0E00               	movlw	0
  9166  00474A  0100               	movlb	0	; () banked
  9167  00474C  6FAF               	movwf	_setup_alarm_second& (0+255),b
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;Setup_Alarm_Time.c: 79: }
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;Setup_Alarm_Time.c: 78: break;
  9174                           
  9175                           ;Setup_Alarm_Time.c: 77: default:
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;Setup_Alarm_Time.c: 76: break;
  9179  00474E  D00C               	goto	l10216
  9180  004750                     l10214:
  9181  004750  0100               	movlb	0	; () banked
  9182  004752  51A5               	movf	_Select_Alarm_Field& (0+255),w,b
  9183                           
  9184                           ; Switch size 1, requested type "space"
  9185                           ; Number of cases is 3, Range of values is 0 to 2
  9186                           ; switch strategies available:
  9187                           ; Name         Instructions Cycles
  9188                           ; simple_byte           10     6 (average)
  9189                           ;	Chosen strategy is simple_byte
  9190  004754  0A00               	xorlw	0	; case 0
  9191  004756  B4D8               	btfsc	status,2,c
  9192  004758  D7DD               	goto	l10194
  9193  00475A  0A01               	xorlw	1	; case 1
  9194  00475C  B4D8               	btfsc	status,2,c
  9195  00475E  D7E2               	goto	l10200
  9196  004760  0A03               	xorlw	3	; case 2
  9197  004762  B4D8               	btfsc	status,2,c
  9198  004764  D7EA               	goto	l10206
  9199  004766  D000               	goto	l10216
  9200  004768                     l10216:
  9201                           
  9202                           ;Setup_Alarm_Time.c: 80: Update_Setup_Alarm_Time_Screen();
  9203  004768  ECF8  F018         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9204  00476C  0012               	return		;funcret
  9205  00476E                     __end_of_Increase_Alarm_Time:
  9206                           	opt stack 0
  9207                           tblptru	equ	0xFF8
  9208                           tblptrh	equ	0xFF7
  9209                           tblptrl	equ	0xFF6
  9210                           tablat	equ	0xFF5
  9211                           prodh	equ	0xFF4
  9212                           prodl	equ	0xFF3
  9213                           intcon	equ	0xFF2
  9214                           intcon2	equ	0xFF1
  9215                           postinc0	equ	0xFEE
  9216                           wreg	equ	0xFE8
  9217                           postdec1	equ	0xFE5
  9218                           fsr1l	equ	0xFE1
  9219                           indf2	equ	0xFDF
  9220                           postinc2	equ	0xFDE
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225 ;; *************** function _Go_Prev_Alarm_Field *****************
  9226 ;; Defined at:
  9227 ;;		line 116 in file "Setup_Alarm_Time.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;		None
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;		None
  9232 ;; Return value:  Size  Location     Type
  9233 ;;		None               void
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:        0 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    9
  9248 ;; This function calls:
  9249 ;;		_Update_Setup_Screen_Cursor_Backward
  9250 ;; This function is called by:
  9251 ;;		_Do_Setup_Alarm_Time
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           	psect	text42
  9256  004EEA                     __ptext42:
  9257                           	opt stack 0
  9258  004EEA                     _Go_Prev_Alarm_Field:
  9259                           	opt stack 20
  9260                           
  9261                           ;Setup_Alarm_Time.c: 118: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9262                           
  9263                           ;incstack = 0
  9264  004EEA  0100               	movlb	0	; () banked
  9265  004EEC  51A5               	movf	_Select_Alarm_Field& (0+255),w,b
  9266  004EEE  A4D8               	btfss	status,2,c
  9267  004EF0  D004               	goto	l7512
  9268                           
  9269                           ; BSR set to: 0
  9270  004EF2  0E02               	movlw	2
  9271  004EF4  0100               	movlb	0	; () banked
  9272  004EF6  6FA5               	movwf	_Select_Alarm_Field& (0+255),b
  9273  004EF8  D003               	goto	l7514
  9274  004EFA                     l7512:
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;Setup_Alarm_Time.c: 119: else Select_Alarm_Field--;
  9278  004EFA  0100               	movlb	0	; () banked
  9279  004EFC  07A5               	decf	_Select_Alarm_Field& (0+255),f,b
  9280  004EFE  D000               	goto	l7514
  9281  004F00                     l7514:
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;Setup_Alarm_Time.c: 120: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9285  004F00  0100               	movlb	0	; () banked
  9286  004F02  51A5               	movf	_Select_Alarm_Field& (0+255),w,b
  9287  004F04  EC03  F011         	call	_Update_Setup_Screen_Cursor_Backward
  9288  004F08  0012               	return		;funcret
  9289  004F0A                     __end_of_Go_Prev_Alarm_Field:
  9290                           	opt stack 0
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           intcon2	equ	0xFF1
  9299                           postinc0	equ	0xFEE
  9300                           wreg	equ	0xFE8
  9301                           postdec1	equ	0xFE5
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           fsr2h	equ	0xFDA
  9306                           fsr2l	equ	0xFD9
  9307                           status	equ	0xFD8
  9308                           
  9309 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9310 ;; Defined at:
  9311 ;;		line 250 in file "Setup_Time.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;  field           1    wreg     unsigned char 
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;  field           1   45[COMRAM] unsigned char 
  9316 ;;  xinc            1   47[COMRAM] unsigned char 
  9317 ;;  yinc            1   46[COMRAM] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;		None               void
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;Total ram usage:        3 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    8
  9334 ;; This function calls:
  9335 ;;		_fillRect
  9336 ;; This function is called by:
  9337 ;;		_Go_Prev_Alarm_Field
  9338 ;;		_Go_Prev_Field
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           	psect	text43
  9343  002206                     __ptext43:
  9344                           	opt stack 0
  9345  002206                     _Update_Setup_Screen_Cursor_Backward:
  9346                           	opt stack 20
  9347                           
  9348                           ;incstack = 0
  9349                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9350  002206  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9351                           
  9352                           ;Setup_Time.c: 252: char xinc = 36;
  9353  002208  0E24               	movlw	36
  9354  00220A  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9355                           
  9356                           ;Setup_Time.c: 253: char yinc = 30;
  9357  00220C  0E1E               	movlw	30
  9358  00220E  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9359                           
  9360                           ;Setup_Time.c: 254: switch (field)
  9361  002210  D0C5               	goto	l7282
  9362  002212                     l7260:
  9363                           
  9364                           ;Setup_Time.c: 257: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9365  002212  0E44               	movlw	68
  9366  002214  6E23               	movwf	fillRect@y,c
  9367  002216  0E19               	movlw	25
  9368  002218  6E24               	movwf	fillRect@w,c
  9369  00221A  0E02               	movlw	2
  9370  00221C  6E25               	movwf	fillRect@h,c
  9371  00221E  0E00               	movlw	0
  9372  002220  6E27               	movwf	fillRect@color+1,c
  9373  002222  0E00               	movlw	0
  9374  002224  6E26               	movwf	fillRect@color,c
  9375  002226  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9376  002228  0F0E               	addlw	14
  9377  00222A  ECDE  F024         	call	_fillRect
  9378                           
  9379                           ;Setup_Time.c: 258: fillRect(15-1, 52+16, 25,2,0xFFE0);
  9380  00222E  0E44               	movlw	68
  9381  002230  6E23               	movwf	fillRect@y,c
  9382  002232  0E19               	movlw	25
  9383  002234  6E24               	movwf	fillRect@w,c
  9384  002236  0E02               	movlw	2
  9385  002238  6E25               	movwf	fillRect@h,c
  9386  00223A  0EFF               	movlw	255
  9387  00223C  6E27               	movwf	fillRect@color+1,c
  9388  00223E  0EE0               	movlw	224
  9389  002240  6E26               	movwf	fillRect@color,c
  9390  002242  0E0E               	movlw	14
  9391  002244  ECDE  F024         	call	_fillRect
  9392                           
  9393                           ;Setup_Time.c: 259: break;
  9394  002248  D0BD               	goto	l1033
  9395  00224A                     l7262:
  9396                           
  9397                           ;Setup_Time.c: 262: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9398  00224A  0E44               	movlw	68
  9399  00224C  6E23               	movwf	fillRect@y,c
  9400  00224E  0E19               	movlw	25
  9401  002250  6E24               	movwf	fillRect@w,c
  9402  002252  0E02               	movlw	2
  9403  002254  6E25               	movwf	fillRect@h,c
  9404  002256  0E00               	movlw	0
  9405  002258  6E27               	movwf	fillRect@color+1,c
  9406  00225A  0E00               	movlw	0
  9407  00225C  6E26               	movwf	fillRect@color,c
  9408  00225E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9409  002260  0D02               	mullw	2
  9410  002262  50F3               	movf	prodl,w,c
  9411  002264  0F0E               	addlw	14
  9412  002266  ECDE  F024         	call	_fillRect
  9413                           
  9414                           ;Setup_Time.c: 263: fillRect(15-1+xinc, 52+16, 25,2,0xFFE0);
  9415  00226A  0E44               	movlw	68
  9416  00226C  6E23               	movwf	fillRect@y,c
  9417  00226E  0E19               	movlw	25
  9418  002270  6E24               	movwf	fillRect@w,c
  9419  002272  0E02               	movlw	2
  9420  002274  6E25               	movwf	fillRect@h,c
  9421  002276  0EFF               	movlw	255
  9422  002278  6E27               	movwf	fillRect@color+1,c
  9423  00227A  0EE0               	movlw	224
  9424  00227C  6E26               	movwf	fillRect@color,c
  9425  00227E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9426  002280  0F0E               	addlw	14
  9427  002282  ECDE  F024         	call	_fillRect
  9428                           
  9429                           ;Setup_Time.c: 264: break;
  9430  002286  D09E               	goto	l1033
  9431  002288                     l7266:
  9432                           
  9433                           ;Setup_Time.c: 267: fillRect(15-1, 52+16, 25,2,0x0000);
  9434  002288  0E44               	movlw	68
  9435  00228A  6E23               	movwf	fillRect@y,c
  9436  00228C  0E19               	movlw	25
  9437  00228E  6E24               	movwf	fillRect@w,c
  9438  002290  0E02               	movlw	2
  9439  002292  6E25               	movwf	fillRect@h,c
  9440  002294  0E00               	movlw	0
  9441  002296  6E27               	movwf	fillRect@color+1,c
  9442  002298  0E00               	movlw	0
  9443  00229A  6E26               	movwf	fillRect@color,c
  9444  00229C  0E0E               	movlw	14
  9445  00229E  ECDE  F024         	call	_fillRect
  9446                           
  9447                           ;Setup_Time.c: 268: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9448  0022A2  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9449  0022A4  0F44               	addlw	68
  9450  0022A6  6E23               	movwf	fillRect@y,c
  9451  0022A8  0E19               	movlw	25
  9452  0022AA  6E24               	movwf	fillRect@w,c
  9453  0022AC  0E02               	movlw	2
  9454  0022AE  6E25               	movwf	fillRect@h,c
  9455  0022B0  0E00               	movlw	0
  9456  0022B2  6E27               	movwf	fillRect@color+1,c
  9457  0022B4  0E00               	movlw	0
  9458  0022B6  6E26               	movwf	fillRect@color,c
  9459  0022B8  0E0E               	movlw	14
  9460  0022BA  ECDE  F024         	call	_fillRect
  9461                           
  9462                           ;Setup_Time.c: 269: fillRect(15-1+2*xinc, 52+16, 25,2,0xFFE0);
  9463  0022BE  0E44               	movlw	68
  9464  0022C0  6E23               	movwf	fillRect@y,c
  9465  0022C2  0E19               	movlw	25
  9466  0022C4  6E24               	movwf	fillRect@w,c
  9467  0022C6  0E02               	movlw	2
  9468  0022C8  6E25               	movwf	fillRect@h,c
  9469  0022CA  0EFF               	movlw	255
  9470  0022CC  6E27               	movwf	fillRect@color+1,c
  9471  0022CE  0EE0               	movlw	224
  9472  0022D0  6E26               	movwf	fillRect@color,c
  9473  0022D2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9474  0022D4  0D02               	mullw	2
  9475  0022D6  50F3               	movf	prodl,w,c
  9476  0022D8  0F0E               	addlw	14
  9477  0022DA  ECDE  F024         	call	_fillRect
  9478                           
  9479                           ;Setup_Time.c: 270: break;
  9480  0022DE  D072               	goto	l1033
  9481  0022E0                     l7270:
  9482                           
  9483                           ;Setup_Time.c: 273: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9484  0022E0  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9485  0022E2  0F44               	addlw	68
  9486  0022E4  6E23               	movwf	fillRect@y,c
  9487  0022E6  0E19               	movlw	25
  9488  0022E8  6E24               	movwf	fillRect@w,c
  9489  0022EA  0E02               	movlw	2
  9490  0022EC  6E25               	movwf	fillRect@h,c
  9491  0022EE  0E00               	movlw	0
  9492  0022F0  6E27               	movwf	fillRect@color+1,c
  9493  0022F2  0E00               	movlw	0
  9494  0022F4  6E26               	movwf	fillRect@color,c
  9495  0022F6  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9496  0022F8  0F0E               	addlw	14
  9497  0022FA  ECDE  F024         	call	_fillRect
  9498                           
  9499                           ;Setup_Time.c: 274: fillRect(15-1, 52+16+yinc, 25,2,0xFFE0);
  9500  0022FE  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9501  002300  0F44               	addlw	68
  9502  002302  6E23               	movwf	fillRect@y,c
  9503  002304  0E19               	movlw	25
  9504  002306  6E24               	movwf	fillRect@w,c
  9505  002308  0E02               	movlw	2
  9506  00230A  6E25               	movwf	fillRect@h,c
  9507  00230C  0EFF               	movlw	255
  9508  00230E  6E27               	movwf	fillRect@color+1,c
  9509  002310  0EE0               	movlw	224
  9510  002312  6E26               	movwf	fillRect@color,c
  9511  002314  0E0E               	movlw	14
  9512  002316  ECDE  F024         	call	_fillRect
  9513                           
  9514                           ;Setup_Time.c: 275: break;
  9515  00231A  D054               	goto	l1033
  9516  00231C                     l7272:
  9517                           
  9518                           ;Setup_Time.c: 278: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9519  00231C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9520  00231E  0F44               	addlw	68
  9521  002320  6E23               	movwf	fillRect@y,c
  9522  002322  0E19               	movlw	25
  9523  002324  6E24               	movwf	fillRect@w,c
  9524  002326  0E02               	movlw	2
  9525  002328  6E25               	movwf	fillRect@h,c
  9526  00232A  0E00               	movlw	0
  9527  00232C  6E27               	movwf	fillRect@color+1,c
  9528  00232E  0E00               	movlw	0
  9529  002330  6E26               	movwf	fillRect@color,c
  9530  002332  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9531  002334  0D02               	mullw	2
  9532  002336  50F3               	movf	prodl,w,c
  9533  002338  0F0E               	addlw	14
  9534  00233A  ECDE  F024         	call	_fillRect
  9535                           
  9536                           ;Setup_Time.c: 279: fillRect(15-1+xinc, 52+16+yinc, 25,2,0xFFE0);
  9537  00233E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9538  002340  0F44               	addlw	68
  9539  002342  6E23               	movwf	fillRect@y,c
  9540  002344  0E19               	movlw	25
  9541  002346  6E24               	movwf	fillRect@w,c
  9542  002348  0E02               	movlw	2
  9543  00234A  6E25               	movwf	fillRect@h,c
  9544  00234C  0EFF               	movlw	255
  9545  00234E  6E27               	movwf	fillRect@color+1,c
  9546  002350  0EE0               	movlw	224
  9547  002352  6E26               	movwf	fillRect@color,c
  9548  002354  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9549  002356  0F0E               	addlw	14
  9550  002358  ECDE  F024         	call	_fillRect
  9551                           
  9552                           ;Setup_Time.c: 280: break;
  9553  00235C  D033               	goto	l1033
  9554  00235E                     l7276:
  9555                           
  9556                           ;Setup_Time.c: 283: fillRect(15-1, 52+16, 25,2,0x0000);
  9557  00235E  0E44               	movlw	68
  9558  002360  6E23               	movwf	fillRect@y,c
  9559  002362  0E19               	movlw	25
  9560  002364  6E24               	movwf	fillRect@w,c
  9561  002366  0E02               	movlw	2
  9562  002368  6E25               	movwf	fillRect@h,c
  9563  00236A  0E00               	movlw	0
  9564  00236C  6E27               	movwf	fillRect@color+1,c
  9565  00236E  0E00               	movlw	0
  9566  002370  6E26               	movwf	fillRect@color,c
  9567  002372  0E0E               	movlw	14
  9568  002374  ECDE  F024         	call	_fillRect
  9569                           
  9570                           ;Setup_Time.c: 284: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0xFFE0);
  9571  002378  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9572  00237A  0F44               	addlw	68
  9573  00237C  6E23               	movwf	fillRect@y,c
  9574  00237E  0E19               	movlw	25
  9575  002380  6E24               	movwf	fillRect@w,c
  9576  002382  0E02               	movlw	2
  9577  002384  6E25               	movwf	fillRect@h,c
  9578  002386  0EFF               	movlw	255
  9579  002388  6E27               	movwf	fillRect@color+1,c
  9580  00238A  0EE0               	movlw	224
  9581  00238C  6E26               	movwf	fillRect@color,c
  9582  00238E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9583  002390  0D02               	mullw	2
  9584  002392  50F3               	movf	prodl,w,c
  9585  002394  0F0E               	addlw	14
  9586  002396  ECDE  F024         	call	_fillRect
  9587                           
  9588                           ;Setup_Time.c: 286: }
  9589                           
  9590                           ;Setup_Time.c: 285: break;
  9591  00239A  D014               	goto	l1033
  9592  00239C                     l7282:
  9593  00239C  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9594                           
  9595                           ; Switch size 1, requested type "space"
  9596                           ; Number of cases is 6, Range of values is 0 to 5
  9597                           ; switch strategies available:
  9598                           ; Name         Instructions Cycles
  9599                           ; simple_byte           19    10 (average)
  9600                           ;	Chosen strategy is simple_byte
  9601  00239E  0A00               	xorlw	0	; case 0
  9602  0023A0  B4D8               	btfsc	status,2,c
  9603  0023A2  D737               	goto	l7260
  9604  0023A4  0A01               	xorlw	1	; case 1
  9605  0023A6  B4D8               	btfsc	status,2,c
  9606  0023A8  D750               	goto	l7262
  9607  0023AA  0A03               	xorlw	3	; case 2
  9608  0023AC  B4D8               	btfsc	status,2,c
  9609  0023AE  D76C               	goto	l7266
  9610  0023B0  0A01               	xorlw	1	; case 3
  9611  0023B2  B4D8               	btfsc	status,2,c
  9612  0023B4  D795               	goto	l7270
  9613  0023B6  0A07               	xorlw	7	; case 4
  9614  0023B8  B4D8               	btfsc	status,2,c
  9615  0023BA  D7B0               	goto	l7272
  9616  0023BC  0A01               	xorlw	1	; case 5
  9617  0023BE  B4D8               	btfsc	status,2,c
  9618  0023C0  D7CE               	goto	l7276
  9619  0023C2  D000               	goto	l1033
  9620  0023C4                     l1033:
  9621  0023C4  0012               	return		;funcret
  9622  0023C6                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9623                           	opt stack 0
  9624                           tblptru	equ	0xFF8
  9625                           tblptrh	equ	0xFF7
  9626                           tblptrl	equ	0xFF6
  9627                           tablat	equ	0xFF5
  9628                           prodh	equ	0xFF4
  9629                           prodl	equ	0xFF3
  9630                           intcon	equ	0xFF2
  9631                           intcon2	equ	0xFF1
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function _Go_Next_Alarm_Field *****************
  9643 ;; Defined at:
  9644 ;;		line 107 in file "Setup_Alarm_Time.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    9
  9665 ;; This function calls:
  9666 ;;		_Update_Setup_Screen_Cursor_Forward
  9667 ;; This function is called by:
  9668 ;;		_Do_Setup_Alarm_Time
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text44
  9673  004F0A                     __ptext44:
  9674                           	opt stack 0
  9675  004F0A                     _Go_Next_Alarm_Field:
  9676                           	opt stack 20
  9677                           
  9678                           ;Setup_Alarm_Time.c: 110: Select_Alarm_Field++;
  9679                           
  9680                           ;incstack = 0
  9681  004F0A  0100               	movlb	0	; () banked
  9682  004F0C  2BA5               	incf	_Select_Alarm_Field& (0+255),f,b
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;Setup_Alarm_Time.c: 111: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9686  004F0E  0E03               	movlw	3
  9687  004F10  0100               	movlb	0	; () banked
  9688  004F12  19A5               	xorwf	_Select_Alarm_Field& (0+255),w,b
  9689  004F14  A4D8               	btfss	status,2,c
  9690  004F16  D004               	goto	l7522
  9691                           
  9692                           ; BSR set to: 0
  9693  004F18  0E00               	movlw	0
  9694  004F1A  0100               	movlb	0	; () banked
  9695  004F1C  6FA5               	movwf	_Select_Alarm_Field& (0+255),b
  9696  004F1E  D000               	goto	l7522
  9697  004F20                     l7522:
  9698                           
  9699                           ; BSR set to: 0
  9700                           ;Setup_Alarm_Time.c: 112: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9701  004F20  0100               	movlb	0	; () banked
  9702  004F22  51A5               	movf	_Select_Alarm_Field& (0+255),w,b
  9703  004F24  EC3E  F00F         	call	_Update_Setup_Screen_Cursor_Forward
  9704  004F28  0012               	return		;funcret
  9705  004F2A                     __end_of_Go_Next_Alarm_Field:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           postinc0	equ	0xFEE
  9716                           wreg	equ	0xFE8
  9717                           postdec1	equ	0xFE5
  9718                           fsr1l	equ	0xFE1
  9719                           indf2	equ	0xFDF
  9720                           postinc2	equ	0xFDE
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9726 ;; Defined at:
  9727 ;;		line 211 in file "Setup_Time.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  field           1    wreg     unsigned char 
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;  field           1   45[COMRAM] unsigned char 
  9732 ;;  xinc            1   47[COMRAM] unsigned char 
  9733 ;;  yinc            1   46[COMRAM] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;Total ram usage:        3 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    8
  9750 ;; This function calls:
  9751 ;;		_fillRect
  9752 ;; This function is called by:
  9753 ;;		_Go_Next_Alarm_Field
  9754 ;;		_Go_Next_Field
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           	psect	text45
  9759  001E7C                     __ptext45:
  9760                           	opt stack 0
  9761  001E7C                     _Update_Setup_Screen_Cursor_Forward:
  9762                           	opt stack 20
  9763                           
  9764                           ;incstack = 0
  9765                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9766  001E7C  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9767                           
  9768                           ;Setup_Time.c: 213: char xinc = 36;
  9769  001E7E  0E24               	movlw	36
  9770  001E80  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9771                           
  9772                           ;Setup_Time.c: 214: char yinc = 30;
  9773  001E82  0E1E               	movlw	30
  9774  001E84  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9775                           
  9776                           ;Setup_Time.c: 215: switch (field)
  9777  001E86  D0C8               	goto	l7256
  9778  001E88                     l7234:
  9779                           
  9780                           ;Setup_Time.c: 218: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9781  001E88  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9782  001E8A  0F44               	addlw	68
  9783  001E8C  6E23               	movwf	fillRect@y,c
  9784  001E8E  0E19               	movlw	25
  9785  001E90  6E24               	movwf	fillRect@w,c
  9786  001E92  0E02               	movlw	2
  9787  001E94  6E25               	movwf	fillRect@h,c
  9788  001E96  0E00               	movlw	0
  9789  001E98  6E27               	movwf	fillRect@color+1,c
  9790  001E9A  0E00               	movlw	0
  9791  001E9C  6E26               	movwf	fillRect@color,c
  9792  001E9E  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9793  001EA0  0D02               	mullw	2
  9794  001EA2  50F3               	movf	prodl,w,c
  9795  001EA4  0F0E               	addlw	14
  9796  001EA6  ECDE  F024         	call	_fillRect
  9797                           
  9798                           ;Setup_Time.c: 219: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9799  001EAA  0E44               	movlw	68
  9800  001EAC  6E23               	movwf	fillRect@y,c
  9801  001EAE  0E19               	movlw	25
  9802  001EB0  6E24               	movwf	fillRect@w,c
  9803  001EB2  0E02               	movlw	2
  9804  001EB4  6E25               	movwf	fillRect@h,c
  9805  001EB6  0E00               	movlw	0
  9806  001EB8  6E27               	movwf	fillRect@color+1,c
  9807  001EBA  0E00               	movlw	0
  9808  001EBC  6E26               	movwf	fillRect@color,c
  9809  001EBE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9810  001EC0  0D02               	mullw	2
  9811  001EC2  50F3               	movf	prodl,w,c
  9812  001EC4  0F0E               	addlw	14
  9813  001EC6  ECDE  F024         	call	_fillRect
  9814                           
  9815                           ;Setup_Time.c: 220: fillRect(15-1, 52+16, 25,2,0xFFE0);
  9816  001ECA  0E44               	movlw	68
  9817  001ECC  6E23               	movwf	fillRect@y,c
  9818  001ECE  0E19               	movlw	25
  9819  001ED0  6E24               	movwf	fillRect@w,c
  9820  001ED2  0E02               	movlw	2
  9821  001ED4  6E25               	movwf	fillRect@h,c
  9822  001ED6  0EFF               	movlw	255
  9823  001ED8  6E27               	movwf	fillRect@color+1,c
  9824  001EDA  0EE0               	movlw	224
  9825  001EDC  6E26               	movwf	fillRect@color,c
  9826  001EDE  0E0E               	movlw	14
  9827  001EE0  ECDE  F024         	call	_fillRect
  9828                           
  9829                           ;Setup_Time.c: 221: break;
  9830  001EE4  D0AD               	goto	l1022
  9831  001EE6                     l7238:
  9832                           
  9833                           ;Setup_Time.c: 224: fillRect(15-1, 52+16, 25,2,0x0000);
  9834  001EE6  0E44               	movlw	68
  9835  001EE8  6E23               	movwf	fillRect@y,c
  9836  001EEA  0E19               	movlw	25
  9837  001EEC  6E24               	movwf	fillRect@w,c
  9838  001EEE  0E02               	movlw	2
  9839  001EF0  6E25               	movwf	fillRect@h,c
  9840  001EF2  0E00               	movlw	0
  9841  001EF4  6E27               	movwf	fillRect@color+1,c
  9842  001EF6  0E00               	movlw	0
  9843  001EF8  6E26               	movwf	fillRect@color,c
  9844  001EFA  0E0E               	movlw	14
  9845  001EFC  ECDE  F024         	call	_fillRect
  9846                           
  9847                           ;Setup_Time.c: 225: fillRect(15-1+xinc, 52+16, 25,2,0xFFE0);
  9848  001F00  0E44               	movlw	68
  9849  001F02  6E23               	movwf	fillRect@y,c
  9850  001F04  0E19               	movlw	25
  9851  001F06  6E24               	movwf	fillRect@w,c
  9852  001F08  0E02               	movlw	2
  9853  001F0A  6E25               	movwf	fillRect@h,c
  9854  001F0C  0EFF               	movlw	255
  9855  001F0E  6E27               	movwf	fillRect@color+1,c
  9856  001F10  0EE0               	movlw	224
  9857  001F12  6E26               	movwf	fillRect@color,c
  9858  001F14  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9859  001F16  0F0E               	addlw	14
  9860  001F18  ECDE  F024         	call	_fillRect
  9861                           
  9862                           ;Setup_Time.c: 226: break;
  9863  001F1C  D091               	goto	l1022
  9864  001F1E                     l7240:
  9865                           
  9866                           ;Setup_Time.c: 229: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9867  001F1E  0E44               	movlw	68
  9868  001F20  6E23               	movwf	fillRect@y,c
  9869  001F22  0E19               	movlw	25
  9870  001F24  6E24               	movwf	fillRect@w,c
  9871  001F26  0E02               	movlw	2
  9872  001F28  6E25               	movwf	fillRect@h,c
  9873  001F2A  0E00               	movlw	0
  9874  001F2C  6E27               	movwf	fillRect@color+1,c
  9875  001F2E  0E00               	movlw	0
  9876  001F30  6E26               	movwf	fillRect@color,c
  9877  001F32  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9878  001F34  0F0E               	addlw	14
  9879  001F36  ECDE  F024         	call	_fillRect
  9880                           
  9881                           ;Setup_Time.c: 230: fillRect(15-1+2*xinc, 52+16, 25,2,0xFFE0);
  9882  001F3A  0E44               	movlw	68
  9883  001F3C  6E23               	movwf	fillRect@y,c
  9884  001F3E  0E19               	movlw	25
  9885  001F40  6E24               	movwf	fillRect@w,c
  9886  001F42  0E02               	movlw	2
  9887  001F44  6E25               	movwf	fillRect@h,c
  9888  001F46  0EFF               	movlw	255
  9889  001F48  6E27               	movwf	fillRect@color+1,c
  9890  001F4A  0EE0               	movlw	224
  9891  001F4C  6E26               	movwf	fillRect@color,c
  9892  001F4E  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9893  001F50  0D02               	mullw	2
  9894  001F52  50F3               	movf	prodl,w,c
  9895  001F54  0F0E               	addlw	14
  9896  001F56  ECDE  F024         	call	_fillRect
  9897                           
  9898                           ;Setup_Time.c: 231: break;
  9899  001F5A  D072               	goto	l1022
  9900  001F5C                     l7244:
  9901                           
  9902                           ;Setup_Time.c: 234: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9903  001F5C  0E44               	movlw	68
  9904  001F5E  6E23               	movwf	fillRect@y,c
  9905  001F60  0E19               	movlw	25
  9906  001F62  6E24               	movwf	fillRect@w,c
  9907  001F64  0E02               	movlw	2
  9908  001F66  6E25               	movwf	fillRect@h,c
  9909  001F68  0E00               	movlw	0
  9910  001F6A  6E27               	movwf	fillRect@color+1,c
  9911  001F6C  0E00               	movlw	0
  9912  001F6E  6E26               	movwf	fillRect@color,c
  9913  001F70  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9914  001F72  0D02               	mullw	2
  9915  001F74  50F3               	movf	prodl,w,c
  9916  001F76  0F0E               	addlw	14
  9917  001F78  ECDE  F024         	call	_fillRect
  9918                           
  9919                           ;Setup_Time.c: 235: fillRect(15-1, 52+16+yinc, 25,2,0xFFE0);
  9920  001F7C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9921  001F7E  0F44               	addlw	68
  9922  001F80  6E23               	movwf	fillRect@y,c
  9923  001F82  0E19               	movlw	25
  9924  001F84  6E24               	movwf	fillRect@w,c
  9925  001F86  0E02               	movlw	2
  9926  001F88  6E25               	movwf	fillRect@h,c
  9927  001F8A  0EFF               	movlw	255
  9928  001F8C  6E27               	movwf	fillRect@color+1,c
  9929  001F8E  0EE0               	movlw	224
  9930  001F90  6E26               	movwf	fillRect@color,c
  9931  001F92  0E0E               	movlw	14
  9932  001F94  ECDE  F024         	call	_fillRect
  9933                           
  9934                           ;Setup_Time.c: 236: break;
  9935  001F98  D053               	goto	l1022
  9936  001F9A                     l7248:
  9937                           
  9938                           ;Setup_Time.c: 239: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9939  001F9A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9940  001F9C  0F44               	addlw	68
  9941  001F9E  6E23               	movwf	fillRect@y,c
  9942  001FA0  0E19               	movlw	25
  9943  001FA2  6E24               	movwf	fillRect@w,c
  9944  001FA4  0E02               	movlw	2
  9945  001FA6  6E25               	movwf	fillRect@h,c
  9946  001FA8  0E00               	movlw	0
  9947  001FAA  6E27               	movwf	fillRect@color+1,c
  9948  001FAC  0E00               	movlw	0
  9949  001FAE  6E26               	movwf	fillRect@color,c
  9950  001FB0  0E0E               	movlw	14
  9951  001FB2  ECDE  F024         	call	_fillRect
  9952                           
  9953                           ;Setup_Time.c: 240: fillRect(15-1+xinc, 52+16+yinc, 25,2,0xFFE0);
  9954  001FB6  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9955  001FB8  0F44               	addlw	68
  9956  001FBA  6E23               	movwf	fillRect@y,c
  9957  001FBC  0E19               	movlw	25
  9958  001FBE  6E24               	movwf	fillRect@w,c
  9959  001FC0  0E02               	movlw	2
  9960  001FC2  6E25               	movwf	fillRect@h,c
  9961  001FC4  0EFF               	movlw	255
  9962  001FC6  6E27               	movwf	fillRect@color+1,c
  9963  001FC8  0EE0               	movlw	224
  9964  001FCA  6E26               	movwf	fillRect@color,c
  9965  001FCC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9966  001FCE  0F0E               	addlw	14
  9967  001FD0  ECDE  F024         	call	_fillRect
  9968                           
  9969                           ;Setup_Time.c: 241: break;
  9970  001FD4  D035               	goto	l1022
  9971  001FD6                     l7250:
  9972                           
  9973                           ;Setup_Time.c: 244: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9974  001FD6  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9975  001FD8  0F44               	addlw	68
  9976  001FDA  6E23               	movwf	fillRect@y,c
  9977  001FDC  0E19               	movlw	25
  9978  001FDE  6E24               	movwf	fillRect@w,c
  9979  001FE0  0E02               	movlw	2
  9980  001FE2  6E25               	movwf	fillRect@h,c
  9981  001FE4  0E00               	movlw	0
  9982  001FE6  6E27               	movwf	fillRect@color+1,c
  9983  001FE8  0E00               	movlw	0
  9984  001FEA  6E26               	movwf	fillRect@color,c
  9985  001FEC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9986  001FEE  0F0E               	addlw	14
  9987  001FF0  ECDE  F024         	call	_fillRect
  9988                           
  9989                           ;Setup_Time.c: 245: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0xFFE0);
  9990  001FF4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9991  001FF6  0F44               	addlw	68
  9992  001FF8  6E23               	movwf	fillRect@y,c
  9993  001FFA  0E19               	movlw	25
  9994  001FFC  6E24               	movwf	fillRect@w,c
  9995  001FFE  0E02               	movlw	2
  9996  002000  6E25               	movwf	fillRect@h,c
  9997  002002  0EFF               	movlw	255
  9998  002004  6E27               	movwf	fillRect@color+1,c
  9999  002006  0EE0               	movlw	224
 10000  002008  6E26               	movwf	fillRect@color,c
 10001  00200A  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
 10002  00200C  0D02               	mullw	2
 10003  00200E  50F3               	movf	prodl,w,c
 10004  002010  0F0E               	addlw	14
 10005  002012  ECDE  F024         	call	_fillRect
 10006                           
 10007                           ;Setup_Time.c: 247: }
 10008                           
 10009                           ;Setup_Time.c: 246: break;
 10010  002016  D014               	goto	l1022
 10011  002018                     l7256:
 10012  002018  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
 10013                           
 10014                           ; Switch size 1, requested type "space"
 10015                           ; Number of cases is 6, Range of values is 0 to 5
 10016                           ; switch strategies available:
 10017                           ; Name         Instructions Cycles
 10018                           ; simple_byte           19    10 (average)
 10019                           ;	Chosen strategy is simple_byte
 10020  00201A  0A00               	xorlw	0	; case 0
 10021  00201C  B4D8               	btfsc	status,2,c
 10022  00201E  D734               	goto	l7234
 10023  002020  0A01               	xorlw	1	; case 1
 10024  002022  B4D8               	btfsc	status,2,c
 10025  002024  D760               	goto	l7238
 10026  002026  0A03               	xorlw	3	; case 2
 10027  002028  B4D8               	btfsc	status,2,c
 10028  00202A  D779               	goto	l7240
 10029  00202C  0A01               	xorlw	1	; case 3
 10030  00202E  B4D8               	btfsc	status,2,c
 10031  002030  D795               	goto	l7244
 10032  002032  0A07               	xorlw	7	; case 4
 10033  002034  B4D8               	btfsc	status,2,c
 10034  002036  D7B1               	goto	l7248
 10035  002038  0A01               	xorlw	1	; case 5
 10036  00203A  B4D8               	btfsc	status,2,c
 10037  00203C  D7CC               	goto	l7250
 10038  00203E  D000               	goto	l1022
 10039  002040                     l1022:
 10040  002040  0012               	return		;funcret
 10041  002042                     __end_of_Update_Setup_Screen_Cursor_Forward:
 10042                           	opt stack 0
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           intcon2	equ	0xFF1
 10051                           postinc0	equ	0xFEE
 10052                           wreg	equ	0xFE8
 10053                           postdec1	equ	0xFE5
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           fsr2h	equ	0xFDA
 10058                           fsr2l	equ	0xFD9
 10059                           status	equ	0xFD8
 10060                           
 10061 ;; *************** function _Exit_Setup_Alarm_Time *****************
 10062 ;; Defined at:
 10063 ;;		line 123 in file "Setup_Alarm_Time.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;		None               void
 10070 ;; Registers used:
 10071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:   11
 10084 ;; This function calls:
 10085 ;;		_DS3231_Read_Time
 10086 ;;		_Initialize_Screen
 10087 ;; This function is called by:
 10088 ;;		_Do_Setup_Alarm_Time
 10089 ;; This function uses a non-reentrant model
 10090 ;;
 10091                           
 10092                           	psect	text46
 10093  00515A                     __ptext46:
 10094                           	opt stack 0
 10095  00515A                     _Exit_Setup_Alarm_Time:
 10096                           	opt stack 18
 10097                           
 10098                           ;Setup_Alarm_Time.c: 125: DS3231_Read_Time();
 10099                           
 10100                           ;incstack = 0
 10101  00515A  EC94  F022         	call	_DS3231_Read_Time	;wreg free
 10102                           
 10103                           ;Setup_Alarm_Time.c: 126: Initialize_Screen();
 10104  00515E  EC31  F00B         	call	_Initialize_Screen	;wreg free
 10105                           
 10106                           ;Setup_Alarm_Time.c: 127: In_Alarm_Time_Setup = 0;
 10107  005162  0E00               	movlw	0
 10108  005164  0100               	movlb	0	; () banked
 10109  005166  6FA0               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10110                           
 10111                           ; BSR set to: 0
 10112  005168  0012               	return		;funcret
 10113  00516A                     __end_of_Exit_Setup_Alarm_Time:
 10114                           	opt stack 0
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           intcon2	equ	0xFF1
 10123                           postinc0	equ	0xFEE
 10124                           wreg	equ	0xFE8
 10125                           postdec1	equ	0xFE5
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10134 ;; Defined at:
 10135 ;;		line 130 in file "Setup_Alarm_Time.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;		None               void
 10142 ;; Registers used:
 10143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:   11
 10156 ;; This function calls:
 10157 ;;		_DS3231_Read_Alarm_Time
 10158 ;;		_DS3231_Read_Time
 10159 ;;		_DS3231_Write_Alarm_Time
 10160 ;;		_Initialize_Screen
 10161 ;; This function is called by:
 10162 ;;		_Do_Setup_Alarm_Time
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           	psect	text47
 10167  004FEE                     __ptext47:
 10168                           	opt stack 0
 10169  004FEE                     _Do_Save_New_Alarm_Time:
 10170                           	opt stack 18
 10171                           
 10172                           ;Setup_Alarm_Time.c: 132: DS3231_Write_Alarm_Time();
 10173                           
 10174                           ; BSR set to: 0
 10175                           ;incstack = 0
 10176  004FEE  EC6A  F021         	call	_DS3231_Write_Alarm_Time	;wreg free
 10177                           
 10178                           ;Setup_Alarm_Time.c: 133: DS3231_Read_Alarm_Time();
 10179  004FF2  ECB7  F024         	call	_DS3231_Read_Alarm_Time	;wreg free
 10180                           
 10181                           ;Setup_Alarm_Time.c: 134: DS3231_Read_Time();
 10182  004FF6  EC94  F022         	call	_DS3231_Read_Time	;wreg free
 10183                           
 10184                           ;Setup_Alarm_Time.c: 135: Initialize_Screen();
 10185  004FFA  EC31  F00B         	call	_Initialize_Screen	;wreg free
 10186                           
 10187                           ;Setup_Alarm_Time.c: 136: In_Alarm_Time_Setup = 0;
 10188  004FFE  0E00               	movlw	0
 10189  005000  0100               	movlb	0	; () banked
 10190  005002  6FA0               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10191                           
 10192                           ; BSR set to: 0
 10193  005004  0012               	return		;funcret
 10194  005006                     __end_of_Do_Save_New_Alarm_Time:
 10195                           	opt stack 0
 10196                           tblptru	equ	0xFF8
 10197                           tblptrh	equ	0xFF7
 10198                           tblptrl	equ	0xFF6
 10199                           tablat	equ	0xFF5
 10200                           prodh	equ	0xFF4
 10201                           prodl	equ	0xFF3
 10202                           intcon	equ	0xFF2
 10203                           intcon2	equ	0xFF1
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           fsr1l	equ	0xFE1
 10208                           indf2	equ	0xFDF
 10209                           postinc2	equ	0xFDE
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function _Initialize_Screen *****************
 10215 ;; Defined at:
 10216 ;;		line 36 in file "Main_Screen.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;		None
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  2  344[None  ] int 
 10223 ;; Registers used:
 10224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        0 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:   10
 10237 ;; This function calls:
 10238 ;;		_LCD_Reset
 10239 ;;		_TFT_GreenTab_Initialize
 10240 ;;		_drawCircle
 10241 ;;		_drawtext
 10242 ;;		_fillScreen
 10243 ;;		_strcpy
 10244 ;; This function is called by:
 10245 ;;		_main
 10246 ;;		_Exit_Setup_Alarm_Time
 10247 ;;		_Do_Save_New_Alarm_Time
 10248 ;;		_Exit_Setup_Heater_Temp
 10249 ;;		_Do_Save_New_Heater_Temp
 10250 ;;		_Do_Save_New_Time
 10251 ;;		_Exit_Time_Setup
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text48
 10256  001662                     __ptext48:
 10257                           	opt stack 0
 10258  001662                     _Initialize_Screen:
 10259                           	opt stack 20
 10260                           
 10261                           ;Main_Screen.c: 38: LCD_Reset();
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;incstack = 0
 10265  001662  EC67  F028         	call	_LCD_Reset	;wreg free
 10266                           
 10267                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10268  001666  EC99  F026         	call	_TFT_GreenTab_Initialize	;wreg free
 10269                           
 10270                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10271  00166A  0E00               	movlw	0
 10272  00166C  6E25               	movwf	fillScreen@color+1,c
 10273  00166E  0E00               	movlw	0
 10274  001670  6E24               	movwf	fillScreen@color,c
 10275  001672  ECB4  F027         	call	_fillScreen	;wreg free
 10276                           
 10277                           ;Main_Screen.c: 42: strcpy(txt, "ECE3301L Fa'22 S1\0");
 10278  001676  C062  F011         	movff	_txt,strcpy@to
 10279  00167A  C063  F012         	movff	_txt+1,strcpy@to+1
 10280  00167E  0E1D               	movlw	low STR_6
 10281  001680  6E13               	movwf	strcpy@from,c
 10282  001682  0EFF               	movlw	high STR_6
 10283  001684  6E14               	movwf	strcpy@from+1,c
 10284  001686  EC51  F026         	call	_strcpy	;wreg free
 10285                           
 10286                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10287  00168A  0E01               	movlw	1
 10288  00168C  6E39               	movwf	drawtext@y,c
 10289  00168E  C062  F03A         	movff	_txt,drawtext@_text
 10290  001692  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10291  001696  0EFF               	movlw	255
 10292  001698  6E3D               	movwf	drawtext@color+1,c
 10293  00169A  683C               	setf	drawtext@color,c
 10294  00169C  0E00               	movlw	0
 10295  00169E  6E3F               	movwf	drawtext@bg+1,c
 10296  0016A0  0E00               	movlw	0
 10297  0016A2  6E3E               	movwf	drawtext@bg,c
 10298  0016A4  0E01               	movlw	1
 10299  0016A6  6E40               	movwf	drawtext@size,c
 10300  0016A8  0E01               	movlw	1
 10301  0016AA  ECC7  F01A         	call	_drawtext
 10302                           
 10303                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 10304  0016AE  C062  F011         	movff	_txt,strcpy@to
 10305  0016B2  C063  F012         	movff	_txt+1,strcpy@to+1
 10306  0016B6  0E63               	movlw	low STR_7
 10307  0016B8  6E13               	movwf	strcpy@from,c
 10308  0016BA  0EFF               	movlw	high STR_7
 10309  0016BC  6E14               	movwf	strcpy@from+1,c
 10310  0016BE  EC51  F026         	call	_strcpy	;wreg free
 10311                           
 10312                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10313  0016C2  0E0B               	movlw	11
 10314  0016C4  6E39               	movwf	drawtext@y,c
 10315  0016C6  C062  F03A         	movff	_txt,drawtext@_text
 10316  0016CA  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10317  0016CE  0EF8               	movlw	248
 10318  0016D0  6E3D               	movwf	drawtext@color+1,c
 10319  0016D2  0E1F               	movlw	31
 10320  0016D4  6E3C               	movwf	drawtext@color,c
 10321  0016D6  0E00               	movlw	0
 10322  0016D8  6E3F               	movwf	drawtext@bg+1,c
 10323  0016DA  0E00               	movlw	0
 10324  0016DC  6E3E               	movwf	drawtext@bg,c
 10325  0016DE  0E01               	movlw	1
 10326  0016E0  6E40               	movwf	drawtext@size,c
 10327  0016E2  0E18               	movlw	24
 10328  0016E4  ECC7  F01A         	call	_drawtext
 10329                           
 10330                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0x07FF);
 10331  0016E8  0E00               	movlw	0
 10332  0016EA  6E1D               	movwf	drawCircle@x0+1,c
 10333  0016EC  0E28               	movlw	40
 10334  0016EE  6E1C               	movwf	drawCircle@x0,c
 10335  0016F0  0E00               	movlw	0
 10336  0016F2  6E1F               	movwf	drawCircle@y0+1,c
 10337  0016F4  0E17               	movlw	23
 10338  0016F6  6E1E               	movwf	drawCircle@y0,c
 10339  0016F8  0E00               	movlw	0
 10340  0016FA  6E21               	movwf	drawCircle@r+1,c
 10341  0016FC  0E02               	movlw	2
 10342  0016FE  6E20               	movwf	drawCircle@r,c
 10343  001700  0E07               	movlw	7
 10344  001702  6E23               	movwf	drawCircle@color+1,c
 10345  001704  6822               	setf	drawCircle@color,c
 10346  001706  ECE3  F011         	call	_drawCircle	;wreg free
 10347                           
 10348                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 10349  00170A  C062  F011         	movff	_txt,strcpy@to
 10350  00170E  C063  F012         	movff	_txt+1,strcpy@to+1
 10351  001712  0EF5               	movlw	low STR_8
 10352  001714  6E13               	movwf	strcpy@from,c
 10353  001716  0EFF               	movlw	high STR_8
 10354  001718  6E14               	movwf	strcpy@from+1,c
 10355  00171A  EC51  F026         	call	_strcpy	;wreg free
 10356                           
 10357                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0x07FF , 0x0000, 2);
 10358  00171E  0E17               	movlw	23
 10359  001720  6E39               	movwf	drawtext@y,c
 10360  001722  C062  F03A         	movff	_txt,drawtext@_text
 10361  001726  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10362  00172A  0E07               	movlw	7
 10363  00172C  6E3D               	movwf	drawtext@color+1,c
 10364  00172E  683C               	setf	drawtext@color,c
 10365  001730  0E00               	movlw	0
 10366  001732  6E3F               	movwf	drawtext@bg+1,c
 10367  001734  0E00               	movlw	0
 10368  001736  6E3E               	movwf	drawtext@bg,c
 10369  001738  0E02               	movlw	2
 10370  00173A  6E40               	movwf	drawtext@size,c
 10371  00173C  0E2D               	movlw	45
 10372  00173E  ECC7  F01A         	call	_drawtext
 10373                           
 10374                           ;Main_Screen.c: 50: strcpy(txt, "F");
 10375  001742  C062  F011         	movff	_txt,strcpy@to
 10376  001746  C063  F012         	movff	_txt+1,strcpy@to+1
 10377  00174A  0EEF               	movlw	low (STR_21+2)
 10378  00174C  6E13               	movwf	strcpy@from,c
 10379  00174E  0EFF               	movlw	high (STR_21+2)
 10380  001750  6E14               	movwf	strcpy@from+1,c
 10381  001752  EC51  F026         	call	_strcpy	;wreg free
 10382                           
 10383                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0x07FF);
 10384  001756  0E00               	movlw	0
 10385  001758  6E1D               	movwf	drawCircle@x0+1,c
 10386  00175A  0E6E               	movlw	110
 10387  00175C  6E1C               	movwf	drawCircle@x0,c
 10388  00175E  0E00               	movlw	0
 10389  001760  6E1F               	movwf	drawCircle@y0+1,c
 10390  001762  0E17               	movlw	23
 10391  001764  6E1E               	movwf	drawCircle@y0,c
 10392  001766  0E00               	movlw	0
 10393  001768  6E21               	movwf	drawCircle@r+1,c
 10394  00176A  0E02               	movlw	2
 10395  00176C  6E20               	movwf	drawCircle@r,c
 10396  00176E  0E07               	movlw	7
 10397  001770  6E23               	movwf	drawCircle@color+1,c
 10398  001772  6822               	setf	drawCircle@color,c
 10399  001774  ECE3  F011         	call	_drawCircle	;wreg free
 10400                           
 10401                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0x07FF , 0x0000, 2);
 10402  001778  0E17               	movlw	23
 10403  00177A  6E39               	movwf	drawtext@y,c
 10404  00177C  C062  F03A         	movff	_txt,drawtext@_text
 10405  001780  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10406  001784  0E07               	movlw	7
 10407  001786  6E3D               	movwf	drawtext@color+1,c
 10408  001788  683C               	setf	drawtext@color,c
 10409  00178A  0E00               	movlw	0
 10410  00178C  6E3F               	movwf	drawtext@bg+1,c
 10411  00178E  0E00               	movlw	0
 10412  001790  6E3E               	movwf	drawtext@bg,c
 10413  001792  0E02               	movlw	2
 10414  001794  6E40               	movwf	drawtext@size,c
 10415  001796  0E73               	movlw	115
 10416  001798  ECC7  F01A         	call	_drawtext
 10417                           
 10418                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10419  00179C  C062  F011         	movff	_txt,strcpy@to
 10420  0017A0  C063  F012         	movff	_txt+1,strcpy@to+1
 10421  0017A4  0EA5               	movlw	low (STR_12+6)
 10422  0017A6  6E13               	movwf	strcpy@from,c
 10423  0017A8  0EFF               	movlw	high (STR_12+6)
 10424  0017AA  6E14               	movwf	strcpy@from+1,c
 10425  0017AC  EC51  F026         	call	_strcpy	;wreg free
 10426                           
 10427                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0xF800 , 0x0000, 1);
 10428  0017B0  0E28               	movlw	40
 10429  0017B2  6E39               	movwf	drawtext@y,c
 10430  0017B4  C062  F03A         	movff	_txt,drawtext@_text
 10431  0017B8  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10432  0017BC  0EF8               	movlw	248
 10433  0017BE  6E3D               	movwf	drawtext@color+1,c
 10434  0017C0  0E00               	movlw	0
 10435  0017C2  6E3C               	movwf	drawtext@color,c
 10436  0017C4  0E00               	movlw	0
 10437  0017C6  6E3F               	movwf	drawtext@bg+1,c
 10438  0017C8  0E00               	movlw	0
 10439  0017CA  6E3E               	movwf	drawtext@bg,c
 10440  0017CC  0E01               	movlw	1
 10441  0017CE  6E40               	movwf	drawtext@size,c
 10442  0017D0  0E32               	movlw	50
 10443  0017D2  ECC7  F01A         	call	_drawtext
 10444                           
 10445                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10446  0017D6  C062  F011         	movff	_txt,strcpy@to
 10447  0017DA  C063  F012         	movff	_txt+1,strcpy@to+1
 10448  0017DE  0EDF               	movlw	low STR_11
 10449  0017E0  6E13               	movwf	strcpy@from,c
 10450  0017E2  0EFF               	movlw	high STR_11
 10451  0017E4  6E14               	movwf	strcpy@from+1,c
 10452  0017E6  EC51  F026         	call	_strcpy	;wreg free
 10453                           
 10454                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0x001F , 0x0000, 1);
 10455  0017EA  0E47               	movlw	71
 10456  0017EC  6E39               	movwf	drawtext@y,c
 10457  0017EE  C062  F03A         	movff	_txt,drawtext@_text
 10458  0017F2  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10459  0017F6  0E00               	movlw	0
 10460  0017F8  6E3D               	movwf	drawtext@color+1,c
 10461  0017FA  0E1F               	movlw	31
 10462  0017FC  6E3C               	movwf	drawtext@color,c
 10463  0017FE  0E00               	movlw	0
 10464  001800  6E3F               	movwf	drawtext@bg+1,c
 10465  001802  0E00               	movlw	0
 10466  001804  6E3E               	movwf	drawtext@bg,c
 10467  001806  0E01               	movlw	1
 10468  001808  6E40               	movwf	drawtext@size,c
 10469  00180A  0E32               	movlw	50
 10470  00180C  ECC7  F01A         	call	_drawtext
 10471                           
 10472                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10473  001810  C062  F011         	movff	_txt,strcpy@to
 10474  001814  C063  F012         	movff	_txt+1,strcpy@to+1
 10475  001818  0E9F               	movlw	low STR_12
 10476  00181A  6E13               	movwf	strcpy@from,c
 10477  00181C  0EFF               	movlw	high STR_12
 10478  00181E  6E14               	movwf	strcpy@from+1,c
 10479  001820  EC51  F026         	call	_strcpy	;wreg free
 10480                           
 10481                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0x07FF, 0x0000, 1);
 10482  001824  0E64               	movlw	100
 10483  001826  6E39               	movwf	drawtext@y,c
 10484  001828  C062  F03A         	movff	_txt,drawtext@_text
 10485  00182C  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10486  001830  0E07               	movlw	7
 10487  001832  6E3D               	movwf	drawtext@color+1,c
 10488  001834  683C               	setf	drawtext@color,c
 10489  001836  0E00               	movlw	0
 10490  001838  6E3F               	movwf	drawtext@bg+1,c
 10491  00183A  0E00               	movlw	0
 10492  00183C  6E3E               	movwf	drawtext@bg,c
 10493  00183E  0E01               	movlw	1
 10494  001840  6E40               	movwf	drawtext@size,c
 10495  001842  0E04               	movlw	4
 10496  001844  ECC7  F01A         	call	_drawtext
 10497                           
 10498                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10499  001848  C062  F011         	movff	_txt,strcpy@to
 10500  00184C  C063  F012         	movff	_txt+1,strcpy@to+1
 10501  001850  0EBF               	movlw	low STR_13
 10502  001852  6E13               	movwf	strcpy@from,c
 10503  001854  0EFF               	movlw	high STR_13
 10504  001856  6E14               	movwf	strcpy@from+1,c
 10505  001858  EC51  F026         	call	_strcpy	;wreg free
 10506                           
 10507                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0x07FF, 0x0000, 1);
 10508  00185C  0E64               	movlw	100
 10509  00185E  6E39               	movwf	drawtext@y,c
 10510  001860  C062  F03A         	movff	_txt,drawtext@_text
 10511  001864  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10512  001868  0E07               	movlw	7
 10513  00186A  6E3D               	movwf	drawtext@color+1,c
 10514  00186C  683C               	setf	drawtext@color,c
 10515  00186E  0E00               	movlw	0
 10516  001870  6E3F               	movwf	drawtext@bg+1,c
 10517  001872  0E00               	movlw	0
 10518  001874  6E3E               	movwf	drawtext@bg,c
 10519  001876  0E01               	movlw	1
 10520  001878  6E40               	movwf	drawtext@size,c
 10521  00187A  0E4D               	movlw	77
 10522  00187C  ECC7  F01A         	call	_drawtext
 10523                           
 10524                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10525  001880  C062  F011         	movff	_txt,strcpy@to
 10526  001884  C063  F012         	movff	_txt+1,strcpy@to+1
 10527  001888  0E70               	movlw	low STR_14
 10528  00188A  6E13               	movwf	strcpy@from,c
 10529  00188C  0EFF               	movlw	high STR_14
 10530  00188E  6E14               	movwf	strcpy@from+1,c
 10531  001890  EC51  F026         	call	_strcpy	;wreg free
 10532                           
 10533                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0xF800 , 0x0000, 1);
 10534  001894  0E78               	movlw	120
 10535  001896  6E39               	movwf	drawtext@y,c
 10536  001898  C062  F03A         	movff	_txt,drawtext@_text
 10537  00189C  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10538  0018A0  0EF8               	movlw	248
 10539  0018A2  6E3D               	movwf	drawtext@color+1,c
 10540  0018A4  0E00               	movlw	0
 10541  0018A6  6E3C               	movwf	drawtext@color,c
 10542  0018A8  0E00               	movlw	0
 10543  0018AA  6E3F               	movwf	drawtext@bg+1,c
 10544  0018AC  0E00               	movlw	0
 10545  0018AE  6E3E               	movwf	drawtext@bg,c
 10546  0018B0  0E01               	movlw	1
 10547  0018B2  6E40               	movwf	drawtext@size,c
 10548  0018B4  0E06               	movlw	6
 10549  0018B6  ECC7  F01A         	call	_drawtext
 10550                           
 10551                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10552  0018BA  C062  F011         	movff	_txt,strcpy@to
 10553  0018BE  C063  F012         	movff	_txt+1,strcpy@to+1
 10554  0018C2  0ED8               	movlw	low STR_15
 10555  0018C4  6E13               	movwf	strcpy@from,c
 10556  0018C6  0EFF               	movlw	high STR_15
 10557  0018C8  6E14               	movwf	strcpy@from+1,c
 10558  0018CA  EC51  F026         	call	_strcpy	;wreg free
 10559                           
 10560                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0xF800 , 0x0000, 1);
 10561  0018CE  0E78               	movlw	120
 10562  0018D0  6E39               	movwf	drawtext@y,c
 10563  0018D2  C062  F03A         	movff	_txt,drawtext@_text
 10564  0018D6  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10565  0018DA  0EF8               	movlw	248
 10566  0018DC  6E3D               	movwf	drawtext@color+1,c
 10567  0018DE  0E00               	movlw	0
 10568  0018E0  6E3C               	movwf	drawtext@color,c
 10569  0018E2  0E00               	movlw	0
 10570  0018E4  6E3F               	movwf	drawtext@bg+1,c
 10571  0018E6  0E00               	movlw	0
 10572  0018E8  6E3E               	movwf	drawtext@bg,c
 10573  0018EA  0E01               	movlw	1
 10574  0018EC  6E40               	movwf	drawtext@size,c
 10575  0018EE  0E55               	movlw	85
 10576  0018F0  ECC7  F01A         	call	_drawtext
 10577                           
 10578                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10579  0018F4  C062  F011         	movff	_txt,strcpy@to
 10580  0018F8  C063  F012         	movff	_txt+1,strcpy@to+1
 10581  0018FC  0EF8               	movlw	low STR_16
 10582  0018FE  6E13               	movwf	strcpy@from,c
 10583  001900  0EFF               	movlw	high STR_16
 10584  001902  6E14               	movwf	strcpy@from+1,c
 10585  001904  EC51  F026         	call	_strcpy	;wreg free
 10586                           
 10587                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10588  001908  0E8C               	movlw	140
 10589  00190A  6E39               	movwf	drawtext@y,c
 10590  00190C  C062  F03A         	movff	_txt,drawtext@_text
 10591  001910  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10592  001914  0EFF               	movlw	255
 10593  001916  6E3D               	movwf	drawtext@color+1,c
 10594  001918  683C               	setf	drawtext@color,c
 10595  00191A  0E00               	movlw	0
 10596  00191C  6E3F               	movwf	drawtext@bg+1,c
 10597  00191E  0E00               	movlw	0
 10598  001920  6E3E               	movwf	drawtext@bg,c
 10599  001922  0E01               	movlw	1
 10600  001924  6E40               	movwf	drawtext@size,c
 10601  001926  0E0C               	movlw	12
 10602  001928  ECC7  F01A         	call	_drawtext
 10603                           
 10604                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10605  00192C  C062  F011         	movff	_txt,strcpy@to
 10606  001930  C063  F012         	movff	_txt+1,strcpy@to+1
 10607  001934  0EFB               	movlw	low STR_17
 10608  001936  6E13               	movwf	strcpy@from,c
 10609  001938  0EFF               	movlw	high STR_17
 10610  00193A  6E14               	movwf	strcpy@from+1,c
 10611  00193C  EC51  F026         	call	_strcpy	;wreg free
 10612                           
 10613                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10614  001940  0E8C               	movlw	140
 10615  001942  6E39               	movwf	drawtext@y,c
 10616  001944  C062  F03A         	movff	_txt,drawtext@_text
 10617  001948  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10618  00194C  0EFF               	movlw	255
 10619  00194E  6E3D               	movwf	drawtext@color+1,c
 10620  001950  683C               	setf	drawtext@color,c
 10621  001952  0E00               	movlw	0
 10622  001954  6E3F               	movwf	drawtext@bg+1,c
 10623  001956  0E00               	movlw	0
 10624  001958  6E3E               	movwf	drawtext@bg,c
 10625  00195A  0E01               	movlw	1
 10626  00195C  6E40               	movwf	drawtext@size,c
 10627  00195E  0E21               	movlw	33
 10628  001960  ECC7  F01A         	call	_drawtext
 10629                           
 10630                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10631  001964  C062  F011         	movff	_txt,strcpy@to
 10632  001968  C063  F012         	movff	_txt+1,strcpy@to+1
 10633  00196C  0EE4               	movlw	low STR_18
 10634  00196E  6E13               	movwf	strcpy@from,c
 10635  001970  0EFF               	movlw	high STR_18
 10636  001972  6E14               	movwf	strcpy@from+1,c
 10637  001974  EC51  F026         	call	_strcpy	;wreg free
 10638                           
 10639                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10640  001978  0E8C               	movlw	140
 10641  00197A  6E39               	movwf	drawtext@y,c
 10642  00197C  C062  F03A         	movff	_txt,drawtext@_text
 10643  001980  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10644  001984  0EFF               	movlw	255
 10645  001986  6E3D               	movwf	drawtext@color+1,c
 10646  001988  683C               	setf	drawtext@color,c
 10647  00198A  0E00               	movlw	0
 10648  00198C  6E3F               	movwf	drawtext@bg+1,c
 10649  00198E  0E00               	movlw	0
 10650  001990  6E3E               	movwf	drawtext@bg,c
 10651  001992  0E01               	movlw	1
 10652  001994  6E40               	movwf	drawtext@size,c
 10653  001996  0E32               	movlw	50
 10654  001998  ECC7  F01A         	call	_drawtext
 10655                           
 10656                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10657  00199C  C062  F011         	movff	_txt,strcpy@to
 10658  0019A0  C063  F012         	movff	_txt+1,strcpy@to+1
 10659  0019A4  0EF1               	movlw	low STR_19
 10660  0019A6  6E13               	movwf	strcpy@from,c
 10661  0019A8  0EFF               	movlw	high STR_19
 10662  0019AA  6E14               	movwf	strcpy@from+1,c
 10663  0019AC  EC51  F026         	call	_strcpy	;wreg free
 10664                           
 10665                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10666  0019B0  0E8C               	movlw	140
 10667  0019B2  6E39               	movwf	drawtext@y,c
 10668  0019B4  C062  F03A         	movff	_txt,drawtext@_text
 10669  0019B8  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10670  0019BC  0EFF               	movlw	255
 10671  0019BE  6E3D               	movwf	drawtext@color+1,c
 10672  0019C0  683C               	setf	drawtext@color,c
 10673  0019C2  0E00               	movlw	0
 10674  0019C4  6E3F               	movwf	drawtext@bg+1,c
 10675  0019C6  0E00               	movlw	0
 10676  0019C8  6E3E               	movwf	drawtext@bg,c
 10677  0019CA  0E01               	movlw	1
 10678  0019CC  6E40               	movwf	drawtext@size,c
 10679  0019CE  0E5F               	movlw	95
 10680  0019D0  ECC7  F01A         	call	_drawtext
 10681  0019D4  0012               	return		;funcret
 10682  0019D6                     __end_of_Initialize_Screen:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           intcon2	equ	0xFF1
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           postdec1	equ	0xFE5
 10695                           fsr1l	equ	0xFE1
 10696                           indf2	equ	0xFDF
 10697                           postinc2	equ	0xFDE
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _strcpy *****************
 10703 ;; Defined at:
 10704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  to              2   16[COMRAM] PTR unsigned char 
 10707 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10708 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10709 ;;		 -> STR_36(5), STR_35(5), STR_34(12), STR_33(19), 
 10710 ;;		 -> STR_32(16), STR_31(10), STR_30(11), STR_29(19), 
 10711 ;;		 -> STR_27(5), STR_26(8), STR_25(8), STR_24(18), 
 10712 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
 10713 ;;		 -> STR_19(4), STR_18(5), STR_17(3), STR_16(3), 
 10714 ;;		 -> STR_15(7), STR_14(13), STR_13(9), STR_12(11), 
 10715 ;;		 -> STR_11(5), STR_10(5), STR_9(2), STR_8(3), 
 10716 ;;		 -> STR_7(13), STR_6(19), 
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10719 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10720 ;; Return value:  Size  Location     Type
 10721 ;;                  2   16[COMRAM] PTR unsigned char 
 10722 ;; Registers used:
 10723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;Total ram usage:        6 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    3
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_Initialize_Screen
 10740 ;;		_Update_Screen
 10741 ;;		_Initialize_Setup_Alarm_Time_Screen
 10742 ;;		_Initialize_Setup_Heater_Screen
 10743 ;;		_Initialize_Setup_Time_Screen
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text49
 10748  004CA2                     __ptext49:
 10749                           	opt stack 0
 10750  004CA2                     _strcpy:
 10751                           	opt stack 26
 10752                           
 10753                           ;incstack = 0
 10754  004CA2  C011  F015         	movff	strcpy@to,strcpy@cp
 10755  004CA6  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10756  004CAA  D005               	goto	l6814
 10757  004CAC                     l6812:
 10758  004CAC  4A15               	infsnz	strcpy@cp,f,c
 10759  004CAE  2A16               	incf	strcpy@cp+1,f,c
 10760  004CB0  4A13               	infsnz	strcpy@from,f,c
 10761  004CB2  2A14               	incf	strcpy@from+1,f,c
 10762  004CB4  D000               	goto	l6814
 10763  004CB6                     l6814:
 10764  004CB6  C013  FFF6         	movff	strcpy@from,tblptrl
 10765  004CBA  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10766  004CBE                     	if	0	;tblptru may be non-zero
 10767  004CBE                     	endif
 10768  004CBE                     	if	0	;tblptru may be non-zero
 10769  004CBE                     	endif
 10770  004CBE  C015  FFD9         	movff	strcpy@cp,fsr2l
 10771  004CC2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10772  004CC6  0008               	tblrd		*
 10773  004CC8  CFF5 FFDF          	movff	tablat,indf2
 10774  004CCC  50DF               	movf	indf2,w,c
 10775  004CCE  A4D8               	btfss	status,2,c
 10776  004CD0  D7ED               	goto	l6812
 10777                           
 10778                           ;	Return value of _strcpy is never used
 10779  004CD2  0012               	return		;funcret
 10780  004CD4                     __end_of_strcpy:
 10781                           	opt stack 0
 10782                           tblptru	equ	0xFF8
 10783                           tblptrh	equ	0xFF7
 10784                           tblptrl	equ	0xFF6
 10785                           tablat	equ	0xFF5
 10786                           prodh	equ	0xFF4
 10787                           prodl	equ	0xFF3
 10788                           intcon	equ	0xFF2
 10789                           intcon2	equ	0xFF1
 10790                           postinc0	equ	0xFEE
 10791                           wreg	equ	0xFE8
 10792                           postdec1	equ	0xFE5
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function _fillScreen *****************
 10801 ;; Defined at:
 10802 ;;		line 619 in file "ST7735_TFT.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  color           2   35[COMRAM] unsigned int 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;		None
 10807 ;; Return value:  Size  Location     Type
 10808 ;;		None               void
 10809 ;; Registers used:
 10810 ;;		wreg, status,2, status,0, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;Total ram usage:        2 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    7
 10823 ;; This function calls:
 10824 ;;		_fillRectangle
 10825 ;; This function is called by:
 10826 ;;		_Initialize_Screen
 10827 ;;		_Initialize_Setup_Alarm_Time_Screen
 10828 ;;		_Initialize_Setup_Heater_Screen
 10829 ;;		_Initialize_Setup_Time_Screen
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           	psect	text50
 10834  004F68                     __ptext50:
 10835                           	opt stack 0
 10836  004F68                     _fillScreen:
 10837                           	opt stack 22
 10838                           
 10839                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10840                           
 10841                           ;incstack = 0
 10842  004F68  0E00               	movlw	0
 10843  004F6A  6E18               	movwf	fillRectangle@y,c
 10844  004F6C  0E80               	movlw	128
 10845  004F6E  6E19               	movwf	fillRectangle@w,c
 10846  004F70  0EA0               	movlw	160
 10847  004F72  6E1A               	movwf	fillRectangle@h,c
 10848  004F74  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10849  004F78  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10850  004F7C  0E00               	movlw	0
 10851  004F7E  EC38  F01B         	call	_fillRectangle
 10852  004F82  0012               	return		;funcret
 10853  004F84                     __end_of_fillScreen:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           intcon2	equ	0xFF1
 10863                           postinc0	equ	0xFEE
 10864                           wreg	equ	0xFE8
 10865                           postdec1	equ	0xFE5
 10866                           fsr1l	equ	0xFE1
 10867                           indf2	equ	0xFDF
 10868                           postinc2	equ	0xFDE
 10869                           fsr2h	equ	0xFDA
 10870                           fsr2l	equ	0xFD9
 10871                           status	equ	0xFD8
 10872                           
 10873 ;; *************** function _fillRectangle *****************
 10874 ;; Defined at:
 10875 ;;		line 503 in file "ST7735_TFT.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;  x               1    wreg     unsigned char 
 10878 ;;  y               1   23[COMRAM] unsigned char 
 10879 ;;  w               1   24[COMRAM] unsigned char 
 10880 ;;  h               1   25[COMRAM] unsigned char 
 10881 ;;  color           2   26[COMRAM] unsigned int 
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;  x               1   34[COMRAM] unsigned char 
 10884 ;;  lo              1   33[COMRAM] unsigned char 
 10885 ;;  hi              1   32[COMRAM] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10895 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;Total ram usage:       12 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    6
 10902 ;; This function calls:
 10903 ;;		_setAddrWindow
 10904 ;;		_spiwrite
 10905 ;; This function is called by:
 10906 ;;		_fillScreen
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	text51
 10911  003670                     __ptext51:
 10912                           	opt stack 0
 10913  003670                     _fillRectangle:
 10914                           	opt stack 22
 10915                           
 10916                           ;incstack = 0
 10917                           ;fillRectangle@x stored from wreg
 10918  003670  6E23               	movwf	fillRectangle@x,c
 10919                           
 10920                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10921                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10922  003672  0E80               	movlw	128
 10923  003674  6023               	cpfslt	fillRectangle@x,c
 10924  003676  D069               	goto	l1325
 10925  003678  0E9F               	movlw	159
 10926  00367A  6418               	cpfsgt	fillRectangle@y,c
 10927  00367C  D001               	goto	l6090
 10928                           
 10929                           ;ST7735_TFT.c: 507: return;
 10930  00367E  D065               	goto	l1325
 10931  003680                     l6090:
 10932                           
 10933                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10934  003680  0EFF               	movlw	255
 10935  003682  6E1D               	movwf	??_fillRectangle& (0+255),c
 10936  003684  0EFF               	movlw	255
 10937  003686  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10938  003688  5019               	movf	fillRectangle@w,w,c
 10939  00368A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10940  00368E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10941  003690  261F               	addwf	??_fillRectangle+2,f,c
 10942  003692  0E00               	movlw	0
 10943  003694  2220               	addwfc	??_fillRectangle+3,f,c
 10944  003696  501D               	movf	??_fillRectangle,w,c
 10945  003698  261F               	addwf	??_fillRectangle+2,f,c
 10946  00369A  501E               	movf	??_fillRectangle+1,w,c
 10947  00369C  2220               	addwfc	??_fillRectangle+3,f,c
 10948  00369E  BE20               	btfsc	??_fillRectangle+3,7,c
 10949  0036A0  D00A               	goto	l1326
 10950  0036A2  5020               	movf	??_fillRectangle+3,w,c
 10951  0036A4  E104               	bnz	u4230
 10952  0036A6  0E80               	movlw	128
 10953  0036A8  5C1F               	subwf	??_fillRectangle+2,w,c
 10954  0036AA  A0D8               	btfss	status,0,c
 10955  0036AC  D004               	goto	l1326
 10956  0036AE                     u4230:
 10957                           
 10958                           ;ST7735_TFT.c: 509: w = 128 - x;
 10959  0036AE  5023               	movf	fillRectangle@x,w,c
 10960  0036B0  0800               	sublw	0
 10961  0036B2  0F80               	addlw	128
 10962  0036B4  6E19               	movwf	fillRectangle@w,c
 10963  0036B6                     l1326:
 10964                           
 10965                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 10966  0036B6  0EFF               	movlw	255
 10967  0036B8  6E1D               	movwf	??_fillRectangle& (0+255),c
 10968  0036BA  0EFF               	movlw	255
 10969  0036BC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10970  0036BE  501A               	movf	fillRectangle@h,w,c
 10971  0036C0  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10972  0036C4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10973  0036C6  261F               	addwf	??_fillRectangle+2,f,c
 10974  0036C8  0E00               	movlw	0
 10975  0036CA  2220               	addwfc	??_fillRectangle+3,f,c
 10976  0036CC  501D               	movf	??_fillRectangle,w,c
 10977  0036CE  261F               	addwf	??_fillRectangle+2,f,c
 10978  0036D0  501E               	movf	??_fillRectangle+1,w,c
 10979  0036D2  2220               	addwfc	??_fillRectangle+3,f,c
 10980  0036D4  BE20               	btfsc	??_fillRectangle+3,7,c
 10981  0036D6  D00B               	goto	l6096
 10982  0036D8  5020               	movf	??_fillRectangle+3,w,c
 10983  0036DA  E104               	bnz	u4240
 10984  0036DC  0EA0               	movlw	160
 10985  0036DE  5C1F               	subwf	??_fillRectangle+2,w,c
 10986  0036E0  A0D8               	btfss	status,0,c
 10987  0036E2  D005               	goto	l6096
 10988  0036E4                     u4240:
 10989                           
 10990                           ;ST7735_TFT.c: 511: h = 160 - y;
 10991  0036E4  5018               	movf	fillRectangle@y,w,c
 10992  0036E6  0800               	sublw	0
 10993  0036E8  0FA0               	addlw	160
 10994  0036EA  6E1A               	movwf	fillRectangle@h,c
 10995  0036EC  D000               	goto	l6096
 10996  0036EE                     l6096:
 10997                           
 10998                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 10999  0036EE  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 11000  0036F2  5023               	movf	fillRectangle@x,w,c
 11001  0036F4  2419               	addwf	fillRectangle@w,w,c
 11002  0036F6  6E1D               	movwf	??_fillRectangle& (0+255),c
 11003  0036F8  041D               	decf	??_fillRectangle,w,c
 11004  0036FA  6E15               	movwf	setAddrWindow@x1,c
 11005  0036FC  5018               	movf	fillRectangle@y,w,c
 11006  0036FE  241A               	addwf	fillRectangle@h,w,c
 11007  003700  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 11008  003702  041E               	decf	??_fillRectangle+1,w,c
 11009  003704  6E16               	movwf	setAddrWindow@y1,c
 11010  003706  5023               	movf	fillRectangle@x,w,c
 11011  003708  EC11  F024         	call	_setAddrWindow
 11012                           
 11013                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 11014  00370C  501C               	movf	fillRectangle@color+1,w,c
 11015  00370E  6E21               	movwf	fillRectangle@hi,c
 11016  003710  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 11017                           
 11018                           ;ST7735_TFT.c: 514: PORTEbits.RE0 = 1;
 11019  003714  8084               	bsf	3972,0,c	;volatile
 11020                           
 11021                           ;ST7735_TFT.c: 515: PORTCbits.RC4 = 0;
 11022  003716  9882               	bcf	3970,4,c	;volatile
 11023                           
 11024                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 11025  003718  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 11026  00371C                     l6108:
 11027  00371C  5018               	movf	fillRectangle@y,w,c
 11028  00371E  B4D8               	btfsc	status,2,c
 11029  003720  D013               	goto	l1329
 11030  003722  D001               	goto	l1328
 11031  003724  D011               	goto	l1329
 11032  003726                     l1328:
 11033                           
 11034                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 11035  003726  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 11036  00372A                     l6112:
 11037  00372A  5023               	movf	fillRectangle@x,w,c
 11038  00372C  B4D8               	btfsc	status,2,c
 11039  00372E  D00A               	goto	l6122
 11040  003730  D001               	goto	l6116
 11041  003732  D008               	goto	l6122
 11042  003734                     l6116:
 11043                           
 11044                           ;ST7735_TFT.c: 519: spiwrite(hi);
 11045  003734  5021               	movf	fillRectangle@hi,w,c
 11046  003736  EC41  F028         	call	_spiwrite
 11047                           
 11048                           ;ST7735_TFT.c: 520: spiwrite(lo);
 11049  00373A  5022               	movf	fillRectangle@lo,w,c
 11050  00373C  EC41  F028         	call	_spiwrite
 11051  003740  0623               	decf	fillRectangle@x,f,c
 11052  003742  D7F3               	goto	l6112
 11053  003744                     l6122:
 11054  003744  0618               	decf	fillRectangle@y,f,c
 11055  003746  D7EA               	goto	l6108
 11056  003748                     l1329:
 11057                           
 11058                           ;ST7735_TFT.c: 521: }
 11059                           ;ST7735_TFT.c: 522: }
 11060                           ;ST7735_TFT.c: 523: PORTCbits.RC4 = 1;
 11061  003748  8882               	bsf	3970,4,c	;volatile
 11062  00374A                     l1325:
 11063  00374A  0012               	return		;funcret
 11064  00374C                     __end_of_fillRectangle:
 11065                           	opt stack 0
 11066                           tblptru	equ	0xFF8
 11067                           tblptrh	equ	0xFF7
 11068                           tblptrl	equ	0xFF6
 11069                           tablat	equ	0xFF5
 11070                           prodh	equ	0xFF4
 11071                           prodl	equ	0xFF3
 11072                           intcon	equ	0xFF2
 11073                           intcon2	equ	0xFF1
 11074                           postinc0	equ	0xFEE
 11075                           wreg	equ	0xFE8
 11076                           postdec1	equ	0xFE5
 11077                           fsr1l	equ	0xFE1
 11078                           indf2	equ	0xFDF
 11079                           postinc2	equ	0xFDE
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _drawCircle *****************
 11085 ;; Defined at:
 11086 ;;		line 528 in file "ST7735_TFT.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  x0              2   27[COMRAM] int 
 11089 ;;  y0              2   29[COMRAM] int 
 11090 ;;  r               2   31[COMRAM] int 
 11091 ;;  color           2   33[COMRAM] unsigned int 
 11092 ;; Auto vars:     Size  Location     Type
 11093 ;;  y               2   45[COMRAM] int 
 11094 ;;  x               2   43[COMRAM] int 
 11095 ;;  f               2   41[COMRAM] int 
 11096 ;;  ddF_y           2   39[COMRAM] int 
 11097 ;;  ddF_x           2   37[COMRAM] int 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;		None               void
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0, cstack
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11107 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;Total ram usage:       20 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    7
 11114 ;; This function calls:
 11115 ;;		_drawPixel
 11116 ;; This function is called by:
 11117 ;;		_Initialize_Screen
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text52
 11122  0023C6                     __ptext52:
 11123                           	opt stack 0
 11124  0023C6                     _drawCircle:
 11125                           	opt stack 22
 11126                           
 11127                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 11128                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11129                           
 11130                           ;incstack = 0
 11131  0023C6  C020  F024         	movff	drawCircle@r,??_drawCircle
 11132  0023CA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11133  0023CE  1E24               	comf	??_drawCircle,f,c
 11134  0023D0  1E25               	comf	??_drawCircle+1,f,c
 11135  0023D2  4A24               	infsnz	??_drawCircle,f,c
 11136  0023D4  2A25               	incf	??_drawCircle+1,f,c
 11137  0023D6  0E01               	movlw	1
 11138  0023D8  2424               	addwf	??_drawCircle,w,c
 11139  0023DA  6E2A               	movwf	drawCircle@f,c
 11140  0023DC  0E00               	movlw	0
 11141  0023DE  2025               	addwfc	??_drawCircle+1,w,c
 11142  0023E0  6E2B               	movwf	drawCircle@f+1,c
 11143  0023E2  0E00               	movlw	0
 11144  0023E4  6E27               	movwf	drawCircle@ddF_x+1,c
 11145  0023E6  0E01               	movlw	1
 11146  0023E8  6E26               	movwf	drawCircle@ddF_x,c
 11147  0023EA  C020  F024         	movff	drawCircle@r,??_drawCircle
 11148  0023EE  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11149  0023F2  90D8               	bcf	status,0,c
 11150  0023F4  3624               	rlcf	??_drawCircle,f,c
 11151  0023F6  3625               	rlcf	??_drawCircle+1,f,c
 11152  0023F8  1E24               	comf	??_drawCircle,f,c
 11153  0023FA  1E25               	comf	??_drawCircle+1,f,c
 11154  0023FC  4A24               	infsnz	??_drawCircle,f,c
 11155  0023FE  2A25               	incf	??_drawCircle+1,f,c
 11156  002400  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11157  002404  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11158  002408  0E00               	movlw	0
 11159  00240A  6E2D               	movwf	drawCircle@x+1,c
 11160  00240C  0E00               	movlw	0
 11161  00240E  6E2C               	movwf	drawCircle@x,c
 11162  002410  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11163  002414  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11164                           
 11165                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 11166  002418  501E               	movf	drawCircle@y0,w,c
 11167  00241A  2420               	addwf	drawCircle@r,w,c
 11168  00241C  6E18               	movwf	drawPixel@y,c
 11169  00241E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11170  002422  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11171  002426  501C               	movf	drawCircle@x0,w,c
 11172  002428  EC6A  F026         	call	_drawPixel
 11173                           
 11174                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 11175  00242C  5020               	movf	drawCircle@r,w,c
 11176  00242E  0800               	sublw	0
 11177  002430  241E               	addwf	drawCircle@y0,w,c
 11178  002432  6E18               	movwf	drawPixel@y,c
 11179  002434  C022  F019         	movff	drawCircle@color,drawPixel@color
 11180  002438  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11181  00243C  501C               	movf	drawCircle@x0,w,c
 11182  00243E  EC6A  F026         	call	_drawPixel
 11183                           
 11184                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 11185  002442  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11186  002446  C022  F019         	movff	drawCircle@color,drawPixel@color
 11187  00244A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11188  00244E  501C               	movf	drawCircle@x0,w,c
 11189  002450  2420               	addwf	drawCircle@r,w,c
 11190  002452  EC6A  F026         	call	_drawPixel
 11191                           
 11192                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 11193  002456  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11194  00245A  C022  F019         	movff	drawCircle@color,drawPixel@color
 11195  00245E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11196  002462  5020               	movf	drawCircle@r,w,c
 11197  002464  0800               	sublw	0
 11198  002466  241C               	addwf	drawCircle@x0,w,c
 11199  002468  EC6A  F026         	call	_drawPixel
 11200                           
 11201                           ;ST7735_TFT.c: 536: while (x < y) {
 11202  00246C  D078               	goto	l6898
 11203  00246E                     l6870:
 11204                           
 11205                           ;ST7735_TFT.c: 537: if (f >= 0) {
 11206  00246E  BE2B               	btfsc	drawCircle@f+1,7,c
 11207  002470  D00B               	goto	l1336
 11208                           
 11209                           ;ST7735_TFT.c: 538: y--;
 11210  002472  062E               	decf	drawCircle@y,f,c
 11211  002474  A0D8               	btfss	status,0,c
 11212  002476  062F               	decf	drawCircle@y+1,f,c
 11213                           
 11214                           ;ST7735_TFT.c: 539: ddF_y += 2;
 11215  002478  0E02               	movlw	2
 11216  00247A  2628               	addwf	drawCircle@ddF_y,f,c
 11217  00247C  0E00               	movlw	0
 11218  00247E  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11219                           
 11220                           ;ST7735_TFT.c: 540: f += ddF_y;
 11221  002480  5028               	movf	drawCircle@ddF_y,w,c
 11222  002482  262A               	addwf	drawCircle@f,f,c
 11223  002484  5029               	movf	drawCircle@ddF_y+1,w,c
 11224  002486  222B               	addwfc	drawCircle@f+1,f,c
 11225  002488                     l1336:
 11226                           
 11227                           ;ST7735_TFT.c: 541: }
 11228                           ;ST7735_TFT.c: 542: x++;
 11229  002488  4A2C               	infsnz	drawCircle@x,f,c
 11230  00248A  2A2D               	incf	drawCircle@x+1,f,c
 11231                           
 11232                           ;ST7735_TFT.c: 543: ddF_x += 2;
 11233  00248C  0E02               	movlw	2
 11234  00248E  2626               	addwf	drawCircle@ddF_x,f,c
 11235  002490  0E00               	movlw	0
 11236  002492  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11237                           
 11238                           ;ST7735_TFT.c: 544: f += ddF_x;
 11239  002494  5026               	movf	drawCircle@ddF_x,w,c
 11240  002496  262A               	addwf	drawCircle@f,f,c
 11241  002498  5027               	movf	drawCircle@ddF_x+1,w,c
 11242  00249A  222B               	addwfc	drawCircle@f+1,f,c
 11243                           
 11244                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 11245  00249C  501E               	movf	drawCircle@y0,w,c
 11246  00249E  242E               	addwf	drawCircle@y,w,c
 11247  0024A0  6E18               	movwf	drawPixel@y,c
 11248  0024A2  C022  F019         	movff	drawCircle@color,drawPixel@color
 11249  0024A6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11250  0024AA  501C               	movf	drawCircle@x0,w,c
 11251  0024AC  242C               	addwf	drawCircle@x,w,c
 11252  0024AE  EC6A  F026         	call	_drawPixel
 11253                           
 11254                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 11255  0024B2  501E               	movf	drawCircle@y0,w,c
 11256  0024B4  242E               	addwf	drawCircle@y,w,c
 11257  0024B6  6E18               	movwf	drawPixel@y,c
 11258  0024B8  C022  F019         	movff	drawCircle@color,drawPixel@color
 11259  0024BC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11260  0024C0  502C               	movf	drawCircle@x,w,c
 11261  0024C2  0800               	sublw	0
 11262  0024C4  241C               	addwf	drawCircle@x0,w,c
 11263  0024C6  EC6A  F026         	call	_drawPixel
 11264                           
 11265                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 11266  0024CA  502E               	movf	drawCircle@y,w,c
 11267  0024CC  0800               	sublw	0
 11268  0024CE  241E               	addwf	drawCircle@y0,w,c
 11269  0024D0  6E18               	movwf	drawPixel@y,c
 11270  0024D2  C022  F019         	movff	drawCircle@color,drawPixel@color
 11271  0024D6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11272  0024DA  501C               	movf	drawCircle@x0,w,c
 11273  0024DC  242C               	addwf	drawCircle@x,w,c
 11274  0024DE  EC6A  F026         	call	_drawPixel
 11275                           
 11276                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 11277  0024E2  502E               	movf	drawCircle@y,w,c
 11278  0024E4  0800               	sublw	0
 11279  0024E6  241E               	addwf	drawCircle@y0,w,c
 11280  0024E8  6E18               	movwf	drawPixel@y,c
 11281  0024EA  C022  F019         	movff	drawCircle@color,drawPixel@color
 11282  0024EE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11283  0024F2  502C               	movf	drawCircle@x,w,c
 11284  0024F4  0800               	sublw	0
 11285  0024F6  241C               	addwf	drawCircle@x0,w,c
 11286  0024F8  EC6A  F026         	call	_drawPixel
 11287                           
 11288                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 11289  0024FC  501E               	movf	drawCircle@y0,w,c
 11290  0024FE  242C               	addwf	drawCircle@x,w,c
 11291  002500  6E18               	movwf	drawPixel@y,c
 11292  002502  C022  F019         	movff	drawCircle@color,drawPixel@color
 11293  002506  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11294  00250A  501C               	movf	drawCircle@x0,w,c
 11295  00250C  242E               	addwf	drawCircle@y,w,c
 11296  00250E  EC6A  F026         	call	_drawPixel
 11297                           
 11298                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 11299  002512  501E               	movf	drawCircle@y0,w,c
 11300  002514  242C               	addwf	drawCircle@x,w,c
 11301  002516  6E18               	movwf	drawPixel@y,c
 11302  002518  C022  F019         	movff	drawCircle@color,drawPixel@color
 11303  00251C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11304  002520  502E               	movf	drawCircle@y,w,c
 11305  002522  0800               	sublw	0
 11306  002524  241C               	addwf	drawCircle@x0,w,c
 11307  002526  EC6A  F026         	call	_drawPixel
 11308                           
 11309                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 11310  00252A  502C               	movf	drawCircle@x,w,c
 11311  00252C  0800               	sublw	0
 11312  00252E  241E               	addwf	drawCircle@y0,w,c
 11313  002530  6E18               	movwf	drawPixel@y,c
 11314  002532  C022  F019         	movff	drawCircle@color,drawPixel@color
 11315  002536  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11316  00253A  501C               	movf	drawCircle@x0,w,c
 11317  00253C  242E               	addwf	drawCircle@y,w,c
 11318  00253E  EC6A  F026         	call	_drawPixel
 11319                           
 11320                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 11321  002542  502C               	movf	drawCircle@x,w,c
 11322  002544  0800               	sublw	0
 11323  002546  241E               	addwf	drawCircle@y0,w,c
 11324  002548  6E18               	movwf	drawPixel@y,c
 11325  00254A  C022  F019         	movff	drawCircle@color,drawPixel@color
 11326  00254E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11327  002552  502E               	movf	drawCircle@y,w,c
 11328  002554  0800               	sublw	0
 11329  002556  241C               	addwf	drawCircle@x0,w,c
 11330  002558  EC6A  F026         	call	_drawPixel
 11331  00255C  D000               	goto	l6898
 11332  00255E                     l6898:
 11333  00255E  502E               	movf	drawCircle@y,w,c
 11334  002560  5C2C               	subwf	drawCircle@x,w,c
 11335  002562  502D               	movf	drawCircle@x+1,w,c
 11336  002564  0A80               	xorlw	128
 11337  002566  6E24               	movwf	??_drawCircle& (0+255),c
 11338  002568  502F               	movf	drawCircle@y+1,w,c
 11339  00256A  0A80               	xorlw	128
 11340  00256C  5824               	subwfb	??_drawCircle& (0+255),w,c
 11341  00256E  A0D8               	btfss	status,0,c
 11342  002570  D77E               	goto	l6870
 11343  002572  0012               	return		;funcret
 11344  002574                     __end_of_drawCircle:
 11345                           	opt stack 0
 11346                           tblptru	equ	0xFF8
 11347                           tblptrh	equ	0xFF7
 11348                           tblptrl	equ	0xFF6
 11349                           tablat	equ	0xFF5
 11350                           prodh	equ	0xFF4
 11351                           prodl	equ	0xFF3
 11352                           intcon	equ	0xFF2
 11353                           intcon2	equ	0xFF1
 11354                           postinc0	equ	0xFEE
 11355                           wreg	equ	0xFE8
 11356                           postdec1	equ	0xFE5
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _TFT_GreenTab_Initialize *****************
 11365 ;; Defined at:
 11366 ;;		line 644 in file "ST7735_TFT.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;		None
 11371 ;; Return value:  Size  Location     Type
 11372 ;;		None               void
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:        0 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    6
 11387 ;; This function calls:
 11388 ;;		_Rcmd1
 11389 ;;		_Rcmd2red
 11390 ;;		_Rcmd3
 11391 ;;		_write_command
 11392 ;;		_write_data
 11393 ;; This function is called by:
 11394 ;;		_Initialize_Screen
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text53
 11399  004D32                     __ptext53:
 11400                           	opt stack 0
 11401  004D32                     _TFT_GreenTab_Initialize:
 11402                           	opt stack 23
 11403                           
 11404                           ;ST7735_TFT.c: 646: PORTCbits.RC4 = 1;
 11405                           
 11406                           ;incstack = 0
 11407  004D32  8882               	bsf	3970,4,c	;volatile
 11408                           
 11409                           ;ST7735_TFT.c: 647: PORTEbits.RE0 = 0;
 11410  004D34  9084               	bcf	3972,0,c	;volatile
 11411                           
 11412                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11413  004D36  0E80               	movlw	128
 11414  004D38  6EC7               	movwf	4039,c	;volatile
 11415                           
 11416                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11417  004D3A  0E30               	movlw	48
 11418  004D3C  6EC6               	movwf	4038,c	;volatile
 11419                           
 11420                           ;ST7735_TFT.c: 653: Rcmd1();
 11421  004D3E  ECE8  F014         	call	_Rcmd1	;wreg free
 11422                           
 11423                           ;ST7735_TFT.c: 654: Rcmd2red();
 11424  004D42  EC68  F025         	call	_Rcmd2red	;wreg free
 11425                           
 11426                           ;ST7735_TFT.c: 655: Rcmd3();
 11427  004D46  EC07  F018         	call	_Rcmd3	;wreg free
 11428                           
 11429                           ;ST7735_TFT.c: 656: write_command(0x36);
 11430  004D4A  0E36               	movlw	54
 11431  004D4C  ECBD  F028         	call	_write_command
 11432                           
 11433                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11434  004D50  0EC0               	movlw	192
 11435  004D52  ECB5  F028         	call	_write_data
 11436                           
 11437                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11438  004D56  0E01               	movlw	1
 11439  004D58  0100               	movlb	0	; () banked
 11440  004D5A  6FA8               	movwf	__tft_type& (0+255),b
 11441                           
 11442                           ; BSR set to: 0
 11443  004D5C  0012               	return		;funcret
 11444  004D5E                     __end_of_TFT_GreenTab_Initialize:
 11445                           	opt stack 0
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           intcon2	equ	0xFF1
 11454                           postinc0	equ	0xFEE
 11455                           wreg	equ	0xFE8
 11456                           postdec1	equ	0xFE5
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           fsr2h	equ	0xFDA
 11461                           fsr2l	equ	0xFD9
 11462                           status	equ	0xFD8
 11463                           
 11464 ;; *************** function _Rcmd3 *****************
 11465 ;; Defined at:
 11466 ;;		line 338 in file "ST7735_TFT.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;		None
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;		None
 11471 ;; Return value:  Size  Location     Type
 11472 ;;		None               void
 11473 ;; Registers used:
 11474 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;Total ram usage:        0 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:    5
 11487 ;; This function calls:
 11488 ;;		_delay_ms
 11489 ;;		_write_command
 11490 ;;		_write_data
 11491 ;; This function is called by:
 11492 ;;		_TFT_GreenTab_Initialize
 11493 ;;		_TFT_BlackTab_Initialize
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text54
 11498  00300E                     __ptext54:
 11499                           	opt stack 0
 11500  00300E                     _Rcmd3:
 11501                           	opt stack 23
 11502                           
 11503                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;incstack = 0
 11507  00300E  0EE0               	movlw	224
 11508  003010  ECBD  F028         	call	_write_command
 11509                           
 11510                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11511  003014  0E02               	movlw	2
 11512  003016  ECB5  F028         	call	_write_data
 11513  00301A  0E1C               	movlw	28
 11514  00301C  ECB5  F028         	call	_write_data
 11515  003020  0E07               	movlw	7
 11516  003022  ECB5  F028         	call	_write_data
 11517  003026  0E12               	movlw	18
 11518  003028  ECB5  F028         	call	_write_data
 11519                           
 11520                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11521  00302C  0E37               	movlw	55
 11522  00302E  ECB5  F028         	call	_write_data
 11523  003032  0E32               	movlw	50
 11524  003034  ECB5  F028         	call	_write_data
 11525  003038  0E29               	movlw	41
 11526  00303A  ECB5  F028         	call	_write_data
 11527  00303E  0E2D               	movlw	45
 11528  003040  ECB5  F028         	call	_write_data
 11529                           
 11530                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11531  003044  0E29               	movlw	41
 11532  003046  ECB5  F028         	call	_write_data
 11533  00304A  0E25               	movlw	37
 11534  00304C  ECB5  F028         	call	_write_data
 11535  003050  0E2B               	movlw	43
 11536  003052  ECB5  F028         	call	_write_data
 11537  003056  0E39               	movlw	57
 11538  003058  ECB5  F028         	call	_write_data
 11539                           
 11540                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11541  00305C  0E00               	movlw	0
 11542  00305E  ECB5  F028         	call	_write_data
 11543  003062  0E01               	movlw	1
 11544  003064  ECB5  F028         	call	_write_data
 11545  003068  0E03               	movlw	3
 11546  00306A  ECB5  F028         	call	_write_data
 11547  00306E  0E10               	movlw	16
 11548  003070  ECB5  F028         	call	_write_data
 11549                           
 11550                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11551  003074  0EE1               	movlw	225
 11552  003076  ECBD  F028         	call	_write_command
 11553                           
 11554                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11555  00307A  0E03               	movlw	3
 11556  00307C  ECB5  F028         	call	_write_data
 11557  003080  0E1D               	movlw	29
 11558  003082  ECB5  F028         	call	_write_data
 11559  003086  0E07               	movlw	7
 11560  003088  ECB5  F028         	call	_write_data
 11561  00308C  0E06               	movlw	6
 11562  00308E  ECB5  F028         	call	_write_data
 11563                           
 11564                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11565  003092  0E2E               	movlw	46
 11566  003094  ECB5  F028         	call	_write_data
 11567  003098  0E2C               	movlw	44
 11568  00309A  ECB5  F028         	call	_write_data
 11569  00309E  0E29               	movlw	41
 11570  0030A0  ECB5  F028         	call	_write_data
 11571  0030A4  0E2D               	movlw	45
 11572  0030A6  ECB5  F028         	call	_write_data
 11573                           
 11574                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11575  0030AA  0E2E               	movlw	46
 11576  0030AC  ECB5  F028         	call	_write_data
 11577  0030B0  0E2E               	movlw	46
 11578  0030B2  ECB5  F028         	call	_write_data
 11579  0030B6  0E37               	movlw	55
 11580  0030B8  ECB5  F028         	call	_write_data
 11581  0030BC  0E3F               	movlw	63
 11582  0030BE  ECB5  F028         	call	_write_data
 11583                           
 11584                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11585  0030C2  0E00               	movlw	0
 11586  0030C4  ECB5  F028         	call	_write_data
 11587  0030C8  0E00               	movlw	0
 11588  0030CA  ECB5  F028         	call	_write_data
 11589  0030CE  0E02               	movlw	2
 11590  0030D0  ECB5  F028         	call	_write_data
 11591  0030D4  0E10               	movlw	16
 11592  0030D6  ECB5  F028         	call	_write_data
 11593                           
 11594                           ;ST7735_TFT.c: 350: write_command(0x13);
 11595  0030DA  0E13               	movlw	19
 11596  0030DC  ECBD  F028         	call	_write_command
 11597                           
 11598                           ;ST7735_TFT.c: 351: delay_ms(10);
 11599  0030E0  0E00               	movlw	0
 11600  0030E2  6E18               	movwf	delay_ms@ms+1,c
 11601  0030E4  0E0A               	movlw	10
 11602  0030E6  6E17               	movwf	delay_ms@ms,c
 11603  0030E8  EC8E  F024         	call	_delay_ms	;wreg free
 11604                           
 11605                           ;ST7735_TFT.c: 352: write_command(0x29);
 11606  0030EC  0E29               	movlw	41
 11607  0030EE  ECBD  F028         	call	_write_command
 11608                           
 11609                           ;ST7735_TFT.c: 353: delay_ms(100);
 11610  0030F2  0E00               	movlw	0
 11611  0030F4  6E18               	movwf	delay_ms@ms+1,c
 11612  0030F6  0E64               	movlw	100
 11613  0030F8  6E17               	movwf	delay_ms@ms,c
 11614  0030FA  EC8E  F024         	call	_delay_ms	;wreg free
 11615  0030FE  0012               	return		;funcret
 11616  003100                     __end_of_Rcmd3:
 11617                           	opt stack 0
 11618                           tblptru	equ	0xFF8
 11619                           tblptrh	equ	0xFF7
 11620                           tblptrl	equ	0xFF6
 11621                           tablat	equ	0xFF5
 11622                           prodh	equ	0xFF4
 11623                           prodl	equ	0xFF3
 11624                           intcon	equ	0xFF2
 11625                           intcon2	equ	0xFF1
 11626                           postinc0	equ	0xFEE
 11627                           wreg	equ	0xFE8
 11628                           postdec1	equ	0xFE5
 11629                           fsr1l	equ	0xFE1
 11630                           indf2	equ	0xFDF
 11631                           postinc2	equ	0xFDE
 11632                           fsr2h	equ	0xFDA
 11633                           fsr2l	equ	0xFD9
 11634                           status	equ	0xFD8
 11635                           
 11636 ;; *************** function _Rcmd2red *****************
 11637 ;; Defined at:
 11638 ;;		line 328 in file "ST7735_TFT.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;		None
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;		None
 11643 ;; Return value:  Size  Location     Type
 11644 ;;		None               void
 11645 ;; Registers used:
 11646 ;;		wreg, status,2, cstack
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11656 ;;Total ram usage:        0 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    5
 11659 ;; This function calls:
 11660 ;;		_write_command
 11661 ;;		_write_data
 11662 ;; This function is called by:
 11663 ;;		_TFT_GreenTab_Initialize
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           	psect	text55
 11668  004AD0                     __ptext55:
 11669                           	opt stack 0
 11670  004AD0                     _Rcmd2red:
 11671                           	opt stack 23
 11672                           
 11673                           ;ST7735_TFT.c: 330: write_command(0x2A);
 11674                           
 11675                           ;incstack = 0
 11676  004AD0  0E2A               	movlw	42
 11677  004AD2  ECBD  F028         	call	_write_command
 11678                           
 11679                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 11680  004AD6  0E00               	movlw	0
 11681  004AD8  ECB5  F028         	call	_write_data
 11682  004ADC  0E00               	movlw	0
 11683  004ADE  ECB5  F028         	call	_write_data
 11684                           
 11685                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 11686  004AE2  0E00               	movlw	0
 11687  004AE4  ECB5  F028         	call	_write_data
 11688  004AE8  0E7F               	movlw	127
 11689  004AEA  ECB5  F028         	call	_write_data
 11690                           
 11691                           ;ST7735_TFT.c: 333: write_command(0x2B);
 11692  004AEE  0E2B               	movlw	43
 11693  004AF0  ECBD  F028         	call	_write_command
 11694                           
 11695                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 11696  004AF4  0E00               	movlw	0
 11697  004AF6  ECB5  F028         	call	_write_data
 11698  004AFA  0E00               	movlw	0
 11699  004AFC  ECB5  F028         	call	_write_data
 11700                           
 11701                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 11702  004B00  0E00               	movlw	0
 11703  004B02  ECB5  F028         	call	_write_data
 11704  004B06  0E9F               	movlw	159
 11705  004B08  ECB5  F028         	call	_write_data
 11706  004B0C  0012               	return		;funcret
 11707  004B0E                     __end_of_Rcmd2red:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           postdec1	equ	0xFE5
 11720                           fsr1l	equ	0xFE1
 11721                           indf2	equ	0xFDF
 11722                           postinc2	equ	0xFDE
 11723                           fsr2h	equ	0xFDA
 11724                           fsr2l	equ	0xFD9
 11725                           status	equ	0xFD8
 11726                           
 11727 ;; *************** function _Rcmd1 *****************
 11728 ;; Defined at:
 11729 ;;		line 281 in file "ST7735_TFT.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;		None               void
 11736 ;; Registers used:
 11737 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;Total ram usage:        0 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    5
 11750 ;; This function calls:
 11751 ;;		_delay_ms
 11752 ;;		_write_command
 11753 ;;		_write_data
 11754 ;; This function is called by:
 11755 ;;		_TFT_GreenTab_Initialize
 11756 ;;		_TFT_BlackTab_Initialize
 11757 ;; This function uses a non-reentrant model
 11758 ;;
 11759                           
 11760                           	psect	text56
 11761  0029D0                     __ptext56:
 11762                           	opt stack 0
 11763  0029D0                     _Rcmd1:
 11764                           	opt stack 23
 11765                           
 11766                           ;ST7735_TFT.c: 283: write_command(0x01);
 11767                           
 11768                           ;incstack = 0
 11769  0029D0  0E01               	movlw	1
 11770  0029D2  ECBD  F028         	call	_write_command
 11771                           
 11772                           ;ST7735_TFT.c: 284: delay_ms(150);
 11773  0029D6  0E00               	movlw	0
 11774  0029D8  6E18               	movwf	delay_ms@ms+1,c
 11775  0029DA  0E96               	movlw	150
 11776  0029DC  6E17               	movwf	delay_ms@ms,c
 11777  0029DE  EC8E  F024         	call	_delay_ms	;wreg free
 11778                           
 11779                           ;ST7735_TFT.c: 285: write_command(0x11);
 11780  0029E2  0E11               	movlw	17
 11781  0029E4  ECBD  F028         	call	_write_command
 11782                           
 11783                           ;ST7735_TFT.c: 286: delay_ms(500);
 11784  0029E8  0E01               	movlw	1
 11785  0029EA  6E18               	movwf	delay_ms@ms+1,c
 11786  0029EC  0EF4               	movlw	244
 11787  0029EE  6E17               	movwf	delay_ms@ms,c
 11788  0029F0  EC8E  F024         	call	_delay_ms	;wreg free
 11789                           
 11790                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11791  0029F4  0EB1               	movlw	177
 11792  0029F6  ECBD  F028         	call	_write_command
 11793                           
 11794                           ;ST7735_TFT.c: 288: write_data(0x01);
 11795  0029FA  0E01               	movlw	1
 11796  0029FC  ECB5  F028         	call	_write_data
 11797                           
 11798                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11799  002A00  0E2C               	movlw	44
 11800  002A02  ECB5  F028         	call	_write_data
 11801                           
 11802                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11803  002A06  0E2D               	movlw	45
 11804  002A08  ECB5  F028         	call	_write_data
 11805                           
 11806                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11807  002A0C  0EB2               	movlw	178
 11808  002A0E  ECBD  F028         	call	_write_command
 11809                           
 11810                           ;ST7735_TFT.c: 292: write_data(0x01);
 11811  002A12  0E01               	movlw	1
 11812  002A14  ECB5  F028         	call	_write_data
 11813                           
 11814                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11815  002A18  0E2C               	movlw	44
 11816  002A1A  ECB5  F028         	call	_write_data
 11817                           
 11818                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11819  002A1E  0E2D               	movlw	45
 11820  002A20  ECB5  F028         	call	_write_data
 11821                           
 11822                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11823  002A24  0EB3               	movlw	179
 11824  002A26  ECBD  F028         	call	_write_command
 11825                           
 11826                           ;ST7735_TFT.c: 296: write_data(0x01);
 11827  002A2A  0E01               	movlw	1
 11828  002A2C  ECB5  F028         	call	_write_data
 11829                           
 11830                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11831  002A30  0E2C               	movlw	44
 11832  002A32  ECB5  F028         	call	_write_data
 11833                           
 11834                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11835  002A36  0E2D               	movlw	45
 11836  002A38  ECB5  F028         	call	_write_data
 11837                           
 11838                           ;ST7735_TFT.c: 299: write_data(0x01);
 11839  002A3C  0E01               	movlw	1
 11840  002A3E  ECB5  F028         	call	_write_data
 11841                           
 11842                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11843  002A42  0E2C               	movlw	44
 11844  002A44  ECB5  F028         	call	_write_data
 11845                           
 11846                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11847  002A48  0E2D               	movlw	45
 11848  002A4A  ECB5  F028         	call	_write_data
 11849                           
 11850                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11851  002A4E  0EB4               	movlw	180
 11852  002A50  ECBD  F028         	call	_write_command
 11853                           
 11854                           ;ST7735_TFT.c: 303: write_data(0x07);
 11855  002A54  0E07               	movlw	7
 11856  002A56  ECB5  F028         	call	_write_data
 11857                           
 11858                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11859  002A5A  0EC0               	movlw	192
 11860  002A5C  ECBD  F028         	call	_write_command
 11861                           
 11862                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11863  002A60  0EA2               	movlw	162
 11864  002A62  ECB5  F028         	call	_write_data
 11865                           
 11866                           ;ST7735_TFT.c: 306: write_data(0x02);
 11867  002A66  0E02               	movlw	2
 11868  002A68  ECB5  F028         	call	_write_data
 11869                           
 11870                           ;ST7735_TFT.c: 307: write_data(0x84);
 11871  002A6C  0E84               	movlw	132
 11872  002A6E  ECB5  F028         	call	_write_data
 11873                           
 11874                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11875  002A72  0EC1               	movlw	193
 11876  002A74  ECBD  F028         	call	_write_command
 11877                           
 11878                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11879  002A78  0EC5               	movlw	197
 11880  002A7A  ECB5  F028         	call	_write_data
 11881                           
 11882                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11883  002A7E  0EC2               	movlw	194
 11884  002A80  ECBD  F028         	call	_write_command
 11885                           
 11886                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11887  002A84  0E0A               	movlw	10
 11888  002A86  ECB5  F028         	call	_write_data
 11889                           
 11890                           ;ST7735_TFT.c: 312: write_data(0x00);
 11891  002A8A  0E00               	movlw	0
 11892  002A8C  ECB5  F028         	call	_write_data
 11893                           
 11894                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11895  002A90  0EC3               	movlw	195
 11896  002A92  ECBD  F028         	call	_write_command
 11897                           
 11898                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11899  002A96  0E8A               	movlw	138
 11900  002A98  ECB5  F028         	call	_write_data
 11901                           
 11902                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11903  002A9C  0E2A               	movlw	42
 11904  002A9E  ECB5  F028         	call	_write_data
 11905                           
 11906                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11907  002AA2  0EC4               	movlw	196
 11908  002AA4  ECBD  F028         	call	_write_command
 11909                           
 11910                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11911  002AA8  0E8A               	movlw	138
 11912  002AAA  ECB5  F028         	call	_write_data
 11913                           
 11914                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11915  002AAE  0EEE               	movlw	238
 11916  002AB0  ECB5  F028         	call	_write_data
 11917                           
 11918                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11919  002AB4  0EC5               	movlw	197
 11920  002AB6  ECBD  F028         	call	_write_command
 11921                           
 11922                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11923  002ABA  0E0E               	movlw	14
 11924  002ABC  ECB5  F028         	call	_write_data
 11925                           
 11926                           ;ST7735_TFT.c: 321: write_command(0x20);
 11927  002AC0  0E20               	movlw	32
 11928  002AC2  ECBD  F028         	call	_write_command
 11929                           
 11930                           ;ST7735_TFT.c: 322: write_command(0x36);
 11931  002AC6  0E36               	movlw	54
 11932  002AC8  ECBD  F028         	call	_write_command
 11933                           
 11934                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11935  002ACC  0EC8               	movlw	200
 11936  002ACE  ECB5  F028         	call	_write_data
 11937                           
 11938                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11939  002AD2  0E3A               	movlw	58
 11940  002AD4  ECBD  F028         	call	_write_command
 11941                           
 11942                           ;ST7735_TFT.c: 325: write_data(0x05);
 11943  002AD8  0E05               	movlw	5
 11944  002ADA  ECB5  F028         	call	_write_data
 11945  002ADE  0012               	return		;funcret
 11946  002AE0                     __end_of_Rcmd1:
 11947                           	opt stack 0
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           intcon2	equ	0xFF1
 11956                           postinc0	equ	0xFEE
 11957                           wreg	equ	0xFE8
 11958                           postdec1	equ	0xFE5
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           fsr2h	equ	0xFDA
 11963                           fsr2l	equ	0xFD9
 11964                           status	equ	0xFD8
 11965                           
 11966 ;; *************** function _LCD_Reset *****************
 11967 ;; Defined at:
 11968 ;;		line 217 in file "ST7735_TFT.c"
 11969 ;; Parameters:    Size  Location     Type
 11970 ;;		None
 11971 ;; Auto vars:     Size  Location     Type
 11972 ;;		None
 11973 ;; Return value:  Size  Location     Type
 11974 ;;		None               void
 11975 ;; Registers used:
 11976 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;Total ram usage:        0 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:    5
 11989 ;; This function calls:
 11990 ;;		_delay_ms
 11991 ;; This function is called by:
 11992 ;;		_Initialize_Screen
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           	psect	text57
 11997  0050CE                     __ptext57:
 11998                           	opt stack 0
 11999  0050CE                     _LCD_Reset:
 12000                           	opt stack 24
 12001                           
 12002                           ;ST7735_TFT.c: 219: PORTCbits.RC1 = 0;
 12003                           
 12004                           ;incstack = 0
 12005  0050CE  9282               	bcf	3970,1,c	;volatile
 12006                           
 12007                           ;ST7735_TFT.c: 220: delay_ms(100);
 12008  0050D0  0E00               	movlw	0
 12009  0050D2  6E18               	movwf	delay_ms@ms+1,c
 12010  0050D4  0E64               	movlw	100
 12011  0050D6  6E17               	movwf	delay_ms@ms,c
 12012  0050D8  EC8E  F024         	call	_delay_ms	;wreg free
 12013                           
 12014                           ;ST7735_TFT.c: 221: PORTCbits.RC1 = 1;
 12015  0050DC  8282               	bsf	3970,1,c	;volatile
 12016  0050DE  0012               	return		;funcret
 12017  0050E0                     __end_of_LCD_Reset:
 12018                           	opt stack 0
 12019                           tblptru	equ	0xFF8
 12020                           tblptrh	equ	0xFF7
 12021                           tblptrl	equ	0xFF6
 12022                           tablat	equ	0xFF5
 12023                           prodh	equ	0xFF4
 12024                           prodl	equ	0xFF3
 12025                           intcon	equ	0xFF2
 12026                           intcon2	equ	0xFF1
 12027                           postinc0	equ	0xFEE
 12028                           wreg	equ	0xFE8
 12029                           postdec1	equ	0xFE5
 12030                           fsr1l	equ	0xFE1
 12031                           indf2	equ	0xFDF
 12032                           postinc2	equ	0xFDE
 12033                           fsr2h	equ	0xFDA
 12034                           fsr2l	equ	0xFD9
 12035                           status	equ	0xFD8
 12036                           
 12037 ;; *************** function _delay_ms *****************
 12038 ;; Defined at:
 12039 ;;		line 64 in file "ST7735_TFT.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;  ms              2   22[COMRAM] int 
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;  count           2   26[COMRAM] int 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;		None               void
 12046 ;; Registers used:
 12047 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12056 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12057 ;;Total ram usage:        6 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    4
 12060 ;; This function calls:
 12061 ;;		___wmul
 12062 ;; This function is called by:
 12063 ;;		_LCD_Reset
 12064 ;;		_Rcmd1
 12065 ;;		_Rcmd3
 12066 ;;		_Bcmd
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           	psect	text58
 12071  00491C                     __ptext58:
 12072                           	opt stack 0
 12073  00491C                     _delay_ms:
 12074                           	opt stack 23
 12075                           
 12076                           ;ST7735_TFT.c: 70: int count;
 12077                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 12078                           
 12079                           ;incstack = 0
 12080  00491C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 12081  004920  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 12082  004924  0E00               	movlw	0
 12083  004926  6E14               	movwf	___wmul@multiplicand+1,c
 12084  004928  0E7D               	movlw	125
 12085  00492A  6E13               	movwf	___wmul@multiplicand,c
 12086  00492C  ECC4  F026         	call	___wmul	;wreg free
 12087  004930  C011  F01B         	movff	?___wmul,delay_ms@count
 12088  004934  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 12089                           
 12090                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 12091  004938  C01B  F019         	movff	delay_ms@count,??_delay_ms
 12092  00493C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 12093  004940  1E19               	comf	??_delay_ms,f,c
 12094  004942  1E1A               	comf	??_delay_ms+1,f,c
 12095  004944  4A19               	infsnz	??_delay_ms,f,c
 12096  004946  2A1A               	incf	??_delay_ms+1,f,c
 12097  004948  0EFF               	movlw	255
 12098  00494A  2419               	addwf	??_delay_ms,w,c
 12099  00494C  6E1B               	movwf	delay_ms@count,c
 12100  00494E  0EFF               	movlw	255
 12101  004950  201A               	addwfc	??_delay_ms+1,w,c
 12102  004952  6E1C               	movwf	delay_ms@count+1,c
 12103                           
 12104                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 12105  004954  0E03               	movlw	3
 12106  004956  6ED5               	movwf	4053,c	;volatile
 12107                           
 12108                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 12109  004958  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 12110                           
 12111                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 12112  00495C  501C               	movf	delay_ms@count+1,w,c
 12113  00495E  6ED7               	movwf	4055,c	;volatile
 12114                           
 12115                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 12116  004960  94F2               	bcf	intcon,2,c	;volatile
 12117                           
 12118                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 12119  004962  8ED5               	bsf	4053,7,c	;volatile
 12120                           
 12121                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 12122  004964  D000               	goto	l1212
 12123  004966                     l1212:
 12124  004966  A4F2               	btfss	intcon,2,c	;volatile
 12125  004968  D7FE               	goto	l1212
 12126                           
 12127                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 12128  00496A  9ED5               	bcf	4053,7,c	;volatile
 12129  00496C  0012               	return		;funcret
 12130  00496E                     __end_of_delay_ms:
 12131                           	opt stack 0
 12132                           tblptru	equ	0xFF8
 12133                           tblptrh	equ	0xFF7
 12134                           tblptrl	equ	0xFF6
 12135                           tablat	equ	0xFF5
 12136                           prodh	equ	0xFF4
 12137                           prodl	equ	0xFF3
 12138                           intcon	equ	0xFF2
 12139                           intcon2	equ	0xFF1
 12140                           postinc0	equ	0xFEE
 12141                           wreg	equ	0xFE8
 12142                           postdec1	equ	0xFE5
 12143                           fsr1l	equ	0xFE1
 12144                           indf2	equ	0xFDF
 12145                           postinc2	equ	0xFDE
 12146                           fsr2h	equ	0xFDA
 12147                           fsr2l	equ	0xFD9
 12148                           status	equ	0xFD8
 12149                           
 12150 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12151 ;; Defined at:
 12152 ;;		line 169 in file "I2C_Support.c"
 12153 ;; Parameters:    Size  Location     Type
 12154 ;;		None
 12155 ;; Auto vars:     Size  Location     Type
 12156 ;;  Address         1   74[COMRAM] unsigned char 
 12157 ;;  Device          1   73[COMRAM] unsigned char 
 12158 ;; Return value:  Size  Location     Type
 12159 ;;		None               void
 12160 ;; Registers used:
 12161 ;;		wreg, status,2, status,0, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;Total ram usage:        2 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    7
 12174 ;; This function calls:
 12175 ;;		_DS3231_Read_Time
 12176 ;;		_I2C_Start
 12177 ;;		_I2C_Stop
 12178 ;;		_I2C_Write
 12179 ;;		_dec_2_bcd
 12180 ;; This function is called by:
 12181 ;;		_Do_Save_New_Alarm_Time
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           	psect	text59
 12186  0042D4                     __ptext59:
 12187                           	opt stack 0
 12188  0042D4                     _DS3231_Write_Alarm_Time:
 12189                           	opt stack 21
 12190                           
 12191                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12192                           
 12193                           ;incstack = 0
 12194  0042D4  EC94  F022         	call	_DS3231_Read_Time	;wreg free
 12195                           
 12196                           ;I2C_Support.c: 172: alarm_date = day;
 12197  0042D8  C067  F0A9         	movff	_day,_alarm_date
 12198                           
 12199                           ;I2C_Support.c: 173: char Device = 0x68;
 12200  0042DC  0E68               	movlw	104
 12201  0042DE  6E4A               	movwf	DS3231_Write_Alarm_Time@Device,c
 12202                           
 12203                           ;I2C_Support.c: 174: char Address = 0x07;
 12204  0042E0  0E07               	movlw	7
 12205  0042E2  6E4B               	movwf	DS3231_Write_Alarm_Time@Address,c
 12206                           
 12207                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12208  0042E4  506E               	movf	_setup_alarm_hour,w,c
 12209  0042E6  ECE5  F023         	call	_dec_2_bcd
 12210  0042EA  5043               	movf	?_dec_2_bcd,w,c
 12211  0042EC  6E64               	movwf	_alarm_hour,c
 12212                           
 12213                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12214  0042EE  0100               	movlb	0	; () banked
 12215  0042F0  51AE               	movf	_setup_alarm_minute& (0+255),w,b
 12216  0042F2  ECE5  F023         	call	_dec_2_bcd
 12217  0042F6  5043               	movf	?_dec_2_bcd,w,c
 12218  0042F8  6E65               	movwf	_alarm_minute,c
 12219                           
 12220                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12221  0042FA  0100               	movlb	0	; () banked
 12222  0042FC  51AF               	movf	_setup_alarm_second& (0+255),w,b
 12223  0042FE  ECE5  F023         	call	_dec_2_bcd
 12224  004302  5043               	movf	?_dec_2_bcd,w,c
 12225  004304  6E66               	movwf	_alarm_second,c
 12226                           
 12227                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12228  004306  5066               	movf	_alarm_second,w,c
 12229  004308  0B7F               	andlw	127
 12230  00430A  6E66               	movwf	_alarm_second,c
 12231                           
 12232                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12233  00430C  5065               	movf	_alarm_minute,w,c
 12234  00430E  0B7F               	andlw	127
 12235  004310  6E65               	movwf	_alarm_minute,c
 12236                           
 12237                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12238  004312  5064               	movf	_alarm_hour,w,c
 12239  004314  0B7F               	andlw	127
 12240  004316  6E64               	movwf	_alarm_hour,c
 12241                           
 12242                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12243  004318  0100               	movlb	0	; () banked
 12244  00431A  51A9               	movf	_alarm_date& (0+255),w,b
 12245  00431C  0980               	iorlw	128
 12246  00431E  0100               	movlb	0	; () banked
 12247  004320  6FA9               	movwf	_alarm_date& (0+255),b
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;I2C_Support.c: 182: I2C_Start();
 12251  004322  EC8B  F028         	call	_I2C_Start	;wreg free
 12252                           
 12253                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12254  004326  504A               	movf	DS3231_Write_Alarm_Time@Device,w,c
 12255  004328  244A               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 12256  00432A  ECA6  F025         	call	_I2C_Write
 12257                           
 12258                           ;I2C_Support.c: 184: I2C_Write(Address);
 12259  00432E  504B               	movf	DS3231_Write_Alarm_Time@Address,w,c
 12260  004330  ECA6  F025         	call	_I2C_Write
 12261                           
 12262                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12263  004334  5066               	movf	_alarm_second,w,c
 12264  004336  ECA6  F025         	call	_I2C_Write
 12265                           
 12266                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12267  00433A  5065               	movf	_alarm_minute,w,c
 12268  00433C  ECA6  F025         	call	_I2C_Write
 12269                           
 12270                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12271  004340  5064               	movf	_alarm_hour,w,c
 12272  004342  ECA6  F025         	call	_I2C_Write
 12273                           
 12274                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12275  004346  0100               	movlb	0	; () banked
 12276  004348  51A9               	movf	_alarm_date& (0+255),w,b
 12277  00434A  ECA6  F025         	call	_I2C_Write
 12278                           
 12279                           ;I2C_Support.c: 190: I2C_Stop();
 12280  00434E  EC82  F028         	call	_I2C_Stop	;wreg free
 12281  004352  0012               	return		;funcret
 12282  004354                     __end_of_DS3231_Write_Alarm_Time:
 12283                           	opt stack 0
 12284                           tblptru	equ	0xFF8
 12285                           tblptrh	equ	0xFF7
 12286                           tblptrl	equ	0xFF6
 12287                           tablat	equ	0xFF5
 12288                           prodh	equ	0xFF4
 12289                           prodl	equ	0xFF3
 12290                           intcon	equ	0xFF2
 12291                           intcon2	equ	0xFF1
 12292                           postinc0	equ	0xFEE
 12293                           wreg	equ	0xFE8
 12294                           postdec1	equ	0xFE5
 12295                           fsr1l	equ	0xFE1
 12296                           indf2	equ	0xFDF
 12297                           postinc2	equ	0xFDE
 12298                           fsr2h	equ	0xFDA
 12299                           fsr2l	equ	0xFD9
 12300                           status	equ	0xFD8
 12301                           
 12302 ;; *************** function _dec_2_bcd *****************
 12303 ;; Defined at:
 12304 ;;		line 55 in file "utils.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;  dec             1    wreg     unsigned char 
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;  dec             1   72[COMRAM] unsigned char 
 12309 ;;  bcd             2   70[COMRAM] int 
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  2   66[COMRAM] int 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2, status,0, cstack
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;Total ram usage:        7 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    4
 12326 ;; This function calls:
 12327 ;;		___awdiv
 12328 ;;		___awmod
 12329 ;; This function is called by:
 12330 ;;		_DS3231_Write_Time
 12331 ;;		_DS3231_Write_Alarm_Time
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text60
 12336  0047CA                     __ptext60:
 12337                           	opt stack 0
 12338  0047CA                     _dec_2_bcd:
 12339                           	opt stack 23
 12340                           
 12341                           ;incstack = 0
 12342                           ;dec_2_bcd@dec stored from wreg
 12343  0047CA  6E49               	movwf	dec_2_bcd@dec,c
 12344                           
 12345                           ;utils.c: 57: int bcd;
 12346                           ;utils.c: 58: bcd = ((dec / 10) << 4) + (dec % 10);
 12347  0047CC  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 12348  0047D0  6A18               	clrf	___awdiv@dividend+1,c
 12349  0047D2  0E00               	movlw	0
 12350  0047D4  6E1A               	movwf	___awdiv@divisor+1,c
 12351  0047D6  0E0A               	movlw	10
 12352  0047D8  6E19               	movwf	___awdiv@divisor,c
 12353  0047DA  EC2D  F01F         	call	___awdiv	;wreg free
 12354  0047DE  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 12355  0047E2  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 12356  0047E6  3A45               	swapf	??_dec_2_bcd,f,c
 12357  0047E8  3A46               	swapf	??_dec_2_bcd+1,f,c
 12358  0047EA  0EF0               	movlw	240
 12359  0047EC  1646               	andwf	??_dec_2_bcd+1,f,c
 12360  0047EE  5045               	movf	??_dec_2_bcd,w,c
 12361  0047F0  0B0F               	andlw	15
 12362  0047F2  1246               	iorwf	??_dec_2_bcd+1,f,c
 12363  0047F4  0EF0               	movlw	240
 12364  0047F6  1645               	andwf	??_dec_2_bcd,f,c
 12365  0047F8  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 12366  0047FC  6A3E               	clrf	___awmod@dividend+1,c
 12367  0047FE  0E00               	movlw	0
 12368  004800  6E40               	movwf	___awmod@divisor+1,c
 12369  004802  0E0A               	movlw	10
 12370  004804  6E3F               	movwf	___awmod@divisor,c
 12371  004806  EC29  F021         	call	___awmod	;wreg free
 12372  00480A  503D               	movf	?___awmod,w,c
 12373  00480C  2445               	addwf	??_dec_2_bcd,w,c
 12374  00480E  6E47               	movwf	dec_2_bcd@bcd,c
 12375  004810  503E               	movf	?___awmod+1,w,c
 12376  004812  2046               	addwfc	??_dec_2_bcd+1,w,c
 12377  004814  6E48               	movwf	dec_2_bcd@bcd+1,c
 12378                           
 12379                           ;utils.c: 59: return bcd;
 12380  004816  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12381  00481A  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12382  00481E  D000               	goto	l1110
 12383  004820                     l1110:
 12384  004820  0012               	return		;funcret
 12385  004822                     __end_of_dec_2_bcd:
 12386                           	opt stack 0
 12387                           tblptru	equ	0xFF8
 12388                           tblptrh	equ	0xFF7
 12389                           tblptrl	equ	0xFF6
 12390                           tablat	equ	0xFF5
 12391                           prodh	equ	0xFF4
 12392                           prodl	equ	0xFF3
 12393                           intcon	equ	0xFF2
 12394                           intcon2	equ	0xFF1
 12395                           postinc0	equ	0xFEE
 12396                           wreg	equ	0xFE8
 12397                           postdec1	equ	0xFE5
 12398                           fsr1l	equ	0xFE1
 12399                           indf2	equ	0xFDF
 12400                           postinc2	equ	0xFDE
 12401                           fsr2h	equ	0xFDA
 12402                           fsr2l	equ	0xFD9
 12403                           status	equ	0xFD8
 12404                           
 12405 ;; *************** function _DS3231_Read_Time *****************
 12406 ;; Defined at:
 12407 ;;		line 45 in file "I2C_Support.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;		None
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;  Device          1   20[COMRAM] unsigned char 
 12412 ;;  Address         1   19[COMRAM] unsigned char 
 12413 ;; Return value:  Size  Location     Type
 12414 ;;		None               void
 12415 ;; Registers used:
 12416 ;;		wreg, status,2, status,0, cstack
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12426 ;;Total ram usage:        2 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    6
 12429 ;; This function calls:
 12430 ;;		_I2C_ReStart
 12431 ;;		_I2C_Read
 12432 ;;		_I2C_Start
 12433 ;;		_I2C_Stop
 12434 ;;		_I2C_Write
 12435 ;; This function is called by:
 12436 ;;		_DS3231_Write_Alarm_Time
 12437 ;;		_main
 12438 ;;		_Exit_Setup_Alarm_Time
 12439 ;;		_Do_Save_New_Alarm_Time
 12440 ;;		_Exit_Setup_Heater_Temp
 12441 ;;		_Do_Save_New_Heater_Temp
 12442 ;;		_Do_Setup_Time
 12443 ;;		_Do_Save_New_Time
 12444 ;;		_Exit_Time_Setup
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           	psect	text61
 12449  004528                     __ptext61:
 12450                           	opt stack 0
 12451  004528                     _DS3231_Read_Time:
 12452                           	opt stack 22
 12453                           
 12454                           ;I2C_Support.c: 47: char Device = 0x68;
 12455                           
 12456                           ;incstack = 0
 12457  004528  0E68               	movlw	104
 12458  00452A  6E15               	movwf	DS3231_Read_Time@Device,c
 12459                           
 12460                           ;I2C_Support.c: 48: char Address = 0x00;
 12461  00452C  0E00               	movlw	0
 12462  00452E  6E14               	movwf	DS3231_Read_Time@Address,c
 12463                           
 12464                           ;I2C_Support.c: 50: I2C_Start();
 12465  004530  EC8B  F028         	call	_I2C_Start	;wreg free
 12466                           
 12467                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12468  004534  5015               	movf	DS3231_Read_Time@Device,w,c
 12469  004536  2415               	addwf	DS3231_Read_Time@Device,w,c
 12470  004538  ECA6  F025         	call	_I2C_Write
 12471                           
 12472                           ;I2C_Support.c: 52: I2C_Write(Address);
 12473  00453C  5014               	movf	DS3231_Read_Time@Address,w,c
 12474  00453E  ECA6  F025         	call	_I2C_Write
 12475                           
 12476                           ;I2C_Support.c: 53: I2C_ReStart();
 12477  004542  EC0E  F028         	call	_I2C_ReStart	;wreg free
 12478                           
 12479                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12480  004546  80D8               	bsf	status,0,c
 12481  004548  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12482  00454A  ECA6  F025         	call	_I2C_Write
 12483                           
 12484                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12485  00454E  0E01               	movlw	1
 12486  004550  EC03  F025         	call	_I2C_Read
 12487  004554  6E6D               	movwf	_second,c
 12488                           
 12489                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12490  004556  0E01               	movlw	1
 12491  004558  EC03  F025         	call	_I2C_Read
 12492  00455C  6E6B               	movwf	_minute,c
 12493                           
 12494                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12495  00455E  0E01               	movlw	1
 12496  004560  EC03  F025         	call	_I2C_Read
 12497  004564  6E6A               	movwf	_hour,c
 12498                           
 12499                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12500  004566  0E01               	movlw	1
 12501  004568  EC03  F025         	call	_I2C_Read
 12502  00456C  0100               	movlb	0	; () banked
 12503  00456E  6FAC               	movwf	_dow& (0+255),b
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12507  004570  0E01               	movlw	1
 12508  004572  EC03  F025         	call	_I2C_Read
 12509  004576  6E67               	movwf	_day,c
 12510                           
 12511                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12512  004578  0E01               	movlw	1
 12513  00457A  EC03  F025         	call	_I2C_Read
 12514  00457E  6E6C               	movwf	_month,c
 12515                           
 12516                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12517  004580  0E00               	movlw	0
 12518  004582  EC03  F025         	call	_I2C_Read
 12519  004586  6E6F               	movwf	_year,c
 12520                           
 12521                           ;I2C_Support.c: 62: I2C_Stop();
 12522  004588  EC82  F028         	call	_I2C_Stop	;wreg free
 12523  00458C  0012               	return		;funcret
 12524  00458E                     __end_of_DS3231_Read_Time:
 12525                           	opt stack 0
 12526                           tblptru	equ	0xFF8
 12527                           tblptrh	equ	0xFF7
 12528                           tblptrl	equ	0xFF6
 12529                           tablat	equ	0xFF5
 12530                           prodh	equ	0xFF4
 12531                           prodl	equ	0xFF3
 12532                           intcon	equ	0xFF2
 12533                           intcon2	equ	0xFF1
 12534                           postinc0	equ	0xFEE
 12535                           wreg	equ	0xFE8
 12536                           postdec1	equ	0xFE5
 12537                           fsr1l	equ	0xFE1
 12538                           indf2	equ	0xFDF
 12539                           postinc2	equ	0xFDE
 12540                           fsr2h	equ	0xFDA
 12541                           fsr2l	equ	0xFD9
 12542                           status	equ	0xFD8
 12543                           
 12544 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12545 ;; Defined at:
 12546 ;;		line 115 in file "I2C_Support.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;		None
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;  Device          1   20[COMRAM] unsigned char 
 12551 ;;  Address         1   19[COMRAM] unsigned char 
 12552 ;; Return value:  Size  Location     Type
 12553 ;;		None               void
 12554 ;; Registers used:
 12555 ;;		wreg, status,2, status,0, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;Total ram usage:        2 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    6
 12568 ;; This function calls:
 12569 ;;		_I2C_ReStart
 12570 ;;		_I2C_Read
 12571 ;;		_I2C_Start
 12572 ;;		_I2C_Stop
 12573 ;;		_I2C_Write
 12574 ;; This function is called by:
 12575 ;;		_main
 12576 ;;		_Do_Setup_Alarm_Time
 12577 ;;		_Do_Save_New_Alarm_Time
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           	psect	text62
 12582  00496E                     __ptext62:
 12583                           	opt stack 0
 12584  00496E                     _DS3231_Read_Alarm_Time:
 12585                           	opt stack 22
 12586                           
 12587                           ;I2C_Support.c: 117: char Device = 0x68;
 12588                           
 12589                           ;incstack = 0
 12590  00496E  0E68               	movlw	104
 12591  004970  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12592                           
 12593                           ;I2C_Support.c: 118: char Address = 0x07;
 12594  004972  0E07               	movlw	7
 12595  004974  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12596                           
 12597                           ;I2C_Support.c: 119: I2C_Start();
 12598  004976  EC8B  F028         	call	_I2C_Start	;wreg free
 12599                           
 12600                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12601  00497A  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12602  00497C  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12603  00497E  ECA6  F025         	call	_I2C_Write
 12604                           
 12605                           ;I2C_Support.c: 121: I2C_Write(Address);
 12606  004982  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12607  004984  ECA6  F025         	call	_I2C_Write
 12608                           
 12609                           ;I2C_Support.c: 122: I2C_ReStart();
 12610  004988  EC0E  F028         	call	_I2C_ReStart	;wreg free
 12611                           
 12612                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12613  00498C  80D8               	bsf	status,0,c
 12614  00498E  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12615  004990  ECA6  F025         	call	_I2C_Write
 12616                           
 12617                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12618  004994  0E01               	movlw	1
 12619  004996  EC03  F025         	call	_I2C_Read
 12620  00499A  6E66               	movwf	_alarm_second,c
 12621                           
 12622                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12623  00499C  0E01               	movlw	1
 12624  00499E  EC03  F025         	call	_I2C_Read
 12625  0049A2  6E65               	movwf	_alarm_minute,c
 12626                           
 12627                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12628  0049A4  0E01               	movlw	1
 12629  0049A6  EC03  F025         	call	_I2C_Read
 12630  0049AA  6E64               	movwf	_alarm_hour,c
 12631                           
 12632                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12633  0049AC  0E00               	movlw	0
 12634  0049AE  EC03  F025         	call	_I2C_Read
 12635  0049B2  0100               	movlb	0	; () banked
 12636  0049B4  6FA9               	movwf	_alarm_date& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;I2C_Support.c: 128: I2C_Stop();
 12640  0049B6  EC82  F028         	call	_I2C_Stop	;wreg free
 12641  0049BA  0012               	return		;funcret
 12642  0049BC                     __end_of_DS3231_Read_Alarm_Time:
 12643                           	opt stack 0
 12644                           tblptru	equ	0xFF8
 12645                           tblptrh	equ	0xFF7
 12646                           tblptrl	equ	0xFF6
 12647                           tablat	equ	0xFF5
 12648                           prodh	equ	0xFF4
 12649                           prodl	equ	0xFF3
 12650                           intcon	equ	0xFF2
 12651                           intcon2	equ	0xFF1
 12652                           postinc0	equ	0xFEE
 12653                           wreg	equ	0xFE8
 12654                           postdec1	equ	0xFE5
 12655                           fsr1l	equ	0xFE1
 12656                           indf2	equ	0xFDF
 12657                           postinc2	equ	0xFDE
 12658                           fsr2h	equ	0xFDA
 12659                           fsr2l	equ	0xFD9
 12660                           status	equ	0xFD8
 12661                           
 12662 ;; *************** function _Do_Beep_Good *****************
 12663 ;; Defined at:
 12664 ;;		line 72 in file "utils.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;		None
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;		None
 12669 ;; Return value:  Size  Location     Type
 12670 ;;		None               void
 12671 ;; Registers used:
 12672 ;;		wreg, status,2, status,0, cstack
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12682 ;;Total ram usage:        0 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    6
 12685 ;; This function calls:
 12686 ;;		_Activate_Buzzer_2KHz
 12687 ;;		_Deactivate_Buzzer
 12688 ;;		_Wait_One_Sec
 12689 ;;		_do_update_pwm
 12690 ;; This function is called by:
 12691 ;;		_main
 12692 ;;		_Do_Setup_Alarm_Time
 12693 ;;		_Do_Setup_Heater_Temp
 12694 ;;		_Do_Setup_Time
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           	psect	text63
 12699  00505A                     __ptext63:
 12700                           	opt stack 0
 12701  00505A                     _Do_Beep_Good:
 12702                           	opt stack 23
 12703                           
 12704                           ;utils.c: 75: Activate_Buzzer_2KHz();
 12705                           
 12706                           ;incstack = 0
 12707  00505A  EC70  F028         	call	_Activate_Buzzer_2KHz	;wreg free
 12708                           
 12709                           ;utils.c: 76: Wait_One_Sec();
 12710  00505E  ECC2  F027         	call	_Wait_One_Sec	;wreg free
 12711                           
 12712                           ;utils.c: 78: Deactivate_Buzzer();
 12713  005062  EC04  F029         	call	_Deactivate_Buzzer	;wreg free
 12714                           
 12715                           ;utils.c: 79: do_update_pwm(duty_cycle);
 12716  005066  5068               	movf	_duty_cycle,w,c
 12717  005068  ECEB  F01D         	call	_do_update_pwm
 12718  00506C  0012               	return		;funcret
 12719  00506E                     __end_of_Do_Beep_Good:
 12720                           	opt stack 0
 12721                           tblptru	equ	0xFF8
 12722                           tblptrh	equ	0xFF7
 12723                           tblptrl	equ	0xFF6
 12724                           tablat	equ	0xFF5
 12725                           prodh	equ	0xFF4
 12726                           prodl	equ	0xFF3
 12727                           intcon	equ	0xFF2
 12728                           intcon2	equ	0xFF1
 12729                           postinc0	equ	0xFEE
 12730                           wreg	equ	0xFE8
 12731                           postdec1	equ	0xFE5
 12732                           fsr1l	equ	0xFE1
 12733                           indf2	equ	0xFDF
 12734                           postinc2	equ	0xFDE
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function _Activate_Buzzer_2KHz *****************
 12740 ;; Defined at:
 12741 ;;		line 113 in file "utils.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;		None
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;		None
 12746 ;; Return value:  Size  Location     Type
 12747 ;;		None               void
 12748 ;; Registers used:
 12749 ;;		wreg, status,2
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12759 ;;Total ram usage:        0 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    3
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_Do_Beep_Good
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           	psect	text64
 12770  0050E0                     __ptext64:
 12771                           	opt stack 0
 12772  0050E0                     _Activate_Buzzer_2KHz:
 12773                           	opt stack 25
 12774                           
 12775                           ;utils.c: 115: PR2 = 0b11111001 ;
 12776                           
 12777                           ;incstack = 0
 12778  0050E0  0EF9               	movlw	249
 12779  0050E2  6ECB               	movwf	4043,c	;volatile
 12780                           
 12781                           ;utils.c: 116: T2CON = 0b00000101 ;
 12782  0050E4  0E05               	movlw	5
 12783  0050E6  6ECA               	movwf	4042,c	;volatile
 12784                           
 12785                           ;utils.c: 117: CCPR2L = 0b01111100 ;
 12786  0050E8  0E7C               	movlw	124
 12787  0050EA  6EBB               	movwf	4027,c	;volatile
 12788                           
 12789                           ;utils.c: 118: CCP2CON = 0b00111100 ;
 12790  0050EC  0E3C               	movlw	60
 12791  0050EE  6EBA               	movwf	4026,c	;volatile
 12792  0050F0  0012               	return		;funcret
 12793  0050F2                     __end_of_Activate_Buzzer_2KHz:
 12794                           	opt stack 0
 12795                           tblptru	equ	0xFF8
 12796                           tblptrh	equ	0xFF7
 12797                           tblptrl	equ	0xFF6
 12798                           tablat	equ	0xFF5
 12799                           prodh	equ	0xFF4
 12800                           prodl	equ	0xFF3
 12801                           intcon	equ	0xFF2
 12802                           intcon2	equ	0xFF1
 12803                           postinc0	equ	0xFEE
 12804                           wreg	equ	0xFE8
 12805                           postdec1	equ	0xFE5
 12806                           fsr1l	equ	0xFE1
 12807                           indf2	equ	0xFDF
 12808                           postinc2	equ	0xFDE
 12809                           fsr2h	equ	0xFDA
 12810                           fsr2l	equ	0xFD9
 12811                           status	equ	0xFD8
 12812                           
 12813 ;; *************** function _Do_Beep_Bad *****************
 12814 ;; Defined at:
 12815 ;;		line 82 in file "utils.c"
 12816 ;; Parameters:    Size  Location     Type
 12817 ;;		None
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;		None
 12820 ;; Return value:  Size  Location     Type
 12821 ;;		None               void
 12822 ;; Registers used:
 12823 ;;		wreg, status,2, status,0, cstack
 12824 ;; Tracked objects:
 12825 ;;		On entry : 0/0
 12826 ;;		On exit  : 0/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12833 ;;Total ram usage:        0 bytes
 12834 ;; Hardware stack levels used:    1
 12835 ;; Hardware stack levels required when called:    6
 12836 ;; This function calls:
 12837 ;;		_Activate_Buzzer_500Hz
 12838 ;;		_Deactivate_Buzzer
 12839 ;;		_Wait_One_Sec
 12840 ;;		_do_update_pwm
 12841 ;; This function is called by:
 12842 ;;		_main
 12843 ;;		_Do_Setup_Alarm_Time
 12844 ;;		_Do_Setup_Heater_Temp
 12845 ;;		_Do_Setup_Time
 12846 ;; This function uses a non-reentrant model
 12847 ;;
 12848                           
 12849                           	psect	text65
 12850  00506E                     __ptext65:
 12851                           	opt stack 0
 12852  00506E                     _Do_Beep_Bad:
 12853                           	opt stack 23
 12854                           
 12855                           ;utils.c: 85: Activate_Buzzer_500Hz();
 12856                           
 12857                           ;incstack = 0
 12858  00506E  EC79  F028         	call	_Activate_Buzzer_500Hz	;wreg free
 12859                           
 12860                           ;utils.c: 86: Wait_One_Sec();
 12861  005072  ECC2  F027         	call	_Wait_One_Sec	;wreg free
 12862                           
 12863                           ;utils.c: 88: Deactivate_Buzzer();
 12864  005076  EC04  F029         	call	_Deactivate_Buzzer	;wreg free
 12865                           
 12866                           ;utils.c: 89: do_update_pwm(duty_cycle);
 12867  00507A  5068               	movf	_duty_cycle,w,c
 12868  00507C  ECEB  F01D         	call	_do_update_pwm
 12869  005080  0012               	return		;funcret
 12870  005082                     __end_of_Do_Beep_Bad:
 12871                           	opt stack 0
 12872                           tblptru	equ	0xFF8
 12873                           tblptrh	equ	0xFF7
 12874                           tblptrl	equ	0xFF6
 12875                           tablat	equ	0xFF5
 12876                           prodh	equ	0xFF4
 12877                           prodl	equ	0xFF3
 12878                           intcon	equ	0xFF2
 12879                           intcon2	equ	0xFF1
 12880                           postinc0	equ	0xFEE
 12881                           wreg	equ	0xFE8
 12882                           postdec1	equ	0xFE5
 12883                           fsr1l	equ	0xFE1
 12884                           indf2	equ	0xFDF
 12885                           postinc2	equ	0xFDE
 12886                           fsr2h	equ	0xFDA
 12887                           fsr2l	equ	0xFD9
 12888                           status	equ	0xFD8
 12889                           
 12890 ;; *************** function _do_update_pwm *****************
 12891 ;; Defined at:
 12892 ;;		line 135 in file "utils.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  duty_cycle      1    wreg     unsigned char 
 12895 ;; Auto vars:     Size  Location     Type
 12896 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 12897 ;;  dc_f            3   63[COMRAM] float 
 12898 ;;  dc_I            2   67[COMRAM] int 
 12899 ;; Return value:  Size  Location     Type
 12900 ;;		None               void
 12901 ;; Registers used:
 12902 ;;		wreg, status,2, status,0, cstack
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12912 ;;Total ram usage:        9 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    5
 12915 ;; This function calls:
 12916 ;;		___ftdiv
 12917 ;;		___ftmul
 12918 ;;		___fttol
 12919 ;;		___lbtoft
 12920 ;; This function is called by:
 12921 ;;		_get_duty_cycle
 12922 ;;		_Monitor_Heater
 12923 ;;		_Turn_On_Fan
 12924 ;;		_Do_Beep_Good
 12925 ;;		_Do_Beep_Bad
 12926 ;;		_Do_Beep
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930                           	psect	text66
 12931  003BD6                     __ptext66:
 12932                           	opt stack 0
 12933  003BD6                     _do_update_pwm:
 12934                           	opt stack 23
 12935                           
 12936                           ;incstack = 0
 12937                           ;do_update_pwm@duty_cycle stored from wreg
 12938  003BD6  6E43               	movwf	do_update_pwm@duty_cycle,c
 12939                           
 12940                           ;utils.c: 137: float dc_f;
 12941                           ;utils.c: 138: int dc_I;
 12942                           ;utils.c: 139: PR2 = 0b00000100 ;
 12943  003BD8  0E04               	movlw	4
 12944  003BDA  6ECB               	movwf	4043,c	;volatile
 12945                           
 12946                           ;utils.c: 140: T2CON = 0b00000111 ;
 12947  003BDC  0E07               	movlw	7
 12948  003BDE  6ECA               	movwf	4042,c	;volatile
 12949                           
 12950                           ;utils.c: 141: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 12951  003BE0  0E00               	movlw	0
 12952  003BE2  6E22               	movwf	___ftmul@f2,c
 12953  003BE4  0E80               	movlw	128
 12954  003BE6  6E23               	movwf	___ftmul@f2+1,c
 12955  003BE8  0E40               	movlw	64
 12956  003BEA  6E24               	movwf	___ftmul@f2+2,c
 12957  003BEC  5043               	movf	do_update_pwm@duty_cycle,w,c
 12958  003BEE  ECEB  F026         	call	___lbtoft
 12959  003BF2  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 12960  003BF6  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 12961  003BFA  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 12962  003BFE  EC8B  F017         	call	___ftmul	;wreg free
 12963  003C02  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 12964  003C06  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 12965  003C0A  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 12966  003C0E  0E00               	movlw	0
 12967  003C10  6E31               	movwf	___ftdiv@f2,c
 12968  003C12  0EA0               	movlw	160
 12969  003C14  6E32               	movwf	___ftdiv@f2+1,c
 12970  003C16  0E41               	movlw	65
 12971  003C18  6E33               	movwf	___ftdiv@f2+2,c
 12972  003C1A  EC56  F01A         	call	___ftdiv	;wreg free
 12973  003C1E  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 12974  003C22  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12975  003C26  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12976                           
 12977                           ;utils.c: 142: dc_I = (int) dc_f;
 12978  003C2A  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 12979  003C2E  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12980  003C32  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12981  003C36  ECE3  F019         	call	___fttol	;wreg free
 12982  003C3A  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 12983  003C3E  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12984                           
 12985                           ;utils.c: 143: if (dc_I > duty_cycle) dc_I++;
 12986  003C42  5043               	movf	do_update_pwm@duty_cycle,w,c
 12987  003C44  6E3D               	movwf	??_do_update_pwm& (0+255),c
 12988  003C46  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 12989  003C48  5044               	movf	do_update_pwm@dc_I,w,c
 12990  003C4A  5C3D               	subwf	??_do_update_pwm,w,c
 12991  003C4C  503E               	movf	??_do_update_pwm+1,w,c
 12992  003C4E  0A80               	xorlw	128
 12993  003C50  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 12994  003C52  5045               	movf	do_update_pwm@dc_I+1,w,c
 12995  003C54  0A80               	xorlw	128
 12996  003C56  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12997  003C58  B0D8               	btfsc	status,0,c
 12998  003C5A  D003               	goto	l9906
 12999  003C5C  4A44               	infsnz	do_update_pwm@dc_I,f,c
 13000  003C5E  2A45               	incf	do_update_pwm@dc_I+1,f,c
 13001  003C60  D000               	goto	l9906
 13002  003C62                     l9906:
 13003                           
 13004                           ;utils.c: 144: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 13005  003C62  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13006  003C66  0E03               	movlw	3
 13007  003C68  163D               	andwf	??_do_update_pwm,f,c
 13008  003C6A  383D               	swapf	??_do_update_pwm,w,c
 13009  003C6C  0BF0               	andlw	240
 13010  003C6E  090C               	iorlw	12
 13011  003C70  6EBD               	movwf	4029,c	;volatile
 13012                           
 13013                           ;utils.c: 145: CCPR1L = (dc_I) >> 2;
 13014  003C72  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13015  003C76  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 13016  003C7A  343E               	rlcf	??_do_update_pwm+1,w,c
 13017  003C7C  323E               	rrcf	??_do_update_pwm+1,f,c
 13018  003C7E  323D               	rrcf	??_do_update_pwm,f,c
 13019  003C80  343E               	rlcf	??_do_update_pwm+1,w,c
 13020  003C82  323E               	rrcf	??_do_update_pwm+1,f,c
 13021  003C84  323D               	rrcf	??_do_update_pwm,f,c
 13022  003C86  503D               	movf	??_do_update_pwm,w,c
 13023  003C88  6EBE               	movwf	4030,c	;volatile
 13024  003C8A  0012               	return		;funcret
 13025  003C8C                     __end_of_do_update_pwm:
 13026                           	opt stack 0
 13027                           tblptru	equ	0xFF8
 13028                           tblptrh	equ	0xFF7
 13029                           tblptrl	equ	0xFF6
 13030                           tablat	equ	0xFF5
 13031                           prodh	equ	0xFF4
 13032                           prodl	equ	0xFF3
 13033                           intcon	equ	0xFF2
 13034                           intcon2	equ	0xFF1
 13035                           postinc0	equ	0xFEE
 13036                           wreg	equ	0xFE8
 13037                           postdec1	equ	0xFE5
 13038                           fsr1l	equ	0xFE1
 13039                           indf2	equ	0xFDF
 13040                           postinc2	equ	0xFDE
 13041                           fsr2h	equ	0xFDA
 13042                           fsr2l	equ	0xFD9
 13043                           status	equ	0xFD8
 13044                           
 13045 ;; *************** function ___lbtoft *****************
 13046 ;; Defined at:
 13047 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  c               1    wreg     unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  c               1   27[COMRAM] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  3   24[COMRAM] float 
 13054 ;; Registers used:
 13055 ;;		wreg, status,2, status,0, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13061 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;Total ram usage:        4 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    4
 13068 ;; This function calls:
 13069 ;;		___ftpack
 13070 ;; This function is called by:
 13071 ;;		_do_update_pwm
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text67
 13076  004DD6                     __ptext67:
 13077                           	opt stack 0
 13078  004DD6                     ___lbtoft:
 13079                           	opt stack 23
 13080                           
 13081                           ;incstack = 0
 13082                           ;___lbtoft@c stored from wreg
 13083  004DD6  6E1C               	movwf	___lbtoft@c,c
 13084  004DD8  501C               	movf	___lbtoft@c,w,c
 13085  004DDA  6E11               	movwf	___ftpack@arg,c
 13086  004DDC  6A12               	clrf	___ftpack@arg+1,c
 13087  004DDE  6A13               	clrf	___ftpack@arg+2,c
 13088  004DE0  0E8E               	movlw	142
 13089  004DE2  6E14               	movwf	___ftpack@exp,c
 13090  004DE4  0E00               	movlw	0
 13091  004DE6  6E15               	movwf	___ftpack@sign,c
 13092  004DE8  EC12  F01C         	call	___ftpack	;wreg free
 13093  004DEC  C011  F019         	movff	?___ftpack,?___lbtoft
 13094  004DF0  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 13095  004DF4  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 13096  004DF8  D000               	goto	l2055
 13097  004DFA                     l2055:
 13098  004DFA  0012               	return		;funcret
 13099  004DFC                     __end_of___lbtoft:
 13100                           	opt stack 0
 13101                           tblptru	equ	0xFF8
 13102                           tblptrh	equ	0xFF7
 13103                           tblptrl	equ	0xFF6
 13104                           tablat	equ	0xFF5
 13105                           prodh	equ	0xFF4
 13106                           prodl	equ	0xFF3
 13107                           intcon	equ	0xFF2
 13108                           intcon2	equ	0xFF1
 13109                           postinc0	equ	0xFEE
 13110                           wreg	equ	0xFE8
 13111                           postdec1	equ	0xFE5
 13112                           fsr1l	equ	0xFE1
 13113                           indf2	equ	0xFDF
 13114                           postinc2	equ	0xFDE
 13115                           fsr2h	equ	0xFDA
 13116                           fsr2l	equ	0xFD9
 13117                           status	equ	0xFD8
 13118                           
 13119 ;; *************** function ___ftdiv *****************
 13120 ;; Defined at:
 13121 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;  f1              3   45[COMRAM] float 
 13124 ;;  f2              3   48[COMRAM] float 
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  f3              3   55[COMRAM] float 
 13127 ;;  sign            1   59[COMRAM] unsigned char 
 13128 ;;  exp             1   58[COMRAM] unsigned char 
 13129 ;;  cntr            1   54[COMRAM] unsigned char 
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  3   45[COMRAM] float 
 13132 ;; Registers used:
 13133 ;;		wreg, status,2, status,0, cstack
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13139 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13141 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13142 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;Total ram usage:       15 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    4
 13146 ;; This function calls:
 13147 ;;		___ftpack
 13148 ;; This function is called by:
 13149 ;;		_do_update_pwm
 13150 ;;		_read_volt
 13151 ;; This function uses a non-reentrant model
 13152 ;;
 13153                           
 13154                           	psect	text68
 13155  0034AC                     __ptext68:
 13156                           	opt stack 0
 13157  0034AC                     ___ftdiv:
 13158                           	opt stack 25
 13159                           
 13160                           ;incstack = 0
 13161  0034AC  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 13162  0034B0  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 13163  0034B2  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 13164  0034B4  342F               	rlcf	___ftdiv@f1+1,w,c
 13165  0034B6  3634               	rlcf	??___ftdiv& (0+255),f,c
 13166  0034B8  E301               	bnc	u8491
 13167  0034BA  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 13168  0034BC                     u8491:
 13169  0034BC  5034               	movf	??___ftdiv,w,c
 13170  0034BE  6E3B               	movwf	___ftdiv@exp,c
 13171  0034C0  503B               	movf	___ftdiv@exp,w,c
 13172  0034C2  A4D8               	btfss	status,2,c
 13173  0034C4  D002               	goto	l9852
 13174  0034C6  D00E               	goto	l9854
 13175  0034C8  D061               	goto	l1961
 13176  0034CA                     l9852:
 13177  0034CA  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 13178  0034CE  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 13179  0034D0  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 13180  0034D2  3432               	rlcf	___ftdiv@f2+1,w,c
 13181  0034D4  3634               	rlcf	??___ftdiv& (0+255),f,c
 13182  0034D6  E301               	bnc	u8511
 13183  0034D8  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 13184  0034DA                     u8511:
 13185  0034DA  5034               	movf	??___ftdiv,w,c
 13186  0034DC  6E3C               	movwf	___ftdiv@sign,c
 13187  0034DE  503C               	movf	___ftdiv@sign,w,c
 13188  0034E0  A4D8               	btfss	status,2,c
 13189  0034E2  D007               	goto	l9858
 13190  0034E4                     l9854:
 13191  0034E4  0E00               	movlw	0
 13192  0034E6  6E2E               	movwf	?___ftdiv,c
 13193  0034E8  0E00               	movlw	0
 13194  0034EA  6E2F               	movwf	?___ftdiv+1,c
 13195  0034EC  0E00               	movlw	0
 13196  0034EE  6E30               	movwf	?___ftdiv+2,c
 13197  0034F0  D04D               	goto	l1961
 13198  0034F2                     l9858:
 13199  0034F2  0E00               	movlw	0
 13200  0034F4  6E38               	movwf	___ftdiv@f3,c
 13201  0034F6  0E00               	movlw	0
 13202  0034F8  6E39               	movwf	___ftdiv@f3+1,c
 13203  0034FA  0E00               	movlw	0
 13204  0034FC  6E3A               	movwf	___ftdiv@f3+2,c
 13205  0034FE  503C               	movf	___ftdiv@sign,w,c
 13206  003500  0F89               	addlw	137
 13207  003502  5E3B               	subwf	___ftdiv@exp,f,c
 13208  003504  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 13209  003508  5033               	movf	___ftdiv@f2+2,w,c
 13210  00350A  1A3C               	xorwf	___ftdiv@sign,f,c
 13211  00350C  0E80               	movlw	128
 13212  00350E  163C               	andwf	___ftdiv@sign,f,c
 13213  003510  8E2F               	bsf	___ftdiv@f1+1,7,c
 13214  003512  0EFF               	movlw	255
 13215  003514  162E               	andwf	___ftdiv@f1,f,c
 13216  003516  0EFF               	movlw	255
 13217  003518  162F               	andwf	___ftdiv@f1+1,f,c
 13218  00351A  0E00               	movlw	0
 13219  00351C  1630               	andwf	___ftdiv@f1+2,f,c
 13220  00351E  8E32               	bsf	___ftdiv@f2+1,7,c
 13221  003520  0EFF               	movlw	255
 13222  003522  1631               	andwf	___ftdiv@f2,f,c
 13223  003524  0EFF               	movlw	255
 13224  003526  1632               	andwf	___ftdiv@f2+1,f,c
 13225  003528  0E00               	movlw	0
 13226  00352A  1633               	andwf	___ftdiv@f2+2,f,c
 13227  00352C  0E18               	movlw	24
 13228  00352E  6E37               	movwf	___ftdiv@cntr,c
 13229  003530  D000               	goto	l9878
 13230  003532                     l9878:
 13231  003532  90D8               	bcf	status,0,c
 13232  003534  3638               	rlcf	___ftdiv@f3,f,c
 13233  003536  3639               	rlcf	___ftdiv@f3+1,f,c
 13234  003538  363A               	rlcf	___ftdiv@f3+2,f,c
 13235  00353A  5031               	movf	___ftdiv@f2,w,c
 13236  00353C  5C2E               	subwf	___ftdiv@f1,w,c
 13237  00353E  5032               	movf	___ftdiv@f2+1,w,c
 13238  003540  582F               	subwfb	___ftdiv@f1+1,w,c
 13239  003542  5033               	movf	___ftdiv@f2+2,w,c
 13240  003544  5830               	subwfb	___ftdiv@f1+2,w,c
 13241  003546  A0D8               	btfss	status,0,c
 13242  003548  D007               	goto	l1964
 13243  00354A  5031               	movf	___ftdiv@f2,w,c
 13244  00354C  5E2E               	subwf	___ftdiv@f1,f,c
 13245  00354E  5032               	movf	___ftdiv@f2+1,w,c
 13246  003550  5A2F               	subwfb	___ftdiv@f1+1,f,c
 13247  003552  5033               	movf	___ftdiv@f2+2,w,c
 13248  003554  5A30               	subwfb	___ftdiv@f1+2,f,c
 13249  003556  8038               	bsf	___ftdiv@f3,0,c
 13250  003558                     l1964:
 13251  003558  90D8               	bcf	status,0,c
 13252  00355A  362E               	rlcf	___ftdiv@f1,f,c
 13253  00355C  362F               	rlcf	___ftdiv@f1+1,f,c
 13254  00355E  3630               	rlcf	___ftdiv@f1+2,f,c
 13255  003560  2E37               	decfsz	___ftdiv@cntr,f,c
 13256  003562  D7E7               	goto	l9878
 13257  003564  D000               	goto	l9888
 13258  003566                     l9888:
 13259  003566  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 13260  00356A  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13261  00356E  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13262  003572  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 13263  003576  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 13264  00357A  EC12  F01C         	call	___ftpack	;wreg free
 13265  00357E  C011  F02E         	movff	?___ftpack,?___ftdiv
 13266  003582  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 13267  003586  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 13268  00358A  D000               	goto	l1961
 13269  00358C                     l1961:
 13270  00358C  0012               	return		;funcret
 13271  00358E                     __end_of___ftdiv:
 13272                           	opt stack 0
 13273                           tblptru	equ	0xFF8
 13274                           tblptrh	equ	0xFF7
 13275                           tblptrl	equ	0xFF6
 13276                           tablat	equ	0xFF5
 13277                           prodh	equ	0xFF4
 13278                           prodl	equ	0xFF3
 13279                           intcon	equ	0xFF2
 13280                           intcon2	equ	0xFF1
 13281                           postinc0	equ	0xFEE
 13282                           wreg	equ	0xFE8
 13283                           postdec1	equ	0xFE5
 13284                           fsr1l	equ	0xFE1
 13285                           indf2	equ	0xFDF
 13286                           postinc2	equ	0xFDE
 13287                           fsr2h	equ	0xFDA
 13288                           fsr2l	equ	0xFD9
 13289                           status	equ	0xFD8
 13290                           
 13291 ;; *************** function _Wait_One_Sec *****************
 13292 ;; Defined at:
 13293 ;;		line 92 in file "utils.c"
 13294 ;; Parameters:    Size  Location     Type
 13295 ;;		None
 13296 ;; Auto vars:     Size  Location     Type
 13297 ;;  k               2   16[COMRAM] int 
 13298 ;; Return value:  Size  Location     Type
 13299 ;;		None               void
 13300 ;; Registers used:
 13301 ;;		wreg, status,2, status,0
 13302 ;; Tracked objects:
 13303 ;;		On entry : 0/0
 13304 ;;		On exit  : 0/0
 13305 ;;		Unchanged: 0/0
 13306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;Total ram usage:        2 bytes
 13312 ;; Hardware stack levels used:    1
 13313 ;; Hardware stack levels required when called:    3
 13314 ;; This function calls:
 13315 ;;		Nothing
 13316 ;; This function is called by:
 13317 ;;		_Do_Beep_Good
 13318 ;;		_Do_Beep_Bad
 13319 ;;		_Do_Beep
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           	psect	text69
 13324  004F84                     __ptext69:
 13325                           	opt stack 0
 13326  004F84                     _Wait_One_Sec:
 13327                           	opt stack 25
 13328                           
 13329                           ;utils.c: 94: for (int k=0;k<0x8000;k++);
 13330                           
 13331                           ;incstack = 0
 13332  004F84  0E00               	movlw	0
 13333  004F86  6E12               	movwf	Wait_One_Sec@k+1,c
 13334  004F88  0E00               	movlw	0
 13335  004F8A  6E11               	movwf	Wait_One_Sec@k,c
 13336  004F8C                     l7302:
 13337  004F8C  0E80               	movlw	128
 13338  004F8E  5C12               	subwf	Wait_One_Sec@k+1,w,c
 13339  004F90  B0D8               	btfsc	status,0,c
 13340  004F92  D005               	goto	l1124
 13341  004F94  D001               	goto	l7306
 13342  004F96  D003               	goto	l1124
 13343  004F98                     l7306:
 13344  004F98  4A11               	infsnz	Wait_One_Sec@k,f,c
 13345  004F9A  2A12               	incf	Wait_One_Sec@k+1,f,c
 13346  004F9C  D7F7               	goto	l7302
 13347  004F9E                     l1124:
 13348  004F9E  0012               	return		;funcret
 13349  004FA0                     __end_of_Wait_One_Sec:
 13350                           	opt stack 0
 13351                           tblptru	equ	0xFF8
 13352                           tblptrh	equ	0xFF7
 13353                           tblptrl	equ	0xFF6
 13354                           tablat	equ	0xFF5
 13355                           prodh	equ	0xFF4
 13356                           prodl	equ	0xFF3
 13357                           intcon	equ	0xFF2
 13358                           intcon2	equ	0xFF1
 13359                           postinc0	equ	0xFEE
 13360                           wreg	equ	0xFE8
 13361                           postdec1	equ	0xFE5
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function _Deactivate_Buzzer *****************
 13370 ;; Defined at:
 13371 ;;		line 129 in file "utils.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;		None
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;		None
 13376 ;; Return value:  Size  Location     Type
 13377 ;;		None               void
 13378 ;; Registers used:
 13379 ;;		wreg, status,2
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;Total ram usage:        0 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    3
 13392 ;; This function calls:
 13393 ;;		Nothing
 13394 ;; This function is called by:
 13395 ;;		_Test_Alarm
 13396 ;;		_Do_Beep_Good
 13397 ;;		_Do_Beep_Bad
 13398 ;;		_Do_Beep
 13399 ;; This function uses a non-reentrant model
 13400 ;;
 13401                           
 13402                           	psect	text70
 13403  005208                     __ptext70:
 13404                           	opt stack 0
 13405  005208                     _Deactivate_Buzzer:
 13406                           	opt stack 26
 13407                           
 13408                           ;utils.c: 131: CCP2CON = 0x0;
 13409                           
 13410                           ;incstack = 0
 13411  005208  0E00               	movlw	0
 13412  00520A  6EBA               	movwf	4026,c	;volatile
 13413                           
 13414                           ;utils.c: 132: PORTBbits.RB3 = 0;
 13415  00520C  9681               	bcf	3969,3,c	;volatile
 13416  00520E  0012               	return		;funcret
 13417  005210                     __end_of_Deactivate_Buzzer:
 13418                           	opt stack 0
 13419                           tblptru	equ	0xFF8
 13420                           tblptrh	equ	0xFF7
 13421                           tblptrl	equ	0xFF6
 13422                           tablat	equ	0xFF5
 13423                           prodh	equ	0xFF4
 13424                           prodl	equ	0xFF3
 13425                           intcon	equ	0xFF2
 13426                           intcon2	equ	0xFF1
 13427                           postinc0	equ	0xFEE
 13428                           wreg	equ	0xFE8
 13429                           postdec1	equ	0xFE5
 13430                           fsr1l	equ	0xFE1
 13431                           indf2	equ	0xFDF
 13432                           postinc2	equ	0xFDE
 13433                           fsr2h	equ	0xFDA
 13434                           fsr2l	equ	0xFD9
 13435                           status	equ	0xFD8
 13436                           
 13437 ;; *************** function _Activate_Buzzer_500Hz *****************
 13438 ;; Defined at:
 13439 ;;		line 105 in file "utils.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;		None
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;		None
 13444 ;; Return value:  Size  Location     Type
 13445 ;;		None               void
 13446 ;; Registers used:
 13447 ;;		wreg, status,2
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13457 ;;Total ram usage:        0 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    3
 13460 ;; This function calls:
 13461 ;;		Nothing
 13462 ;; This function is called by:
 13463 ;;		_Do_Beep_Bad
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           	psect	text71
 13468  0050F2                     __ptext71:
 13469                           	opt stack 0
 13470  0050F2                     _Activate_Buzzer_500Hz:
 13471                           	opt stack 25
 13472                           
 13473                           ;utils.c: 107: PR2 = 0b11111001 ;
 13474                           
 13475                           ;incstack = 0
 13476  0050F2  0EF9               	movlw	249
 13477  0050F4  6ECB               	movwf	4043,c	;volatile
 13478                           
 13479                           ;utils.c: 108: T2CON = 0b00000111 ;
 13480  0050F6  0E07               	movlw	7
 13481  0050F8  6ECA               	movwf	4042,c	;volatile
 13482                           
 13483                           ;utils.c: 109: CCPR2L = 0b01111100 ;
 13484  0050FA  0E7C               	movlw	124
 13485  0050FC  6EBB               	movwf	4027,c	;volatile
 13486                           
 13487                           ;utils.c: 110: CCP2CON = 0b00111100 ;
 13488  0050FE  0E3C               	movlw	60
 13489  005100  6EBA               	movwf	4026,c	;volatile
 13490  005102  0012               	return		;funcret
 13491  005104                     __end_of_Activate_Buzzer_500Hz:
 13492                           	opt stack 0
 13493                           tblptru	equ	0xFF8
 13494                           tblptrh	equ	0xFF7
 13495                           tblptrl	equ	0xFF6
 13496                           tablat	equ	0xFF5
 13497                           prodh	equ	0xFF4
 13498                           prodl	equ	0xFF3
 13499                           intcon	equ	0xFF2
 13500                           intcon2	equ	0xFF1
 13501                           postinc0	equ	0xFEE
 13502                           wreg	equ	0xFE8
 13503                           postdec1	equ	0xFE5
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           fsr2h	equ	0xFDA
 13508                           fsr2l	equ	0xFD9
 13509                           status	equ	0xFD8
 13510                           
 13511 ;; *************** function _Decrease_Alarm_Time *****************
 13512 ;; Defined at:
 13513 ;;		line 84 in file "Setup_Alarm_Time.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;		None
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;		None
 13518 ;; Return value:  Size  Location     Type
 13519 ;;		None               void
 13520 ;; Registers used:
 13521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;Total ram usage:        0 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:   11
 13534 ;; This function calls:
 13535 ;;		_Update_Setup_Alarm_Time_Screen
 13536 ;; This function is called by:
 13537 ;;		_Do_Setup_Alarm_Time
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text72
 13542  00476E                     __ptext72:
 13543                           	opt stack 0
 13544  00476E                     _Decrease_Alarm_Time:
 13545                           	opt stack 18
 13546                           
 13547                           ;Setup_Alarm_Time.c: 86: switch (Select_Alarm_Field)
 13548                           
 13549                           ;incstack = 0
 13550  00476E  D01E               	goto	l10188
 13551  004770                     l10168:
 13552                           
 13553                           ;Setup_Alarm_Time.c: 89: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13554  004770  506E               	movf	_setup_alarm_hour,w,c
 13555  004772  A4D8               	btfss	status,2,c
 13556  004774  D003               	goto	l10172
 13557  004776  0E17               	movlw	23
 13558  004778  6E6E               	movwf	_setup_alarm_hour,c
 13559  00477A  D024               	goto	l10190
 13560  00477C                     l10172:
 13561                           
 13562                           ;Setup_Alarm_Time.c: 90: else --setup_alarm_hour;
 13563  00477C  066E               	decf	_setup_alarm_hour,f,c
 13564                           
 13565                           ;Setup_Alarm_Time.c: 91: break;
 13566  00477E  D022               	goto	l10190
 13567  004780                     l10174:
 13568                           
 13569                           ;Setup_Alarm_Time.c: 93: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13570  004780  0100               	movlb	0	; () banked
 13571  004782  51AE               	movf	_setup_alarm_minute& (0+255),w,b
 13572  004784  A4D8               	btfss	status,2,c
 13573  004786  D004               	goto	l10178
 13574                           
 13575                           ; BSR set to: 0
 13576  004788  0E3B               	movlw	59
 13577  00478A  0100               	movlb	0	; () banked
 13578  00478C  6FAE               	movwf	_setup_alarm_minute& (0+255),b
 13579  00478E  D01A               	goto	l10190
 13580  004790                     l10178:
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;Setup_Alarm_Time.c: 94: else --setup_alarm_minute;
 13584  004790  0100               	movlb	0	; () banked
 13585  004792  07AE               	decf	_setup_alarm_minute& (0+255),f,b
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;Setup_Alarm_Time.c: 95: break;
 13589  004794  D017               	goto	l10190
 13590  004796                     l10180:
 13591                           
 13592                           ; BSR set to: 0
 13593                           ;Setup_Alarm_Time.c: 97: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13594  004796  0100               	movlb	0	; () banked
 13595  004798  51AF               	movf	_setup_alarm_second& (0+255),w,b
 13596  00479A  A4D8               	btfss	status,2,c
 13597  00479C  D004               	goto	l10184
 13598                           
 13599                           ; BSR set to: 0
 13600  00479E  0E3B               	movlw	59
 13601  0047A0  0100               	movlb	0	; () banked
 13602  0047A2  6FAF               	movwf	_setup_alarm_second& (0+255),b
 13603  0047A4  D00F               	goto	l10190
 13604  0047A6                     l10184:
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;Setup_Alarm_Time.c: 98: else --setup_alarm_second;
 13608  0047A6  0100               	movlb	0	; () banked
 13609  0047A8  07AF               	decf	_setup_alarm_second& (0+255),f,b
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;Setup_Alarm_Time.c: 102: }
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Setup_Alarm_Time.c: 101: break;
 13616                           
 13617                           ;Setup_Alarm_Time.c: 100: default:
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;Setup_Alarm_Time.c: 99: break;
 13621  0047AA  D00C               	goto	l10190
 13622  0047AC                     l10188:
 13623  0047AC  0100               	movlb	0	; () banked
 13624  0047AE  51A5               	movf	_Select_Alarm_Field& (0+255),w,b
 13625                           
 13626                           ; Switch size 1, requested type "space"
 13627                           ; Number of cases is 3, Range of values is 0 to 2
 13628                           ; switch strategies available:
 13629                           ; Name         Instructions Cycles
 13630                           ; simple_byte           10     6 (average)
 13631                           ;	Chosen strategy is simple_byte
 13632  0047B0  0A00               	xorlw	0	; case 0
 13633  0047B2  B4D8               	btfsc	status,2,c
 13634  0047B4  D7DD               	goto	l10168
 13635  0047B6  0A01               	xorlw	1	; case 1
 13636  0047B8  B4D8               	btfsc	status,2,c
 13637  0047BA  D7E2               	goto	l10174
 13638  0047BC  0A03               	xorlw	3	; case 2
 13639  0047BE  B4D8               	btfsc	status,2,c
 13640  0047C0  D7EA               	goto	l10180
 13641  0047C2  D000               	goto	l10190
 13642  0047C4                     l10190:
 13643                           
 13644                           ;Setup_Alarm_Time.c: 103: Update_Setup_Alarm_Time_Screen();
 13645  0047C4  ECF8  F018         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13646  0047C8  0012               	return		;funcret
 13647  0047CA                     __end_of_Decrease_Alarm_Time:
 13648                           	opt stack 0
 13649                           tblptru	equ	0xFF8
 13650                           tblptrh	equ	0xFF7
 13651                           tblptrl	equ	0xFF6
 13652                           tablat	equ	0xFF5
 13653                           prodh	equ	0xFF4
 13654                           prodl	equ	0xFF3
 13655                           intcon	equ	0xFF2
 13656                           intcon2	equ	0xFF1
 13657                           postinc0	equ	0xFEE
 13658                           wreg	equ	0xFE8
 13659                           postdec1	equ	0xFE5
 13660                           fsr1l	equ	0xFE1
 13661                           indf2	equ	0xFDF
 13662                           postinc2	equ	0xFDE
 13663                           fsr2h	equ	0xFDA
 13664                           fsr2l	equ	0xFD9
 13665                           status	equ	0xFD8
 13666                           
 13667 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13668 ;; Defined at:
 13669 ;;		line 157 in file "Setup_Alarm_Time.c"
 13670 ;; Parameters:    Size  Location     Type
 13671 ;;		None
 13672 ;; Auto vars:     Size  Location     Type
 13673 ;;		None
 13674 ;; Return value:  Size  Location     Type
 13675 ;;		None               void
 13676 ;; Registers used:
 13677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13678 ;; Tracked objects:
 13679 ;;		On entry : 0/0
 13680 ;;		On exit  : 0/0
 13681 ;;		Unchanged: 0/0
 13682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;Total ram usage:        0 bytes
 13688 ;; Hardware stack levels used:    1
 13689 ;; Hardware stack levels required when called:   10
 13690 ;; This function calls:
 13691 ;;		___awdiv
 13692 ;;		___awmod
 13693 ;;		_drawtext
 13694 ;;		_printf
 13695 ;; This function is called by:
 13696 ;;		_Do_Setup_Alarm_Time
 13697 ;;		_Increase_Alarm_Time
 13698 ;;		_Decrease_Alarm_Time
 13699 ;; This function uses a non-reentrant model
 13700 ;;
 13701                           
 13702                           	psect	text73
 13703  0031F0                     __ptext73:
 13704                           	opt stack 0
 13705  0031F0                     _Update_Setup_Alarm_Time_Screen:
 13706                           	opt stack 19
 13707                           
 13708                           ;Setup_Alarm_Time.c: 159: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13709                           
 13710                           ;incstack = 0
 13711  0031F0  0E94               	movlw	low STR_28
 13712  0031F2  0100               	movlb	0	; () banked
 13713  0031F4  6FDA               	movwf	printf@f& (0+255),b
 13714  0031F6  0EFF               	movlw	high STR_28
 13715  0031F8  0100               	movlb	0	; () banked
 13716  0031FA  6FDB               	movwf	(printf@f+1)& (0+255),b
 13717  0031FC  C06E  F0DC         	movff	_setup_alarm_hour,?_printf+2
 13718  003200  0100               	movlb	0	; () banked
 13719  003202  6BDD               	clrf	(?_printf+3)& (0+255),b
 13720  003204  C0AE  F0DE         	movff	_setup_alarm_minute,?_printf+4
 13721  003208  0100               	movlb	0	; () banked
 13722  00320A  6BDF               	clrf	(?_printf+5)& (0+255),b
 13723  00320C  C0AF  F0E0         	movff	_setup_alarm_second,?_printf+6
 13724  003210  0100               	movlb	0	; () banked
 13725  003212  6BE1               	clrf	(?_printf+7)& (0+255),b
 13726  003214  EC0E  F000         	call	_printf	;wreg free
 13727                           
 13728                           ;Setup_Alarm_Time.c: 160: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13729  003218  C06E  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 13730  00321C  6A18               	clrf	___awdiv@dividend+1,c
 13731  00321E  0E00               	movlw	0
 13732  003220  6E1A               	movwf	___awdiv@divisor+1,c
 13733  003222  0E0A               	movlw	10
 13734  003224  6E19               	movwf	___awdiv@divisor,c
 13735  003226  EC2D  F01F         	call	___awdiv	;wreg free
 13736  00322A  5017               	movf	?___awdiv,w,c
 13737  00322C  0F30               	addlw	48
 13738  00322E  0101               	movlb	1	; () banked
 13739  003230  6F4D               	movwf	_setup_alarm_time& (0+255),b
 13740                           
 13741                           ; BSR set to: 1
 13742                           ;Setup_Alarm_Time.c: 161: setup_alarm_time[1] = (setup_alarm_hour%10)+ '0';
 13743  003232  C06E  F03D         	movff	_setup_alarm_hour,___awmod@dividend
 13744  003236  6A3E               	clrf	___awmod@dividend+1,c
 13745  003238  0E00               	movlw	0
 13746  00323A  6E40               	movwf	___awmod@divisor+1,c
 13747  00323C  0E0A               	movlw	10
 13748  00323E  6E3F               	movwf	___awmod@divisor,c
 13749  003240  EC29  F021         	call	___awmod	;wreg free
 13750  003244  503D               	movf	?___awmod,w,c
 13751  003246  0F30               	addlw	48
 13752  003248  0101               	movlb	1	; () banked
 13753  00324A  6F4E               	movwf	(_setup_alarm_time+1)& (0+255),b
 13754                           
 13755                           ; BSR set to: 1
 13756                           ;Setup_Alarm_Time.c: 162: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 13757  00324C  C0AE  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 13758  003250  6A18               	clrf	___awdiv@dividend+1,c
 13759  003252  0E00               	movlw	0
 13760  003254  6E1A               	movwf	___awdiv@divisor+1,c
 13761  003256  0E0A               	movlw	10
 13762  003258  6E19               	movwf	___awdiv@divisor,c
 13763  00325A  EC2D  F01F         	call	___awdiv	;wreg free
 13764  00325E  5017               	movf	?___awdiv,w,c
 13765  003260  0F30               	addlw	48
 13766  003262  0101               	movlb	1	; () banked
 13767  003264  6F50               	movwf	(_setup_alarm_time+3)& (0+255),b
 13768                           
 13769                           ; BSR set to: 1
 13770                           ;Setup_Alarm_Time.c: 163: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 13771  003266  C0AE  F03D         	movff	_setup_alarm_minute,___awmod@dividend
 13772  00326A  6A3E               	clrf	___awmod@dividend+1,c
 13773  00326C  0E00               	movlw	0
 13774  00326E  6E40               	movwf	___awmod@divisor+1,c
 13775  003270  0E0A               	movlw	10
 13776  003272  6E3F               	movwf	___awmod@divisor,c
 13777  003274  EC29  F021         	call	___awmod	;wreg free
 13778  003278  503D               	movf	?___awmod,w,c
 13779  00327A  0F30               	addlw	48
 13780  00327C  0101               	movlb	1	; () banked
 13781  00327E  6F51               	movwf	(_setup_alarm_time+4)& (0+255),b
 13782                           
 13783                           ; BSR set to: 1
 13784                           ;Setup_Alarm_Time.c: 164: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 13785  003280  C0AF  F017         	movff	_setup_alarm_second,___awdiv@dividend
 13786  003284  6A18               	clrf	___awdiv@dividend+1,c
 13787  003286  0E00               	movlw	0
 13788  003288  6E1A               	movwf	___awdiv@divisor+1,c
 13789  00328A  0E0A               	movlw	10
 13790  00328C  6E19               	movwf	___awdiv@divisor,c
 13791  00328E  EC2D  F01F         	call	___awdiv	;wreg free
 13792  003292  5017               	movf	?___awdiv,w,c
 13793  003294  0F30               	addlw	48
 13794  003296  0101               	movlb	1	; () banked
 13795  003298  6F53               	movwf	(_setup_alarm_time+6)& (0+255),b
 13796                           
 13797                           ; BSR set to: 1
 13798                           ;Setup_Alarm_Time.c: 165: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 13799  00329A  C0AF  F03D         	movff	_setup_alarm_second,___awmod@dividend
 13800  00329E  6A3E               	clrf	___awmod@dividend+1,c
 13801  0032A0  0E00               	movlw	0
 13802  0032A2  6E40               	movwf	___awmod@divisor+1,c
 13803  0032A4  0E0A               	movlw	10
 13804  0032A6  6E3F               	movwf	___awmod@divisor,c
 13805  0032A8  EC29  F021         	call	___awmod	;wreg free
 13806  0032AC  503D               	movf	?___awmod,w,c
 13807  0032AE  0F30               	addlw	48
 13808  0032B0  0101               	movlb	1	; () banked
 13809  0032B2  6F54               	movwf	(_setup_alarm_time+7)& (0+255),b
 13810                           
 13811                           ;Setup_Alarm_Time.c: 166: drawtext(15, 52, setup_alarm_time, 0xFFE0, 0x0000, 2);
 13812  0032B4  0E34               	movlw	52
 13813  0032B6  6E39               	movwf	drawtext@y,c
 13814  0032B8  0E4D               	movlw	low _setup_alarm_time
 13815  0032BA  6E3A               	movwf	drawtext@_text,c
 13816  0032BC  0E01               	movlw	high _setup_alarm_time
 13817  0032BE  6E3B               	movwf	drawtext@_text+1,c
 13818  0032C0  0EFF               	movlw	255
 13819  0032C2  6E3D               	movwf	drawtext@color+1,c
 13820  0032C4  0EE0               	movlw	224
 13821  0032C6  6E3C               	movwf	drawtext@color,c
 13822  0032C8  0E00               	movlw	0
 13823  0032CA  6E3F               	movwf	drawtext@bg+1,c
 13824  0032CC  0E00               	movlw	0
 13825  0032CE  6E3E               	movwf	drawtext@bg,c
 13826  0032D0  0E02               	movlw	2
 13827  0032D2  6E40               	movwf	drawtext@size,c
 13828  0032D4  0E0F               	movlw	15
 13829  0032D6  ECC7  F01A         	call	_drawtext
 13830  0032DA  0012               	return		;funcret
 13831  0032DC                     __end_of_Update_Setup_Alarm_Time_Screen:
 13832                           	opt stack 0
 13833                           tblptru	equ	0xFF8
 13834                           tblptrh	equ	0xFF7
 13835                           tblptrl	equ	0xFF6
 13836                           tablat	equ	0xFF5
 13837                           prodh	equ	0xFF4
 13838                           prodl	equ	0xFF3
 13839                           intcon	equ	0xFF2
 13840                           intcon2	equ	0xFF1
 13841                           postinc0	equ	0xFEE
 13842                           wreg	equ	0xFE8
 13843                           postdec1	equ	0xFE5
 13844                           fsr1l	equ	0xFE1
 13845                           indf2	equ	0xFDF
 13846                           postinc2	equ	0xFDE
 13847                           fsr2h	equ	0xFDA
 13848                           fsr2l	equ	0xFD9
 13849                           status	equ	0xFD8
 13850                           
 13851 ;; *************** function _printf *****************
 13852 ;; Defined at:
 13853 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 13856 ;;		 -> STR_37(22), STR_28(11), STR_5(20), STR_4(11), 
 13857 ;;		 -> STR_3(24), STR_2(21), STR_1(30), 
 13858 ;; Auto vars:     Size  Location     Type
 13859 ;;  idx             1    3[BANK1 ] unsigned char 
 13860 ;;  val             4   16[BANK1 ] unsigned long 
 13861 ;;  tmpval          4    8[BANK1 ] struct .
 13862 ;;  fval            3   22[BANK1 ] struct .
 13863 ;;  cp              3    0        PTR const unsigned char 
 13864 ;;  flag            2   20[BANK1 ] unsigned short 
 13865 ;;  exp             2   14[BANK1 ] int 
 13866 ;;  width           2   12[BANK1 ] int 
 13867 ;;  prec            2    6[BANK1 ] int 
 13868 ;;  ap              2    4[BANK1 ] PTR void [1]
 13869 ;;		 -> ?_printf(2), 
 13870 ;;  len             2    0        unsigned int 
 13871 ;;  c               1   25[BANK1 ] char 
 13872 ;;  d               1    0        unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  2    0[BANK0 ] int 
 13875 ;; Registers used:
 13876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13882 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Totals:         0      20      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;Total ram usage:       46 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    6
 13889 ;; This function calls:
 13890 ;;		___awdiv
 13891 ;;		___ftadd
 13892 ;;		___ftge
 13893 ;;		___ftmul
 13894 ;;		___ftneg
 13895 ;;		___ftsub
 13896 ;;		___fttol
 13897 ;;		___lldiv
 13898 ;;		___llmod
 13899 ;;		___lltoft
 13900 ;;		___wmul
 13901 ;;		__div_to_l_
 13902 ;;		__tdiv_to_l_
 13903 ;;		_fround
 13904 ;;		_isdigit
 13905 ;;		_putch
 13906 ;;		_scale
 13907 ;; This function is called by:
 13908 ;;		_main
 13909 ;;		_Update_Setup_Alarm_Time_Screen
 13910 ;;		_check_for_button_input
 13911 ;; This function uses a non-reentrant model
 13912 ;;
 13913                           
 13914                           	psect	text74
 13915  00001C                     __ptext74:
 13916                           	opt stack 0
 13917  00001C                     _printf:
 13918                           	opt stack 24
 13919                           
 13920                           ;doprnt.c: 466: va_list ap;
 13921                           ;doprnt.c: 499: signed char c;
 13922                           ;doprnt.c: 501: int width;
 13923                           ;doprnt.c: 504: int prec;
 13924                           ;doprnt.c: 508: unsigned short flag;
 13925                           ;doprnt.c: 515: char d;
 13926                           ;doprnt.c: 516: double fval;
 13927                           ;doprnt.c: 517: int exp;
 13928                           ;doprnt.c: 523: union {
 13929                           ;doprnt.c: 524: unsigned long vd;
 13930                           ;doprnt.c: 525: double integ;
 13931                           ;doprnt.c: 526: } tmpval;
 13932                           ;doprnt.c: 528: unsigned long val;
 13933                           ;doprnt.c: 529: unsigned len;
 13934                           ;doprnt.c: 530: const char * cp;
 13935                           ;doprnt.c: 533: *ap = __va_start();
 13936                           
 13937                           ;incstack = 0
 13938  00001C  0EDC               	movlw	low (?_printf+2)
 13939  00001E  0101               	movlb	1	; () banked
 13940  000020  6F80               	movwf	printf@ap& (0+255),b
 13941  000022  0E00               	movlw	high (?_printf+2)
 13942  000024  0101               	movlb	1	; () banked
 13943  000026  6F81               	movwf	(printf@ap+1)& (0+255),b
 13944                           
 13945                           ;doprnt.c: 536: while(c = *f++) {
 13946  000028  EF1E  F006         	goto	l9786
 13947  00002C                     l9500:
 13948                           
 13949                           ; BSR set to: 1
 13950                           ;doprnt.c: 538: if(c != '%')
 13951  00002C  0E25               	movlw	37
 13952  00002E  0101               	movlb	1	; () banked
 13953  000030  1995               	xorwf	printf@c& (0+255),w,b
 13954  000032  B4D8               	btfsc	status,2,c
 13955  000034  D006               	goto	l9504
 13956                           
 13957                           ; BSR set to: 1
 13958                           ;doprnt.c: 540: {
 13959                           ;doprnt.c: 541: (putch(c) );
 13960  000036  0101               	movlb	1	; () banked
 13961  000038  5195               	movf	printf@c& (0+255),w,b
 13962  00003A  ECC5  F028         	call	_putch
 13963                           
 13964                           ;doprnt.c: 542: continue;
 13965  00003E  EF1E  F006         	goto	l9786
 13966  000042                     l9504:
 13967                           
 13968                           ;doprnt.c: 543: }
 13969                           ;doprnt.c: 546: width = 0;
 13970  000042  0E00               	movlw	0
 13971  000044  0101               	movlb	1	; () banked
 13972  000046  6F89               	movwf	(printf@width+1)& (0+255),b
 13973  000048  0E00               	movlw	0
 13974  00004A  6F88               	movwf	printf@width& (0+255),b
 13975                           
 13976                           ;doprnt.c: 548: flag = 0;
 13977  00004C  0E00               	movlw	0
 13978  00004E  0101               	movlb	1	; () banked
 13979  000050  6F91               	movwf	(printf@flag+1)& (0+255),b
 13980  000052  0E00               	movlw	0
 13981  000054  6F90               	movwf	printf@flag& (0+255),b
 13982                           
 13983                           ; BSR set to: 1
 13984                           ;doprnt.c: 551: switch(*f) {
 13985                           
 13986                           ;doprnt.c: 550: for(;;) {
 13987  000056  D007               	goto	l9510
 13988  000058                     l9506:
 13989                           
 13990                           ;doprnt.c: 580: flag |= 0x04;
 13991  000058  0101               	movlb	1	; () banked
 13992  00005A  8590               	bsf	printf@flag& (0+255),2,b
 13993                           
 13994                           ;doprnt.c: 581: f++;
 13995  00005C  0100               	movlb	0	; () banked
 13996  00005E  4BDA               	infsnz	printf@f& (0+255),f,b
 13997  000060  2BDB               	incf	(printf@f+1)& (0+255),f,b
 13998                           
 13999                           ;doprnt.c: 582: continue;
 14000  000062  D001               	goto	l9510
 14001                           
 14002                           ; BSR set to: 0
 14003                           ;doprnt.c: 584: }
 14004  000064  D00B               	goto	l9512
 14005  000066                     l9510:
 14006  000066  C0DA  FFF6         	movff	printf@f,tblptrl
 14007  00006A  C0DB  FFF7         	movff	printf@f+1,tblptrh
 14008  00006E                     	if	0	;tblptru may be non-zero
 14009  00006E                     	endif
 14010  00006E                     	if	0	;tblptru may be non-zero
 14011  00006E                     	endif
 14012  00006E  0008               	tblrd		*
 14013  000070  50F5               	movf	tablat,w,c
 14014                           
 14015                           ; Switch size 1, requested type "space"
 14016                           ; Number of cases is 1, Range of values is 48 to 48
 14017                           ; switch strategies available:
 14018                           ; Name         Instructions Cycles
 14019                           ; simple_byte            4     3 (average)
 14020                           ;	Chosen strategy is simple_byte
 14021  000072  0A30               	xorlw	48	; case 48
 14022  000074  B4D8               	btfsc	status,2,c
 14023  000076  D7F0               	goto	l9506
 14024                           
 14025                           ;doprnt.c: 585: break;
 14026  000078  D001               	goto	l9512
 14027                           
 14028                           ;doprnt.c: 586: }
 14029  00007A  D7F5               	goto	l9510
 14030  00007C                     l9512:
 14031                           
 14032                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14033  00007C  C0DA  FFF6         	movff	printf@f,tblptrl
 14034  000080  C0DB  FFF7         	movff	printf@f+1,tblptrh
 14035  000084                     	if	0	;tblptru may be non-zero
 14036  000084                     	endif
 14037  000084                     	if	0	;tblptru may be non-zero
 14038  000084                     	endif
 14039  000084  0008               	tblrd		*
 14040  000086  50F5               	movf	tablat,w,c
 14041  000088  EC34  F027         	call	_isdigit
 14042  00008C  A0D8               	btfss	status,0,c
 14043  00008E  D04D               	goto	l9530
 14044                           
 14045                           ;doprnt.c: 598: width = 0;
 14046  000090  0E00               	movlw	0
 14047  000092  0101               	movlb	1	; () banked
 14048  000094  6F89               	movwf	(printf@width+1)& (0+255),b
 14049  000096  0E00               	movlw	0
 14050  000098  6F88               	movwf	printf@width& (0+255),b
 14051  00009A  D000               	goto	l9516
 14052  00009C                     l9516:
 14053                           
 14054                           ;doprnt.c: 600: width *= 10;
 14055  00009C  C188  F011         	movff	printf@width,___wmul@multiplier
 14056  0000A0  C189  F012         	movff	printf@width+1,___wmul@multiplier+1
 14057  0000A4  0E00               	movlw	0
 14058  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 14059  0000A8  0E0A               	movlw	10
 14060  0000AA  6E13               	movwf	___wmul@multiplicand,c
 14061  0000AC  ECC4  F026         	call	___wmul	;wreg free
 14062  0000B0  C011  F188         	movff	?___wmul,printf@width
 14063  0000B4  C012  F189         	movff	?___wmul+1,printf@width+1
 14064                           
 14065                           ;doprnt.c: 601: width += *f++ - '0';
 14066  0000B8  0ED0               	movlw	208
 14067  0000BA  0100               	movlb	0	; () banked
 14068  0000BC  6FE8               	movwf	??_printf& (0+255),b
 14069  0000BE  0EFF               	movlw	255
 14070  0000C0  0100               	movlb	0	; () banked
 14071  0000C2  6FE9               	movwf	(??_printf+1)& (0+255),b
 14072  0000C4  C0DA  FFF6         	movff	printf@f,tblptrl
 14073  0000C8  C0DB  FFF7         	movff	printf@f+1,tblptrh
 14074  0000CC                     	if	0	;tblptru may be non-zero
 14075  0000CC                     	endif
 14076  0000CC                     	if	0	;tblptru may be non-zero
 14077  0000CC                     	endif
 14078  0000CC  0008               	tblrd		*
 14079  0000CE  50F5               	movf	tablat,w,c
 14080  0000D0  0100               	movlb	0	; () banked
 14081  0000D2  6FEA               	movwf	(??_printf+2)& (0+255),b
 14082  0000D4  6BEB               	clrf	(??_printf+3)& (0+255),b
 14083  0000D6  0100               	movlb	0	; () banked
 14084  0000D8  51E8               	movf	??_printf& (0+255),w,b
 14085  0000DA  0100               	movlb	0	; () banked
 14086  0000DC  27EA               	addwf	(??_printf+2)& (0+255),f,b
 14087  0000DE  0100               	movlb	0	; () banked
 14088  0000E0  51E9               	movf	(??_printf+1)& (0+255),w,b
 14089  0000E2  0100               	movlb	0	; () banked
 14090  0000E4  23EB               	addwfc	(??_printf+3)& (0+255),f,b
 14091  0000E6  0100               	movlb	0	; () banked
 14092  0000E8  51EA               	movf	(??_printf+2)& (0+255),w,b
 14093  0000EA  0101               	movlb	1	; () banked
 14094  0000EC  2788               	addwf	printf@width& (0+255),f,b
 14095  0000EE  0100               	movlb	0	; () banked
 14096  0000F0  51EB               	movf	(??_printf+3)& (0+255),w,b
 14097  0000F2  0101               	movlb	1	; () banked
 14098  0000F4  2389               	addwfc	(printf@width+1)& (0+255),f,b
 14099                           
 14100                           ; BSR set to: 1
 14101  0000F6  0100               	movlb	0	; () banked
 14102  0000F8  4BDA               	infsnz	printf@f& (0+255),f,b
 14103  0000FA  2BDB               	incf	(printf@f+1)& (0+255),f,b
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14107  0000FC  C0DA  FFF6         	movff	printf@f,tblptrl
 14108  000100  C0DB  FFF7         	movff	printf@f+1,tblptrh
 14109  000104                     	if	0	;tblptru may be non-zero
 14110  000104                     	endif
 14111  000104                     	if	0	;tblptru may be non-zero
 14112  000104                     	endif
 14113  000104  0008               	tblrd		*
 14114  000106  50F5               	movf	tablat,w,c
 14115  000108  EC34  F027         	call	_isdigit
 14116  00010C  A0D8               	btfss	status,0,c
 14117  00010E  D00D               	goto	l9530
 14118  000110  D7C5               	goto	l9516
 14119                           
 14120                           ;doprnt.c: 608: }
 14121                           ;doprnt.c: 635: switch(c = *f++) {
 14122  000112  D00B               	goto	l9530
 14123                           
 14124                           ;doprnt.c: 638: goto alldone;
 14125                           
 14126                           ;doprnt.c: 637: case 0:
 14127  000114  EF2F  F006         	goto	l1528
 14128  000118                     l9524:
 14129                           
 14130                           ;doprnt.c: 663: flag |= 0x400;
 14131  000118  0101               	movlb	1	; () banked
 14132  00011A  8591               	bsf	(printf@flag+1)& (0+255),2,b
 14133                           
 14134                           ; BSR set to: 1
 14135                           ;doprnt.c: 698: case 'i':
 14136                           ;doprnt.c: 699: break;
 14137                           
 14138                           ; BSR set to: 1
 14139                           
 14140                           ;doprnt.c: 697: case 'd':
 14141                           
 14142                           ;doprnt.c: 664: break;
 14143  00011C  D024               	goto	l9532
 14144  00011E                     l9526:
 14145                           
 14146                           ; BSR set to: 1
 14147                           ;doprnt.c: 721: flag |= 0x80;
 14148  00011E  0101               	movlb	1	; () banked
 14149  000120  8F90               	bsf	printf@flag& (0+255),7,b
 14150                           
 14151                           ;doprnt.c: 723: break;
 14152  000122  D021               	goto	l9532
 14153                           
 14154                           ; BSR set to: 1
 14155                           ;doprnt.c: 813: continue;
 14156                           
 14157                           ;doprnt.c: 802: default:
 14158  000124  EF1E  F006         	goto	l9786
 14159                           
 14160                           ; BSR set to: 1
 14161                           ;doprnt.c: 822: }
 14162  000128  D01E               	goto	l9532
 14163  00012A                     l9530:
 14164  00012A  C0DA  FFF6         	movff	printf@f,tblptrl
 14165  00012E  C0DB  FFF7         	movff	printf@f+1,tblptrh
 14166  000132  0100               	movlb	0	; () banked
 14167  000134  4BDA               	infsnz	printf@f& (0+255),f,b
 14168  000136  2BDB               	incf	(printf@f+1)& (0+255),f,b
 14169  000138                     	if	0	;tblptru may be non-zero
 14170  000138                     	endif
 14171  000138                     	if	0	;tblptru may be non-zero
 14172  000138                     	endif
 14173  000138  0008               	tblrd		*
 14174  00013A  CFF5 F195          	movff	tablat,printf@c
 14175  00013E  0101               	movlb	1	; () banked
 14176  000140  5195               	movf	printf@c& (0+255),w,b
 14177                           
 14178                           ; Switch size 1, requested type "space"
 14179                           ; Number of cases is 5, Range of values is 0 to 120
 14180                           ; switch strategies available:
 14181                           ; Name         Instructions Cycles
 14182                           ; simple_byte           16     9 (average)
 14183                           ;	Chosen strategy is simple_byte
 14184  000142  0A00               	xorlw	0	; case 0
 14185  000144  B4D8               	btfsc	status,2,c
 14186  000146  EF2F  F006         	goto	l1528
 14187  00014A  0A64               	xorlw	100	; case 100
 14188  00014C  B4D8               	btfsc	status,2,c
 14189  00014E  D00B               	goto	l9532
 14190  000150  0A02               	xorlw	2	; case 102
 14191  000152  B4D8               	btfsc	status,2,c
 14192  000154  D7E1               	goto	l9524
 14193  000156  0A0F               	xorlw	15	; case 105
 14194  000158  B4D8               	btfsc	status,2,c
 14195  00015A  D005               	goto	l9532
 14196  00015C  0A11               	xorlw	17	; case 120
 14197  00015E  B4D8               	btfsc	status,2,c
 14198  000160  D7DE               	goto	l9526
 14199  000162  EF1E  F006         	goto	l9786
 14200  000166                     l9532:
 14201                           
 14202                           ; BSR set to: 1
 14203                           ;doprnt.c: 825: if(flag & (0x700)) {
 14204  000166  0E07               	movlw	7
 14205  000168  0101               	movlb	1	; () banked
 14206  00016A  1591               	andwf	(printf@flag+1)& (0+255),w,b
 14207  00016C  B4D8               	btfsc	status,2,c
 14208  00016E  D39A               	goto	l1446
 14209                           
 14210                           ; BSR set to: 1
 14211                           ;doprnt.c: 829: prec = 6;
 14212  000170  0E00               	movlw	0
 14213  000172  0101               	movlb	1	; () banked
 14214  000174  6F83               	movwf	(printf@prec+1)& (0+255),b
 14215  000176  0E06               	movlw	6
 14216  000178  6F82               	movwf	printf@prec& (0+255),b
 14217                           
 14218                           ; BSR set to: 1
 14219                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 14220  00017A  C180  FFD9         	movff	printf@ap,fsr2l
 14221  00017E  C181  FFDA         	movff	printf@ap+1,fsr2h
 14222  000182  CFDE F192          	movff	postinc2,printf@fval
 14223  000186  CFDE F193          	movff	postinc2,printf@fval+1
 14224  00018A  CFDD F194          	movff	postdec2,printf@fval+2
 14225                           
 14226                           ; BSR set to: 1
 14227  00018E  0E03               	movlw	3
 14228  000190  0101               	movlb	1	; () banked
 14229  000192  2780               	addwf	printf@ap& (0+255),f,b
 14230  000194  0E00               	movlw	0
 14231  000196  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 14232                           
 14233                           ; BSR set to: 1
 14234                           ;doprnt.c: 831: if(fval < 0.0) {
 14235  000198  0101               	movlb	1	; () banked
 14236  00019A  AF94               	btfss	(printf@fval+2)& (0+255),7,b
 14237  00019C  D012               	goto	l9546
 14238                           
 14239                           ; BSR set to: 1
 14240                           ;doprnt.c: 832: fval = -fval;
 14241  00019E  C192  F011         	movff	printf@fval,___ftneg@f1
 14242  0001A2  C193  F012         	movff	printf@fval+1,___ftneg@f1+1
 14243  0001A6  C194  F013         	movff	printf@fval+2,___ftneg@f1+2
 14244  0001AA  ECFE  F026         	call	___ftneg	;wreg free
 14245  0001AE  C011  F192         	movff	?___ftneg,printf@fval
 14246  0001B2  C012  F193         	movff	?___ftneg+1,printf@fval+1
 14247  0001B6  C013  F194         	movff	?___ftneg+2,printf@fval+2
 14248                           
 14249                           ;doprnt.c: 833: flag |= 0x03;
 14250  0001BA  0E03               	movlw	3
 14251  0001BC  0101               	movlb	1	; () banked
 14252  0001BE  1390               	iorwf	printf@flag& (0+255),f,b
 14253  0001C0  D000               	goto	l9546
 14254  0001C2                     l9546:
 14255                           
 14256                           ; BSR set to: 1
 14257                           ;doprnt.c: 834: }
 14258                           ;doprnt.c: 835: exp = 0;
 14259  0001C2  0E00               	movlw	0
 14260  0001C4  0101               	movlb	1	; () banked
 14261  0001C6  6F8B               	movwf	(printf@exp+1)& (0+255),b
 14262  0001C8  0E00               	movlw	0
 14263  0001CA  6F8A               	movwf	printf@exp& (0+255),b
 14264                           
 14265                           ; BSR set to: 1
 14266                           ;doprnt.c: 836: if( fval!=0) {
 14267  0001CC  0101               	movlb	1	; () banked
 14268  0001CE  5192               	movf	printf@fval& (0+255),w,b
 14269  0001D0  0101               	movlb	1	; () banked
 14270  0001D2  1193               	iorwf	(printf@fval+1)& (0+255),w,b
 14271  0001D4  0101               	movlb	1	; () banked
 14272  0001D6  1194               	iorwf	(printf@fval+2)& (0+255),w,b
 14273  0001D8  B4D8               	btfsc	status,2,c
 14274  0001DA  D093               	goto	l9574
 14275                           
 14276                           ; BSR set to: 1
 14277                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 14278  0001DC  0E82               	movlw	130
 14279  0001DE  0100               	movlb	0	; () banked
 14280  0001E0  6FE8               	movwf	??_printf& (0+255),b
 14281  0001E2  0EFF               	movlw	255
 14282  0001E4  0100               	movlb	0	; () banked
 14283  0001E6  6FE9               	movwf	(??_printf+1)& (0+255),b
 14284  0001E8  C192  F0EA         	movff	printf@fval,??_printf+2
 14285  0001EC  C193  F0EB         	movff	printf@fval+1,??_printf+3
 14286  0001F0  C194  F0EC         	movff	printf@fval+2,??_printf+4
 14287  0001F4  C195  F0ED         	movff	printf@fval+3,??_printf+5
 14288  0001F8  0E10               	movlw	16
 14289  0001FA  D006               	goto	u7970
 14290  0001FC                     u7975:
 14291  0001FC  0100               	movlb	0	; () banked
 14292  0001FE  90D8               	bcf	status,0,c
 14293  000200  33ED               	rrcf	(??_printf+5)& (0+255),f,b
 14294  000202  33EC               	rrcf	(??_printf+4)& (0+255),f,b
 14295  000204  33EB               	rrcf	(??_printf+3)& (0+255),f,b
 14296  000206  33EA               	rrcf	(??_printf+2)& (0+255),f,b
 14297  000208                     u7970:
 14298  000208  2EE8               	decfsz	wreg,f,c
 14299  00020A  D7F8               	goto	u7975
 14300  00020C  0100               	movlb	0	; () banked
 14301  00020E  51EA               	movf	(??_printf+2)& (0+255),w,b
 14302  000210  0100               	movlb	0	; () banked
 14303  000212  25E8               	addwf	??_printf& (0+255),w,b
 14304  000214  0101               	movlb	1	; () banked
 14305  000216  6F8A               	movwf	printf@exp& (0+255),b
 14306  000218  0E00               	movlw	0
 14307  00021A  0100               	movlb	0	; () banked
 14308  00021C  21E9               	addwfc	(??_printf+1)& (0+255),w,b
 14309  00021E  0101               	movlb	1	; () banked
 14310  000220  6F8B               	movwf	(printf@exp+1)& (0+255),b
 14311                           
 14312                           ; BSR set to: 1
 14313                           ;doprnt.c: 838: exp--;
 14314  000222  0101               	movlb	1	; () banked
 14315  000224  078A               	decf	printf@exp& (0+255),f,b
 14316  000226  A0D8               	btfss	status,0,c
 14317  000228  078B               	decf	(printf@exp+1)& (0+255),f,b
 14318                           
 14319                           ; BSR set to: 1
 14320                           ;doprnt.c: 839: exp *= 3;
 14321  00022A  C18A  F011         	movff	printf@exp,___wmul@multiplier
 14322  00022E  C18B  F012         	movff	printf@exp+1,___wmul@multiplier+1
 14323  000232  0E00               	movlw	0
 14324  000234  6E14               	movwf	___wmul@multiplicand+1,c
 14325  000236  0E03               	movlw	3
 14326  000238  6E13               	movwf	___wmul@multiplicand,c
 14327  00023A  ECC4  F026         	call	___wmul	;wreg free
 14328  00023E  C011  F18A         	movff	?___wmul,printf@exp
 14329  000242  C012  F18B         	movff	?___wmul+1,printf@exp+1
 14330                           
 14331                           ;doprnt.c: 840: exp /= 10;
 14332  000246  C18A  F017         	movff	printf@exp,___awdiv@dividend
 14333  00024A  C18B  F018         	movff	printf@exp+1,___awdiv@dividend+1
 14334  00024E  0E00               	movlw	0
 14335  000250  6E1A               	movwf	___awdiv@divisor+1,c
 14336  000252  0E0A               	movlw	10
 14337  000254  6E19               	movwf	___awdiv@divisor,c
 14338  000256  EC2D  F01F         	call	___awdiv	;wreg free
 14339  00025A  C017  F18A         	movff	?___awdiv,printf@exp
 14340  00025E  C018  F18B         	movff	?___awdiv+1,printf@exp+1
 14341                           
 14342                           ;doprnt.c: 841: if(exp < 0)
 14343  000262  0101               	movlb	1	; () banked
 14344  000264  AF8B               	btfss	(printf@exp+1)& (0+255),7,b
 14345  000266  D005               	goto	l9562
 14346                           
 14347                           ; BSR set to: 1
 14348                           ;doprnt.c: 842: exp--;
 14349  000268  0101               	movlb	1	; () banked
 14350  00026A  078A               	decf	printf@exp& (0+255),f,b
 14351  00026C  A0D8               	btfss	status,0,c
 14352  00026E  078B               	decf	(printf@exp+1)& (0+255),f,b
 14353  000270  D000               	goto	l9562
 14354  000272                     l9562:
 14355                           
 14356                           ; BSR set to: 1
 14357                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 14358  000272  0101               	movlb	1	; () banked
 14359  000274  518A               	movf	printf@exp& (0+255),w,b
 14360  000276  0800               	sublw	0
 14361  000278  EC41  F009         	call	_scale
 14362  00027C  C043  F184         	movff	?_scale,printf@tmpval
 14363  000280  C044  F185         	movff	?_scale+1,printf@tmpval+1
 14364  000284  C045  F186         	movff	?_scale+2,printf@tmpval+2
 14365                           
 14366                           ;doprnt.c: 847: tmpval.integ *= fval;
 14367  000288  C184  F01F         	movff	printf@tmpval,___ftmul@f1
 14368  00028C  C185  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 14369  000290  C186  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 14370  000294  C192  F022         	movff	printf@fval,___ftmul@f2
 14371  000298  C193  F023         	movff	printf@fval+1,___ftmul@f2+1
 14372  00029C  C194  F024         	movff	printf@fval+2,___ftmul@f2+2
 14373  0002A0  EC8B  F017         	call	___ftmul	;wreg free
 14374  0002A4  C01F  F184         	movff	?___ftmul,printf@tmpval
 14375  0002A8  C020  F185         	movff	?___ftmul+1,printf@tmpval+1
 14376  0002AC  C021  F186         	movff	?___ftmul+2,printf@tmpval+2
 14377                           
 14378                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 14379  0002B0  C184  F011         	movff	printf@tmpval,___ftge@ff1
 14380  0002B4  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 14381  0002B8  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 14382  0002BC  0E00               	movlw	0
 14383  0002BE  6E14               	movwf	___ftge@ff2,c
 14384  0002C0  0E80               	movlw	128
 14385  0002C2  6E15               	movwf	___ftge@ff2+1,c
 14386  0002C4  0E3F               	movlw	63
 14387  0002C6  6E16               	movwf	___ftge@ff2+2,c
 14388  0002C8  EC78  F01F         	call	___ftge	;wreg free
 14389  0002CC  B0D8               	btfsc	status,0,c
 14390  0002CE  D005               	goto	l9570
 14391                           
 14392                           ;doprnt.c: 849: exp--;
 14393  0002D0  0101               	movlb	1	; () banked
 14394  0002D2  078A               	decf	printf@exp& (0+255),f,b
 14395  0002D4  A0D8               	btfss	status,0,c
 14396  0002D6  078B               	decf	(printf@exp+1)& (0+255),f,b
 14397  0002D8  D014               	goto	l9574
 14398  0002DA                     l9570:
 14399                           
 14400                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 14401  0002DA  C184  F011         	movff	printf@tmpval,___ftge@ff1
 14402  0002DE  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 14403  0002E2  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 14404  0002E6  0E00               	movlw	0
 14405  0002E8  6E14               	movwf	___ftge@ff2,c
 14406  0002EA  0E20               	movlw	32
 14407  0002EC  6E15               	movwf	___ftge@ff2+1,c
 14408  0002EE  0E41               	movlw	65
 14409  0002F0  6E16               	movwf	___ftge@ff2+2,c
 14410  0002F2  EC78  F01F         	call	___ftge	;wreg free
 14411  0002F6  A0D8               	btfss	status,0,c
 14412  0002F8  D004               	goto	l9574
 14413                           
 14414                           ;doprnt.c: 851: exp++;
 14415  0002FA  0101               	movlb	1	; () banked
 14416  0002FC  4B8A               	infsnz	printf@exp& (0+255),f,b
 14417  0002FE  2B8B               	incf	(printf@exp+1)& (0+255),f,b
 14418                           
 14419                           ; BSR set to: 1
 14420                           
 14421                           ; BSR set to: 1
 14422  000300  D000               	goto	l9574
 14423  000302                     l9574:
 14424                           
 14425                           ;doprnt.c: 852: }
 14426                           ;doprnt.c: 1112: if(prec <= 12)
 14427  000302  0101               	movlb	1	; () banked
 14428  000304  BF83               	btfsc	(printf@prec+1)& (0+255),7,b
 14429  000306  D008               	goto	l9576
 14430  000308  0101               	movlb	1	; () banked
 14431  00030A  5183               	movf	(printf@prec+1)& (0+255),w,b
 14432  00030C  E11E               	bnz	l9578
 14433  00030E  0E0D               	movlw	13
 14434  000310  0101               	movlb	1	; () banked
 14435  000312  5D82               	subwf	printf@prec& (0+255),w,b
 14436  000314  B0D8               	btfsc	status,0,c
 14437  000316  D019               	goto	l9578
 14438  000318                     l9576:
 14439                           
 14440                           ; BSR set to: 1
 14441                           ;doprnt.c: 1113: fval += fround(prec);
 14442  000318  C192  F04D         	movff	printf@fval,___ftadd@f1
 14443  00031C  C193  F04E         	movff	printf@fval+1,___ftadd@f1+1
 14444  000320  C194  F04F         	movff	printf@fval+2,___ftadd@f1+2
 14445  000324  0101               	movlb	1	; () banked
 14446  000326  5182               	movf	printf@prec& (0+255),w,b
 14447  000328  EC1C  F00E         	call	_fround
 14448  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 14449  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 14450  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 14451  000338  EC21  F010         	call	___ftadd	;wreg free
 14452  00033C  C04D  F192         	movff	?___ftadd,printf@fval
 14453  000340  C04E  F193         	movff	?___ftadd+1,printf@fval+1
 14454  000344  C04F  F194         	movff	?___ftadd+2,printf@fval+2
 14455  000348  D000               	goto	l9578
 14456  00034A                     l9578:
 14457                           
 14458                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 14459  00034A  0101               	movlb	1	; () banked
 14460  00034C  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 14461  00034E  D008               	goto	l9580
 14462  000350  0101               	movlb	1	; () banked
 14463  000352  518B               	movf	(printf@exp+1)& (0+255),w,b
 14464  000354  E128               	bnz	l9586
 14465  000356  0E0A               	movlw	10
 14466  000358  0101               	movlb	1	; () banked
 14467  00035A  5D8A               	subwf	printf@exp& (0+255),w,b
 14468  00035C  B0D8               	btfsc	status,0,c
 14469  00035E  D023               	goto	l9586
 14470  000360                     l9580:
 14471                           
 14472                           ; BSR set to: 1
 14473  000360  0101               	movlb	1	; () banked
 14474  000362  5192               	movf	printf@fval& (0+255),w,b
 14475  000364  0101               	movlb	1	; () banked
 14476  000366  1193               	iorwf	(printf@fval+1)& (0+255),w,b
 14477  000368  0101               	movlb	1	; () banked
 14478  00036A  1194               	iorwf	(printf@fval+2)& (0+255),w,b
 14479  00036C  B4D8               	btfsc	status,2,c
 14480  00036E  D077               	goto	l9600
 14481                           
 14482                           ; BSR set to: 1
 14483  000370  C192  F02E         	movff	printf@fval,___fttol@f1
 14484  000374  C193  F02F         	movff	printf@fval+1,___fttol@f1+1
 14485  000378  C194  F030         	movff	printf@fval+2,___fttol@f1+2
 14486  00037C  ECE3  F019         	call	___fttol	;wreg free
 14487  000380  502E               	movf	?___fttol,w,c
 14488  000382  102F               	iorwf	?___fttol+1,w,c
 14489  000384  1030               	iorwf	?___fttol+2,w,c
 14490  000386  1031               	iorwf	?___fttol+3,w,c
 14491  000388  A4D8               	btfss	status,2,c
 14492  00038A  D069               	goto	l9600
 14493  00038C  0101               	movlb	1	; () banked
 14494  00038E  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 14495  000390  D066               	goto	l9600
 14496  000392  0101               	movlb	1	; () banked
 14497  000394  518B               	movf	(printf@exp+1)& (0+255),w,b
 14498  000396  E107               	bnz	l9586
 14499  000398  0E02               	movlw	2
 14500  00039A  0101               	movlb	1	; () banked
 14501  00039C  5D8A               	subwf	printf@exp& (0+255),w,b
 14502  00039E  B0D8               	btfsc	status,0,c
 14503  0003A0  D002               	goto	l9586
 14504  0003A2  D05D               	goto	l9600
 14505  0003A4  D000               	goto	l9586
 14506  0003A6                     l9586:
 14507                           
 14508                           ; BSR set to: 1
 14509                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 14510  0003A6  C184  F011         	movff	printf@tmpval,___ftge@ff1
 14511  0003AA  C185  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 14512  0003AE  C186  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 14513  0003B2  0E70               	movlw	112
 14514  0003B4  6E14               	movwf	___ftge@ff2,c
 14515  0003B6  0E89               	movlw	137
 14516  0003B8  6E15               	movwf	___ftge@ff2+1,c
 14517  0003BA  0E40               	movlw	64
 14518  0003BC  6E16               	movwf	___ftge@ff2+2,c
 14519  0003BE  EC78  F01F         	call	___ftge	;wreg free
 14520  0003C2  B0D8               	btfsc	status,0,c
 14521  0003C4  D003               	goto	l9590
 14522                           
 14523                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 14524  0003C6  0101               	movlb	1	; () banked
 14525  0003C8  0EF7               	movlw	247
 14526  0003CA  D002               	goto	L13
 14527  0003CC                     l9590:
 14528                           
 14529                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 14530  0003CC  0101               	movlb	1	; () banked
 14531  0003CE  0EF8               	movlw	248
 14532  0003D0                     L13:
 14533  0003D0  278A               	addwf	printf@exp& (0+255),f,b
 14534  0003D2  0EFF               	movlw	255
 14535  0003D4  238B               	addwfc	(printf@exp+1)& (0+255),f,b
 14536  0003D6  D000               	goto	l9592
 14537  0003D8                     l9592:
 14538                           
 14539                           ; BSR set to: 1
 14540                           ;doprnt.c: 1124: }
 14541                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 14542  0003D8  0101               	movlb	1	; () banked
 14543  0003DA  518A               	movf	printf@exp& (0+255),w,b
 14544  0003DC  EC41  F009         	call	_scale
 14545  0003E0  C043  F184         	movff	?_scale,printf@tmpval
 14546  0003E4  C044  F185         	movff	?_scale+1,printf@tmpval+1
 14547  0003E8  C045  F186         	movff	?_scale+2,printf@tmpval+2
 14548                           
 14549                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 14550  0003EC  D017               	goto	l9596
 14551  0003EE  C192  F011         	movff	printf@fval,__div_to_l_@f1
 14552  0003F2  C193  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 14553  0003F6  C194  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 14554  0003FA  C184  F014         	movff	printf@tmpval,__div_to_l_@f2
 14555  0003FE  C185  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 14556  000402  C186  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 14557  000406  EC06  F017         	call	__div_to_l_	;wreg free
 14558  00040A  C011  F18C         	movff	?__div_to_l_,printf@val
 14559  00040E  C012  F18D         	movff	?__div_to_l_+1,printf@val+1
 14560  000412  C013  F18E         	movff	?__div_to_l_+2,printf@val+2
 14561  000416  C014  F18F         	movff	?__div_to_l_+3,printf@val+3
 14562  00041A  D017               	goto	l9598
 14563  00041C                     l9596:
 14564  00041C  C192  F011         	movff	printf@fval,__tdiv_to_l_@f1
 14565  000420  C193  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 14566  000424  C194  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 14567  000428  C184  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 14568  00042C  C185  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 14569  000430  C186  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 14570  000434  EC70  F015         	call	__tdiv_to_l_	;wreg free
 14571  000438  C011  F18C         	movff	?__tdiv_to_l_,printf@val
 14572  00043C  C012  F18D         	movff	?__tdiv_to_l_+1,printf@val+1
 14573  000440  C013  F18E         	movff	?__tdiv_to_l_+2,printf@val+2
 14574  000444  C014  F18F         	movff	?__tdiv_to_l_+3,printf@val+3
 14575  000448  D000               	goto	l9598
 14576  00044A                     l9598:
 14577                           
 14578                           ;doprnt.c: 1129: fval = 0.0;
 14579  00044A  0E00               	movlw	0
 14580  00044C  0101               	movlb	1	; () banked
 14581  00044E  6F92               	movwf	printf@fval& (0+255),b
 14582  000450  0E00               	movlw	0
 14583  000452  0101               	movlb	1	; () banked
 14584  000454  6F93               	movwf	(printf@fval+1)& (0+255),b
 14585  000456  0E00               	movlw	0
 14586  000458  0101               	movlb	1	; () banked
 14587  00045A  6F94               	movwf	(printf@fval+2)& (0+255),b
 14588                           
 14589                           ;doprnt.c: 1130: } else {
 14590  00045C  D034               	goto	l9604
 14591  00045E                     l9600:
 14592                           
 14593                           ;doprnt.c: 1131: val = (unsigned long)fval;
 14594  00045E  C192  F02E         	movff	printf@fval,___fttol@f1
 14595  000462  C193  F02F         	movff	printf@fval+1,___fttol@f1+1
 14596  000466  C194  F030         	movff	printf@fval+2,___fttol@f1+2
 14597  00046A  ECE3  F019         	call	___fttol	;wreg free
 14598  00046E  C02E  F18C         	movff	?___fttol,printf@val
 14599  000472  C02F  F18D         	movff	?___fttol+1,printf@val+1
 14600  000476  C030  F18E         	movff	?___fttol+2,printf@val+2
 14601  00047A  C031  F18F         	movff	?___fttol+3,printf@val+3
 14602                           
 14603                           ;doprnt.c: 1132: fval -= (double)val;
 14604  00047E  C192  F059         	movff	printf@fval,___ftsub@f1
 14605  000482  C193  F05A         	movff	printf@fval+1,___ftsub@f1+1
 14606  000486  C194  F05B         	movff	printf@fval+2,___ftsub@f1+2
 14607  00048A  C18C  F019         	movff	printf@val,___lltoft@c
 14608  00048E  C18D  F01A         	movff	printf@val+1,___lltoft@c+1
 14609  000492  C18E  F01B         	movff	printf@val+2,___lltoft@c+2
 14610  000496  C18F  F01C         	movff	printf@val+3,___lltoft@c+3
 14611  00049A  EC29  F023         	call	___lltoft	;wreg free
 14612  00049E  C019  F05C         	movff	?___lltoft,___ftsub@f2
 14613  0004A2  C01A  F05D         	movff	?___lltoft+1,___ftsub@f2+1
 14614  0004A6  C01B  F05E         	movff	?___lltoft+2,___ftsub@f2+2
 14615  0004AA  EC27  F025         	call	___ftsub	;wreg free
 14616  0004AE  C059  F192         	movff	?___ftsub,printf@fval
 14617  0004B2  C05A  F193         	movff	?___ftsub+1,printf@fval+1
 14618  0004B6  C05B  F194         	movff	?___ftsub+2,printf@fval+2
 14619                           
 14620                           ;doprnt.c: 1133: exp = 0;
 14621  0004BA  0E00               	movlw	0
 14622  0004BC  0101               	movlb	1	; () banked
 14623  0004BE  6F8B               	movwf	(printf@exp+1)& (0+255),b
 14624  0004C0  0E00               	movlw	0
 14625  0004C2  6F8A               	movwf	printf@exp& (0+255),b
 14626  0004C4  D000               	goto	l9604
 14627  0004C6                     l9604:
 14628                           
 14629                           ; BSR set to: 1
 14630                           ;doprnt.c: 1134: }
 14631                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 14632  0004C6  0E01               	movlw	1
 14633  0004C8  0101               	movlb	1	; () banked
 14634  0004CA  6F95               	movwf	printf@c& (0+255),b
 14635  0004CC                     l9606:
 14636                           
 14637                           ; BSR set to: 1
 14638  0004CC  0E0A               	movlw	10
 14639  0004CE  0101               	movlb	1	; () banked
 14640  0004D0  1995               	xorwf	printf@c& (0+255),w,b
 14641  0004D2  B4D8               	btfsc	status,2,c
 14642  0004D4  D022               	goto	l9618
 14643  0004D6  D001               	goto	l9610
 14644                           
 14645                           ; BSR set to: 1
 14646  0004D8  D020               	goto	l9618
 14647  0004DA                     l9610:
 14648                           
 14649                           ; BSR set to: 1
 14650                           ;doprnt.c: 1137: if(val < dpowers[c])
 14651  0004DA  0101               	movlb	1	; () banked
 14652  0004DC  5195               	movf	printf@c& (0+255),w,b
 14653  0004DE  0D04               	mullw	4
 14654  0004E0  0E12               	movlw	low _dpowers
 14655  0004E2  24F3               	addwf	prodl,w,c
 14656  0004E4  6EF6               	movwf	tblptrl,c
 14657  0004E6  0EFE               	movlw	high _dpowers
 14658  0004E8  20F4               	addwfc	prodh,w,c
 14659  0004EA  6EF7               	movwf	tblptrh,c
 14660  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 14661  0004EC                     	endif
 14662  0004EC  0009               	tblrd		*+
 14663  0004EE  50F5               	movf	tablat,w,c
 14664  0004F0  0101               	movlb	1	; () banked
 14665  0004F2  5D8C               	subwf	printf@val& (0+255),w,b
 14666  0004F4  0009               	tblrd		*+
 14667  0004F6  50F5               	movf	tablat,w,c
 14668  0004F8  0101               	movlb	1	; () banked
 14669  0004FA  598D               	subwfb	(printf@val+1)& (0+255),w,b
 14670  0004FC  0009               	tblrd		*+
 14671  0004FE  50F5               	movf	tablat,w,c
 14672  000500  0101               	movlb	1	; () banked
 14673  000502  598E               	subwfb	(printf@val+2)& (0+255),w,b
 14674  000504  0009               	tblrd		*+
 14675  000506  50F5               	movf	tablat,w,c
 14676  000508  0101               	movlb	1	; () banked
 14677  00050A  598F               	subwfb	(printf@val+3)& (0+255),w,b
 14678  00050C  A0D8               	btfss	status,0,c
 14679  00050E  D005               	goto	l9618
 14680  000510  D001               	goto	l9614
 14681                           
 14682                           ; BSR set to: 1
 14683                           ;doprnt.c: 1138: break;
 14684  000512  D003               	goto	l9618
 14685  000514                     l9614:
 14686                           
 14687                           ; BSR set to: 1
 14688  000514  0101               	movlb	1	; () banked
 14689  000516  2B95               	incf	printf@c& (0+255),f,b
 14690  000518  D7D9               	goto	l9606
 14691  00051A                     l9618:
 14692                           
 14693                           ; BSR set to: 1
 14694                           ;doprnt.c: 1142: width -= prec + c + exp;
 14695  00051A  C195  F0E8         	movff	printf@c,??_printf
 14696  00051E  0100               	movlb	0	; () banked
 14697  000520  6BE9               	clrf	(??_printf+1)& (0+255),b
 14698  000522  BFE8               	btfsc	??_printf& (0+255),7,b
 14699  000524  07E9               	decf	(??_printf+1)& (0+255),f,b
 14700  000526  0101               	movlb	1	; () banked
 14701  000528  5182               	movf	printf@prec& (0+255),w,b
 14702  00052A  0100               	movlb	0	; () banked
 14703  00052C  27E8               	addwf	??_printf& (0+255),f,b
 14704  00052E  0101               	movlb	1	; () banked
 14705  000530  5183               	movf	(printf@prec+1)& (0+255),w,b
 14706  000532  0100               	movlb	0	; () banked
 14707  000534  23E9               	addwfc	(??_printf+1)& (0+255),f,b
 14708  000536  0101               	movlb	1	; () banked
 14709  000538  518A               	movf	printf@exp& (0+255),w,b
 14710  00053A  0100               	movlb	0	; () banked
 14711  00053C  27E8               	addwf	??_printf& (0+255),f,b
 14712  00053E  0101               	movlb	1	; () banked
 14713  000540  518B               	movf	(printf@exp+1)& (0+255),w,b
 14714  000542  0100               	movlb	0	; () banked
 14715  000544  23E9               	addwfc	(??_printf+1)& (0+255),f,b
 14716  000546  0100               	movlb	0	; () banked
 14717  000548  51E8               	movf	??_printf& (0+255),w,b
 14718  00054A  0101               	movlb	1	; () banked
 14719  00054C  5F88               	subwf	printf@width& (0+255),f,b
 14720  00054E  0100               	movlb	0	; () banked
 14721  000550  51E9               	movf	(??_printf+1)& (0+255),w,b
 14722  000552  0101               	movlb	1	; () banked
 14723  000554  5B89               	subwfb	(printf@width+1)& (0+255),f,b
 14724                           
 14725                           ;doprnt.c: 1143: if(
 14726                           ;doprnt.c: 1147: prec)
 14727  000556  0101               	movlb	1	; () banked
 14728  000558  5182               	movf	printf@prec& (0+255),w,b
 14729  00055A  0101               	movlb	1	; () banked
 14730  00055C  1183               	iorwf	(printf@prec+1)& (0+255),w,b
 14731  00055E  B4D8               	btfsc	status,2,c
 14732  000560  D005               	goto	l9622
 14733                           
 14734                           ; BSR set to: 1
 14735                           ;doprnt.c: 1148: width--;
 14736  000562  0101               	movlb	1	; () banked
 14737  000564  0788               	decf	printf@width& (0+255),f,b
 14738  000566  A0D8               	btfss	status,0,c
 14739  000568  0789               	decf	(printf@width+1)& (0+255),f,b
 14740  00056A  D000               	goto	l9622
 14741  00056C                     l9622:
 14742                           
 14743                           ; BSR set to: 1
 14744                           ;doprnt.c: 1149: if(flag & 0x03)
 14745  00056C  0E03               	movlw	3
 14746  00056E  0101               	movlb	1	; () banked
 14747  000570  1590               	andwf	printf@flag& (0+255),w,b
 14748  000572  0100               	movlb	0	; () banked
 14749  000574  6FE8               	movwf	??_printf& (0+255),b
 14750  000576  0E00               	movlw	0
 14751  000578  0101               	movlb	1	; () banked
 14752  00057A  1591               	andwf	(printf@flag+1)& (0+255),w,b
 14753  00057C  0100               	movlb	0	; () banked
 14754  00057E  6FE9               	movwf	(??_printf+1)& (0+255),b
 14755  000580  0100               	movlb	0	; () banked
 14756  000582  51E8               	movf	??_printf& (0+255),w,b
 14757  000584  0100               	movlb	0	; () banked
 14758  000586  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 14759  000588  B4D8               	btfsc	status,2,c
 14760  00058A  D005               	goto	l9626
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;doprnt.c: 1150: width--;
 14764  00058C  0101               	movlb	1	; () banked
 14765  00058E  0788               	decf	printf@width& (0+255),f,b
 14766  000590  A0D8               	btfss	status,0,c
 14767  000592  0789               	decf	(printf@width+1)& (0+255),f,b
 14768  000594  D000               	goto	l9626
 14769  000596                     l9626:
 14770                           
 14771                           ;doprnt.c: 1153: if(flag & 0x04) {
 14772  000596  0101               	movlb	1	; () banked
 14773  000598  A590               	btfss	printf@flag& (0+255),2,b
 14774  00059A  D031               	goto	l9642
 14775                           
 14776                           ; BSR set to: 1
 14777                           ;doprnt.c: 1157: if(flag & 0x03)
 14778  00059C  0E03               	movlw	3
 14779  00059E  0101               	movlb	1	; () banked
 14780  0005A0  1590               	andwf	printf@flag& (0+255),w,b
 14781  0005A2  0100               	movlb	0	; () banked
 14782  0005A4  6FE8               	movwf	??_printf& (0+255),b
 14783  0005A6  0E00               	movlw	0
 14784  0005A8  0101               	movlb	1	; () banked
 14785  0005AA  1591               	andwf	(printf@flag+1)& (0+255),w,b
 14786  0005AC  0100               	movlb	0	; () banked
 14787  0005AE  6FE9               	movwf	(??_printf+1)& (0+255),b
 14788  0005B0  0100               	movlb	0	; () banked
 14789  0005B2  51E8               	movf	??_printf& (0+255),w,b
 14790  0005B4  0100               	movlb	0	; () banked
 14791  0005B6  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 14792  0005B8  B4D8               	btfsc	status,2,c
 14793  0005BA  D00C               	goto	l9636
 14794                           
 14795                           ; BSR set to: 0
 14796                           ;doprnt.c: 1159: (putch('-') );
 14797  0005BC  0E2D               	movlw	45
 14798  0005BE  ECC5  F028         	call	_putch
 14799                           
 14800                           ;doprnt.c: 1168: while(width > 0) {
 14801  0005C2  D008               	goto	l9636
 14802  0005C4                     l9632:
 14803                           
 14804                           ;doprnt.c: 1169: (putch('0') );
 14805  0005C4  0E30               	movlw	48
 14806  0005C6  ECC5  F028         	call	_putch
 14807                           
 14808                           ;doprnt.c: 1170: width--;
 14809  0005CA  0101               	movlb	1	; () banked
 14810  0005CC  0788               	decf	printf@width& (0+255),f,b
 14811  0005CE  A0D8               	btfss	status,0,c
 14812  0005D0  0789               	decf	(printf@width+1)& (0+255),f,b
 14813  0005D2  D000               	goto	l9636
 14814  0005D4                     l9636:
 14815  0005D4  0101               	movlb	1	; () banked
 14816  0005D6  BF89               	btfsc	(printf@width+1)& (0+255),7,b
 14817  0005D8  D077               	goto	l9654
 14818  0005DA  0101               	movlb	1	; () banked
 14819  0005DC  5189               	movf	(printf@width+1)& (0+255),w,b
 14820  0005DE  E1F2               	bnz	l9632
 14821  0005E0  0101               	movlb	1	; () banked
 14822  0005E2  0588               	decf	printf@width& (0+255),w,b
 14823  0005E4  A0D8               	btfss	status,0,c
 14824  0005E6  D070               	goto	l9654
 14825  0005E8  D7ED               	goto	l9632
 14826                           
 14827                           ; BSR set to: 1
 14828                           ;doprnt.c: 1171: }
 14829                           ;doprnt.c: 1173: } else
 14830  0005EA  D06E               	goto	l9654
 14831                           
 14832                           ; BSR set to: 1
 14833                           ;doprnt.c: 1175: {
 14834                           ;doprnt.c: 1180: while(width > 0) {
 14835  0005EC  D008               	goto	l9642
 14836  0005EE                     l9638:
 14837                           
 14838                           ; BSR set to: 1
 14839                           ;doprnt.c: 1181: (putch(' ') );
 14840  0005EE  0E20               	movlw	32
 14841  0005F0  ECC5  F028         	call	_putch
 14842                           
 14843                           ;doprnt.c: 1182: width--;
 14844  0005F4  0101               	movlb	1	; () banked
 14845  0005F6  0788               	decf	printf@width& (0+255),f,b
 14846  0005F8  A0D8               	btfss	status,0,c
 14847  0005FA  0789               	decf	(printf@width+1)& (0+255),f,b
 14848  0005FC  D000               	goto	l9642
 14849  0005FE                     l9642:
 14850                           
 14851                           ; BSR set to: 1
 14852  0005FE  0101               	movlb	1	; () banked
 14853  000600  BF89               	btfsc	(printf@width+1)& (0+255),7,b
 14854  000602  D007               	goto	l9644
 14855  000604  0101               	movlb	1	; () banked
 14856  000606  5189               	movf	(printf@width+1)& (0+255),w,b
 14857  000608  E1F2               	bnz	l9638
 14858  00060A  0101               	movlb	1	; () banked
 14859  00060C  0588               	decf	printf@width& (0+255),w,b
 14860  00060E  B0D8               	btfsc	status,0,c
 14861  000610  D7EE               	goto	l9638
 14862  000612                     l9644:
 14863                           
 14864                           ; BSR set to: 1
 14865                           ;doprnt.c: 1183: }
 14866                           ;doprnt.c: 1188: if(flag & 0x03)
 14867  000612  0E03               	movlw	3
 14868  000614  0101               	movlb	1	; () banked
 14869  000616  1590               	andwf	printf@flag& (0+255),w,b
 14870  000618  0100               	movlb	0	; () banked
 14871  00061A  6FE8               	movwf	??_printf& (0+255),b
 14872  00061C  0E00               	movlw	0
 14873  00061E  0101               	movlb	1	; () banked
 14874  000620  1591               	andwf	(printf@flag+1)& (0+255),w,b
 14875  000622  0100               	movlb	0	; () banked
 14876  000624  6FE9               	movwf	(??_printf+1)& (0+255),b
 14877  000626  0100               	movlb	0	; () banked
 14878  000628  51E8               	movf	??_printf& (0+255),w,b
 14879  00062A  0100               	movlb	0	; () banked
 14880  00062C  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 14881  00062E  B4D8               	btfsc	status,2,c
 14882  000630  D04B               	goto	l9654
 14883                           
 14884                           ; BSR set to: 0
 14885                           ;doprnt.c: 1190: (putch('-') );
 14886  000632  0E2D               	movlw	45
 14887  000634  ECC5  F028         	call	_putch
 14888                           
 14889                           ;doprnt.c: 1195: }
 14890                           ;doprnt.c: 1196: while(c--) {
 14891  000638  D047               	goto	l9654
 14892  00063A                     l9648:
 14893                           
 14894                           ;doprnt.c: 1200: {
 14895                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 14896  00063A  C18C  F011         	movff	printf@val,___lldiv@dividend
 14897  00063E  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 14898  000642  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 14899  000646  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 14900  00064A  0101               	movlb	1	; () banked
 14901  00064C  5195               	movf	printf@c& (0+255),w,b
 14902  00064E  0D04               	mullw	4
 14903  000650  0E12               	movlw	low _dpowers
 14904  000652  24F3               	addwf	prodl,w,c
 14905  000654  6EF6               	movwf	tblptrl,c
 14906  000656  0EFE               	movlw	high _dpowers
 14907  000658  20F4               	addwfc	prodh,w,c
 14908  00065A  6EF7               	movwf	tblptrh,c
 14909  00065C                     	if	0	;There are less than 3 active tblptr bytes
 14910  00065C                     	endif
 14911  00065C  0009               	tblrd		*+
 14912  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 14913  000662  0009               	tblrd		*+
 14914  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 14915  000668  0009               	tblrd		*+
 14916  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 14917  00066E  000A               	tblrd		*-
 14918  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 14919  000674  EC9F  F020         	call	___lldiv	;wreg free
 14920  000678  C011  F184         	movff	?___lldiv,printf@tmpval
 14921  00067C  C012  F185         	movff	?___lldiv+1,printf@tmpval+1
 14922  000680  C013  F186         	movff	?___lldiv+2,printf@tmpval+2
 14923  000684  C014  F187         	movff	?___lldiv+3,printf@tmpval+3
 14924                           
 14925                           ;doprnt.c: 1202: tmpval.vd %= 10;
 14926  000688  C184  F01E         	movff	printf@tmpval,___llmod@dividend
 14927  00068C  C185  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 14928  000690  C186  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 14929  000694  C187  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 14930  000698  0E0A               	movlw	10
 14931  00069A  6E22               	movwf	___llmod@divisor,c
 14932  00069C  0E00               	movlw	0
 14933  00069E  6E23               	movwf	___llmod@divisor+1,c
 14934  0006A0  0E00               	movlw	0
 14935  0006A2  6E24               	movwf	___llmod@divisor+2,c
 14936  0006A4  0E00               	movlw	0
 14937  0006A6  6E25               	movwf	___llmod@divisor+3,c
 14938  0006A8  EC24  F022         	call	___llmod	;wreg free
 14939  0006AC  C01E  F184         	movff	?___llmod,printf@tmpval
 14940  0006B0  C01F  F185         	movff	?___llmod+1,printf@tmpval+1
 14941  0006B4  C020  F186         	movff	?___llmod+2,printf@tmpval+2
 14942  0006B8  C021  F187         	movff	?___llmod+3,printf@tmpval+3
 14943                           
 14944                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 14945  0006BC  0101               	movlb	1	; () banked
 14946  0006BE  5184               	movf	printf@tmpval& (0+255),w,b
 14947  0006C0  0F30               	addlw	48
 14948  0006C2  ECC5  F028         	call	_putch
 14949  0006C6  D000               	goto	l9654
 14950  0006C8                     l9654:
 14951  0006C8  0101               	movlb	1	; () banked
 14952  0006CA  0795               	decf	printf@c& (0+255),f,b
 14953  0006CC  0101               	movlb	1	; () banked
 14954  0006CE  2995               	incf	printf@c& (0+255),w,b
 14955  0006D0  B4D8               	btfsc	status,2,c
 14956  0006D2  D00A               	goto	l9660
 14957  0006D4  D7B2               	goto	l9648
 14958                           
 14959                           ; BSR set to: 1
 14960                           ;doprnt.c: 1204: }
 14961                           ;doprnt.c: 1206: }
 14962                           ;doprnt.c: 1207: while(exp > 0) {
 14963  0006D6  D008               	goto	l9660
 14964  0006D8                     l9656:
 14965                           
 14966                           ; BSR set to: 1
 14967                           ;doprnt.c: 1208: (putch('0') );
 14968  0006D8  0E30               	movlw	48
 14969  0006DA  ECC5  F028         	call	_putch
 14970                           
 14971                           ;doprnt.c: 1209: exp--;
 14972  0006DE  0101               	movlb	1	; () banked
 14973  0006E0  078A               	decf	printf@exp& (0+255),f,b
 14974  0006E2  A0D8               	btfss	status,0,c
 14975  0006E4  078B               	decf	(printf@exp+1)& (0+255),f,b
 14976  0006E6  D000               	goto	l9660
 14977  0006E8                     l9660:
 14978                           
 14979                           ; BSR set to: 1
 14980  0006E8  0101               	movlb	1	; () banked
 14981  0006EA  BF8B               	btfsc	(printf@exp+1)& (0+255),7,b
 14982  0006EC  D007               	goto	l9662
 14983  0006EE  0101               	movlb	1	; () banked
 14984  0006F0  518B               	movf	(printf@exp+1)& (0+255),w,b
 14985  0006F2  E1F2               	bnz	l9656
 14986  0006F4  0101               	movlb	1	; () banked
 14987  0006F6  058A               	decf	printf@exp& (0+255),w,b
 14988  0006F8  B0D8               	btfsc	status,0,c
 14989  0006FA  D7EE               	goto	l9656
 14990  0006FC                     l9662:
 14991                           
 14992                           ; BSR set to: 1
 14993                           ;doprnt.c: 1210: }
 14994                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 14995  0006FC  0101               	movlb	1	; () banked
 14996  0006FE  BF83               	btfsc	(printf@prec+1)& (0+255),7,b
 14997  000700  D00C               	goto	l1485
 14998  000702  0101               	movlb	1	; () banked
 14999  000704  5183               	movf	(printf@prec+1)& (0+255),w,b
 15000  000706  E105               	bnz	u8190
 15001  000708  0E09               	movlw	9
 15002  00070A  0101               	movlb	1	; () banked
 15003  00070C  5D82               	subwf	printf@prec& (0+255),w,b
 15004  00070E  A0D8               	btfss	status,0,c
 15005  000710  D004               	goto	l1485
 15006  000712                     u8190:
 15007                           
 15008                           ; BSR set to: 1
 15009                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 15010  000712  0E08               	movlw	8
 15011  000714  0101               	movlb	1	; () banked
 15012  000716  6F95               	movwf	printf@c& (0+255),b
 15013  000718  D003               	goto	l9666
 15014  00071A                     l1485:
 15015                           
 15016                           ; BSR set to: 1
 15017                           ;doprnt.c: 1213: else
 15018                           ;doprnt.c: 1214: c = prec;
 15019  00071A  C182  F195         	movff	printf@prec,printf@c
 15020  00071E  D000               	goto	l9666
 15021  000720                     l9666:
 15022                           
 15023                           ; BSR set to: 1
 15024                           ;doprnt.c: 1215: prec -= c;
 15025  000720  0101               	movlb	1	; () banked
 15026  000722  5195               	movf	printf@c& (0+255),w,b
 15027  000724  0101               	movlb	1	; () banked
 15028  000726  5F82               	subwf	printf@prec& (0+255),f,b
 15029  000728  0E00               	movlw	0
 15030  00072A  0101               	movlb	1	; () banked
 15031  00072C  BF95               	btfsc	printf@c& (0+255),7,b
 15032  00072E  0EFF               	movlw	255
 15033  000730  0101               	movlb	1	; () banked
 15034  000732  5B83               	subwfb	(printf@prec+1)& (0+255),f,b
 15035                           
 15036                           ; BSR set to: 1
 15037                           ;doprnt.c: 1219: if(c)
 15038  000734  0101               	movlb	1	; () banked
 15039  000736  5195               	movf	printf@c& (0+255),w,b
 15040  000738  0101               	movlb	1	; () banked
 15041  00073A  B4D8               	btfsc	status,2,c
 15042  00073C  D004               	goto	l9672
 15043                           
 15044                           ; BSR set to: 1
 15045                           ;doprnt.c: 1221: (putch('.') );
 15046  00073E  0E2E               	movlw	46
 15047  000740  ECC5  F028         	call	_putch
 15048  000744  D000               	goto	l9672
 15049  000746                     l9672:
 15050                           
 15051                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15052  000746  0101               	movlb	1	; () banked
 15053  000748  5195               	movf	printf@c& (0+255),w,b
 15054  00074A  EC41  F009         	call	_scale
 15055  00074E  C043  F17C         	movff	?_scale,_printf$3341
 15056  000752  C044  F17D         	movff	?_scale+1,_printf$3341+1
 15057  000756  C045  F17E         	movff	?_scale+2,_printf$3341+2
 15058                           
 15059                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15060  00075A  C192  F022         	movff	printf@fval,___ftmul@f2
 15061  00075E  C193  F023         	movff	printf@fval+1,___ftmul@f2+1
 15062  000762  C194  F024         	movff	printf@fval+2,___ftmul@f2+2
 15063  000766  C17C  F01F         	movff	_printf$3341,___ftmul@f1
 15064  00076A  C17D  F020         	movff	_printf$3341+1,___ftmul@f1+1
 15065  00076E  C17E  F021         	movff	_printf$3341+2,___ftmul@f1+2
 15066  000772  EC8B  F017         	call	___ftmul	;wreg free
 15067  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 15068  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 15069  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 15070  000782  ECE3  F019         	call	___fttol	;wreg free
 15071  000786  C02E  F18C         	movff	?___fttol,printf@val
 15072  00078A  C02F  F18D         	movff	?___fttol+1,printf@val+1
 15073  00078E  C030  F18E         	movff	?___fttol+2,printf@val+2
 15074  000792  C031  F18F         	movff	?___fttol+3,printf@val+3
 15075                           
 15076                           ;doprnt.c: 1228: while(c--) {
 15077  000796  D06E               	goto	l9682
 15078  000798                     l9676:
 15079                           
 15080                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 15081  000798  C18C  F011         	movff	printf@val,___lldiv@dividend
 15082  00079C  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 15083  0007A0  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 15084  0007A4  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 15085  0007A8  0101               	movlb	1	; () banked
 15086  0007AA  5195               	movf	printf@c& (0+255),w,b
 15087  0007AC  0D04               	mullw	4
 15088  0007AE  0E12               	movlw	low _dpowers
 15089  0007B0  24F3               	addwf	prodl,w,c
 15090  0007B2  6EF6               	movwf	tblptrl,c
 15091  0007B4  0EFE               	movlw	high _dpowers
 15092  0007B6  20F4               	addwfc	prodh,w,c
 15093  0007B8  6EF7               	movwf	tblptrh,c
 15094  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 15095  0007BA                     	endif
 15096  0007BA  0009               	tblrd		*+
 15097  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 15098  0007C0  0009               	tblrd		*+
 15099  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15100  0007C6  0009               	tblrd		*+
 15101  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15102  0007CC  000A               	tblrd		*-
 15103  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15104  0007D2  EC9F  F020         	call	___lldiv	;wreg free
 15105  0007D6  C011  F184         	movff	?___lldiv,printf@tmpval
 15106  0007DA  C012  F185         	movff	?___lldiv+1,printf@tmpval+1
 15107  0007DE  C013  F186         	movff	?___lldiv+2,printf@tmpval+2
 15108  0007E2  C014  F187         	movff	?___lldiv+3,printf@tmpval+3
 15109                           
 15110                           ;doprnt.c: 1230: tmpval.vd %= 10;
 15111  0007E6  C184  F01E         	movff	printf@tmpval,___llmod@dividend
 15112  0007EA  C185  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 15113  0007EE  C186  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 15114  0007F2  C187  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 15115  0007F6  0E0A               	movlw	10
 15116  0007F8  6E22               	movwf	___llmod@divisor,c
 15117  0007FA  0E00               	movlw	0
 15118  0007FC  6E23               	movwf	___llmod@divisor+1,c
 15119  0007FE  0E00               	movlw	0
 15120  000800  6E24               	movwf	___llmod@divisor+2,c
 15121  000802  0E00               	movlw	0
 15122  000804  6E25               	movwf	___llmod@divisor+3,c
 15123  000806  EC24  F022         	call	___llmod	;wreg free
 15124  00080A  C01E  F184         	movff	?___llmod,printf@tmpval
 15125  00080E  C01F  F185         	movff	?___llmod+1,printf@tmpval+1
 15126  000812  C020  F186         	movff	?___llmod+2,printf@tmpval+2
 15127  000816  C021  F187         	movff	?___llmod+3,printf@tmpval+3
 15128                           
 15129                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 15130  00081A  0101               	movlb	1	; () banked
 15131  00081C  5184               	movf	printf@tmpval& (0+255),w,b
 15132  00081E  0F30               	addlw	48
 15133  000820  ECC5  F028         	call	_putch
 15134                           
 15135                           ;doprnt.c: 1232: val %= dpowers[c];
 15136  000824  C18C  F01E         	movff	printf@val,___llmod@dividend
 15137  000828  C18D  F01F         	movff	printf@val+1,___llmod@dividend+1
 15138  00082C  C18E  F020         	movff	printf@val+2,___llmod@dividend+2
 15139  000830  C18F  F021         	movff	printf@val+3,___llmod@dividend+3
 15140  000834  0101               	movlb	1	; () banked
 15141  000836  5195               	movf	printf@c& (0+255),w,b
 15142  000838  0D04               	mullw	4
 15143  00083A  0E12               	movlw	low _dpowers
 15144  00083C  24F3               	addwf	prodl,w,c
 15145  00083E  6EF6               	movwf	tblptrl,c
 15146  000840  0EFE               	movlw	high _dpowers
 15147  000842  20F4               	addwfc	prodh,w,c
 15148  000844  6EF7               	movwf	tblptrh,c
 15149  000846                     	if	0	;There are less than 3 active tblptr bytes
 15150  000846                     	endif
 15151  000846  0009               	tblrd		*+
 15152  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 15153  00084C  0009               	tblrd		*+
 15154  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 15155  000852  0009               	tblrd		*+
 15156  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 15157  000858  000A               	tblrd		*-
 15158  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 15159  00085E  EC24  F022         	call	___llmod	;wreg free
 15160  000862  C01E  F18C         	movff	?___llmod,printf@val
 15161  000866  C01F  F18D         	movff	?___llmod+1,printf@val+1
 15162  00086A  C020  F18E         	movff	?___llmod+2,printf@val+2
 15163  00086E  C021  F18F         	movff	?___llmod+3,printf@val+3
 15164  000872  D000               	goto	l9682
 15165  000874                     l9682:
 15166  000874  0101               	movlb	1	; () banked
 15167  000876  0795               	decf	printf@c& (0+255),f,b
 15168  000878  0101               	movlb	1	; () banked
 15169  00087A  2995               	incf	printf@c& (0+255),w,b
 15170  00087C  B4D8               	btfsc	status,2,c
 15171  00087E  D00A               	goto	l9688
 15172  000880  D78B               	goto	l9676
 15173                           
 15174                           ; BSR set to: 1
 15175                           ;doprnt.c: 1233: }
 15176                           ;doprnt.c: 1235: while(prec) {
 15177  000882  D008               	goto	l9688
 15178  000884                     l9684:
 15179                           
 15180                           ; BSR set to: 1
 15181                           ;doprnt.c: 1236: (putch('0') );
 15182  000884  0E30               	movlw	48
 15183  000886  ECC5  F028         	call	_putch
 15184                           
 15185                           ;doprnt.c: 1237: prec--;
 15186  00088A  0101               	movlb	1	; () banked
 15187  00088C  0782               	decf	printf@prec& (0+255),f,b
 15188  00088E  A0D8               	btfss	status,0,c
 15189  000890  0783               	decf	(printf@prec+1)& (0+255),f,b
 15190  000892  D000               	goto	l9688
 15191  000894                     l9688:
 15192                           
 15193                           ; BSR set to: 1
 15194  000894  0101               	movlb	1	; () banked
 15195  000896  5182               	movf	printf@prec& (0+255),w,b
 15196  000898  0101               	movlb	1	; () banked
 15197  00089A  1183               	iorwf	(printf@prec+1)& (0+255),w,b
 15198  00089C  B4D8               	btfsc	status,2,c
 15199  00089E  D1CE               	goto	l9786
 15200  0008A0  D7F1               	goto	l9684
 15201                           
 15202                           ; BSR set to: 1
 15203                           ;doprnt.c: 1238: }
 15204                           ;doprnt.c: 1245: continue;
 15205  0008A2  D1CC               	goto	l9786
 15206  0008A4                     l1446:
 15207                           
 15208                           ; BSR set to: 1
 15209                           ;doprnt.c: 1246: }
 15210                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15211  0008A4  0101               	movlb	1	; () banked
 15212  0008A6  BF90               	btfsc	printf@flag& (0+255),7,b
 15213  0008A8  D023               	goto	l9700
 15214                           
 15215                           ; BSR set to: 1
 15216                           ;doprnt.c: 1253: {
 15217                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 15218  0008AA  C180  FFD9         	movff	printf@ap,fsr2l
 15219  0008AE  C181  FFDA         	movff	printf@ap+1,fsr2h
 15220  0008B2  CFDE F18C          	movff	postinc2,printf@val
 15221  0008B6  CFDD F18D          	movff	postdec2,printf@val+1
 15222  0008BA  0101               	movlb	1	; () banked
 15223  0008BC  0E00               	movlw	0
 15224  0008BE  BF8D               	btfsc	(printf@val+1)& (0+255),7,b
 15225  0008C0  0EFF               	movlw	-1
 15226  0008C2  6F8E               	movwf	(printf@val+2)& (0+255),b
 15227  0008C4  6F8F               	movwf	(printf@val+3)& (0+255),b
 15228                           
 15229                           ; BSR set to: 1
 15230  0008C6  0E02               	movlw	2
 15231  0008C8  0101               	movlb	1	; () banked
 15232  0008CA  2780               	addwf	printf@ap& (0+255),f,b
 15233  0008CC  0E00               	movlw	0
 15234  0008CE  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 15235                           
 15236                           ; BSR set to: 1
 15237                           ;doprnt.c: 1261: if((long)val < 0) {
 15238  0008D0  0101               	movlb	1	; () banked
 15239  0008D2  AF8F               	btfss	(printf@val+3)& (0+255),7,b
 15240  0008D4  D078               	goto	l9734
 15241                           
 15242                           ; BSR set to: 1
 15243                           ;doprnt.c: 1262: flag |= 0x03;
 15244  0008D6  0E03               	movlw	3
 15245  0008D8  0101               	movlb	1	; () banked
 15246  0008DA  1390               	iorwf	printf@flag& (0+255),f,b
 15247                           
 15248                           ; BSR set to: 1
 15249                           ;doprnt.c: 1263: val = -val;
 15250  0008DC  0101               	movlb	1	; () banked
 15251  0008DE  1F8F               	comf	(printf@val+3)& (0+255),f,b
 15252  0008E0  1F8E               	comf	(printf@val+2)& (0+255),f,b
 15253  0008E2  1F8D               	comf	(printf@val+1)& (0+255),f,b
 15254  0008E4  6D8C               	negf	printf@val& (0+255),b
 15255  0008E6  0E00               	movlw	0
 15256  0008E8  238D               	addwfc	(printf@val+1)& (0+255),f,b
 15257  0008EA  238E               	addwfc	(printf@val+2)& (0+255),f,b
 15258  0008EC  238F               	addwfc	(printf@val+3)& (0+255),f,b
 15259                           
 15260                           ; BSR set to: 1
 15261                           ;doprnt.c: 1264: }
 15262                           ;doprnt.c: 1266: }
 15263  0008EE  D06B               	goto	l9734
 15264  0008F0                     l9700:
 15265                           
 15266                           ; BSR set to: 1
 15267                           ;doprnt.c: 1268: else
 15268                           ;doprnt.c: 1273: {
 15269                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15270  0008F0  C180  FFD9         	movff	printf@ap,fsr2l
 15271  0008F4  C181  FFDA         	movff	printf@ap+1,fsr2h
 15272  0008F8  CFDE F0E8          	movff	postinc2,??_printf
 15273  0008FC  CFDD F0E9          	movff	postdec2,??_printf+1
 15274  000900  C0E8  F18C         	movff	??_printf,printf@val
 15275  000904  C0E9  F18D         	movff	??_printf+1,printf@val+1
 15276  000908  0101               	movlb	1	; () banked
 15277  00090A  6B8E               	clrf	(printf@val+2)& (0+255),b
 15278  00090C  6B8F               	clrf	(printf@val+3)& (0+255),b
 15279                           
 15280                           ; BSR set to: 1
 15281  00090E  0E02               	movlw	2
 15282  000910  0101               	movlb	1	; () banked
 15283  000912  2780               	addwf	printf@ap& (0+255),f,b
 15284  000914  0E00               	movlw	0
 15285  000916  2381               	addwfc	(printf@ap+1)& (0+255),f,b
 15286                           
 15287                           ; BSR set to: 1
 15288                           ;doprnt.c: 1287: }
 15289                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 15290  000918  D056               	goto	l9734
 15291  00091A                     l9704:
 15292                           
 15293                           ; BSR set to: 1
 15294                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15295  00091A  0E01               	movlw	1
 15296  00091C  0101               	movlb	1	; () banked
 15297  00091E  6F95               	movwf	printf@c& (0+255),b
 15298  000920                     l9706:
 15299                           
 15300                           ; BSR set to: 1
 15301  000920  0E0A               	movlw	10
 15302  000922  0101               	movlb	1	; () banked
 15303  000924  1995               	xorwf	printf@c& (0+255),w,b
 15304  000926  B4D8               	btfsc	status,2,c
 15305  000928  D058               	goto	l9736
 15306  00092A  D001               	goto	l9710
 15307                           
 15308                           ; BSR set to: 1
 15309  00092C  D056               	goto	l9736
 15310  00092E                     l9710:
 15311                           
 15312                           ; BSR set to: 1
 15313                           ;doprnt.c: 1306: if(val < dpowers[c])
 15314  00092E  0101               	movlb	1	; () banked
 15315  000930  5195               	movf	printf@c& (0+255),w,b
 15316  000932  0D04               	mullw	4
 15317  000934  0E12               	movlw	low _dpowers
 15318  000936  24F3               	addwf	prodl,w,c
 15319  000938  6EF6               	movwf	tblptrl,c
 15320  00093A  0EFE               	movlw	high _dpowers
 15321  00093C  20F4               	addwfc	prodh,w,c
 15322  00093E  6EF7               	movwf	tblptrh,c
 15323  000940                     	if	0	;There are less than 3 active tblptr bytes
 15324  000940                     	endif
 15325  000940  0009               	tblrd		*+
 15326  000942  50F5               	movf	tablat,w,c
 15327  000944  0101               	movlb	1	; () banked
 15328  000946  5D8C               	subwf	printf@val& (0+255),w,b
 15329  000948  0009               	tblrd		*+
 15330  00094A  50F5               	movf	tablat,w,c
 15331  00094C  0101               	movlb	1	; () banked
 15332  00094E  598D               	subwfb	(printf@val+1)& (0+255),w,b
 15333  000950  0009               	tblrd		*+
 15334  000952  50F5               	movf	tablat,w,c
 15335  000954  0101               	movlb	1	; () banked
 15336  000956  598E               	subwfb	(printf@val+2)& (0+255),w,b
 15337  000958  0009               	tblrd		*+
 15338  00095A  50F5               	movf	tablat,w,c
 15339  00095C  0101               	movlb	1	; () banked
 15340  00095E  598F               	subwfb	(printf@val+3)& (0+255),w,b
 15341  000960  A0D8               	btfss	status,0,c
 15342  000962  D03B               	goto	l9736
 15343  000964  D001               	goto	l9714
 15344                           
 15345                           ; BSR set to: 1
 15346                           ;doprnt.c: 1307: break;
 15347  000966  D039               	goto	l9736
 15348  000968                     l9714:
 15349                           
 15350                           ; BSR set to: 1
 15351  000968  0101               	movlb	1	; () banked
 15352  00096A  2B95               	incf	printf@c& (0+255),f,b
 15353  00096C  D7D9               	goto	l9706
 15354                           
 15355                           ; BSR set to: 1
 15356                           ;doprnt.c: 1309: break;
 15357                           
 15358                           ; BSR set to: 1
 15359  00096E  D035               	goto	l9736
 15360  000970                     l9718:
 15361                           
 15362                           ; BSR set to: 1
 15363                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15364  000970  0E01               	movlw	1
 15365  000972  0101               	movlb	1	; () banked
 15366  000974  6F95               	movwf	printf@c& (0+255),b
 15367  000976                     l9720:
 15368                           
 15369                           ; BSR set to: 1
 15370  000976  0E08               	movlw	8
 15371  000978  0101               	movlb	1	; () banked
 15372  00097A  1995               	xorwf	printf@c& (0+255),w,b
 15373  00097C  B4D8               	btfsc	status,2,c
 15374  00097E  D02D               	goto	l9736
 15375  000980  D001               	goto	l9724
 15376                           
 15377                           ; BSR set to: 1
 15378  000982  D02B               	goto	l9736
 15379  000984                     l9724:
 15380                           
 15381                           ; BSR set to: 1
 15382                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15383  000984  0101               	movlb	1	; () banked
 15384  000986  5195               	movf	printf@c& (0+255),w,b
 15385  000988  0D04               	mullw	4
 15386  00098A  0E88               	movlw	low _hexpowers
 15387  00098C  24F3               	addwf	prodl,w,c
 15388  00098E  6EF6               	movwf	tblptrl,c
 15389  000990  0EFE               	movlw	high _hexpowers
 15390  000992  20F4               	addwfc	prodh,w,c
 15391  000994  6EF7               	movwf	tblptrh,c
 15392  000996                     	if	0	;There are less than 3 active tblptr bytes
 15393  000996                     	endif
 15394  000996  0009               	tblrd		*+
 15395  000998  50F5               	movf	tablat,w,c
 15396  00099A  0101               	movlb	1	; () banked
 15397  00099C  5D8C               	subwf	printf@val& (0+255),w,b
 15398  00099E  0009               	tblrd		*+
 15399  0009A0  50F5               	movf	tablat,w,c
 15400  0009A2  0101               	movlb	1	; () banked
 15401  0009A4  598D               	subwfb	(printf@val+1)& (0+255),w,b
 15402  0009A6  0009               	tblrd		*+
 15403  0009A8  50F5               	movf	tablat,w,c
 15404  0009AA  0101               	movlb	1	; () banked
 15405  0009AC  598E               	subwfb	(printf@val+2)& (0+255),w,b
 15406  0009AE  0009               	tblrd		*+
 15407  0009B0  50F5               	movf	tablat,w,c
 15408  0009B2  0101               	movlb	1	; () banked
 15409  0009B4  598F               	subwfb	(printf@val+3)& (0+255),w,b
 15410  0009B6  A0D8               	btfss	status,0,c
 15411  0009B8  D010               	goto	l9736
 15412  0009BA  D001               	goto	l9728
 15413                           
 15414                           ; BSR set to: 1
 15415                           ;doprnt.c: 1318: break;
 15416  0009BC  D00E               	goto	l9736
 15417  0009BE                     l9728:
 15418                           
 15419                           ; BSR set to: 1
 15420  0009BE  0101               	movlb	1	; () banked
 15421  0009C0  2B95               	incf	printf@c& (0+255),f,b
 15422  0009C2  D7D9               	goto	l9720
 15423                           
 15424                           ; BSR set to: 1
 15425                           ;doprnt.c: 1336: }
 15426                           
 15427                           ; BSR set to: 1
 15428                           ;doprnt.c: 1320: break;
 15429                           
 15430                           ; BSR set to: 1
 15431  0009C4  D00A               	goto	l9736
 15432  0009C6                     l9734:
 15433                           
 15434                           ; BSR set to: 1
 15435  0009C6  0101               	movlb	1	; () banked
 15436  0009C8  5190               	movf	printf@flag& (0+255),w,b
 15437  0009CA  0B80               	andlw	128
 15438                           
 15439                           ; Switch size 1, requested type "space"
 15440                           ; Number of cases is 2, Range of values is 0 to 128
 15441                           ; switch strategies available:
 15442                           ; Name         Instructions Cycles
 15443                           ; simple_byte            7     4 (average)
 15444                           ;	Chosen strategy is simple_byte
 15445  0009CC  0A00               	xorlw	0	; case 0
 15446  0009CE  B4D8               	btfsc	status,2,c
 15447  0009D0  D7A4               	goto	l9704
 15448  0009D2  0A80               	xorlw	128	; case 128
 15449  0009D4  B4D8               	btfsc	status,2,c
 15450  0009D6  D7CC               	goto	l9718
 15451  0009D8  D000               	goto	l9736
 15452  0009DA                     l9736:
 15453                           
 15454                           ; BSR set to: 1
 15455                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15456  0009DA  0101               	movlb	1	; () banked
 15457  0009DC  5188               	movf	printf@width& (0+255),w,b
 15458  0009DE  0101               	movlb	1	; () banked
 15459  0009E0  1189               	iorwf	(printf@width+1)& (0+255),w,b
 15460  0009E2  B4D8               	btfsc	status,2,c
 15461  0009E4  D015               	goto	l9742
 15462                           
 15463                           ; BSR set to: 1
 15464  0009E6  0E03               	movlw	3
 15465  0009E8  0101               	movlb	1	; () banked
 15466  0009EA  1590               	andwf	printf@flag& (0+255),w,b
 15467  0009EC  0100               	movlb	0	; () banked
 15468  0009EE  6FE8               	movwf	??_printf& (0+255),b
 15469  0009F0  0E00               	movlw	0
 15470  0009F2  0101               	movlb	1	; () banked
 15471  0009F4  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15472  0009F6  0100               	movlb	0	; () banked
 15473  0009F8  6FE9               	movwf	(??_printf+1)& (0+255),b
 15474  0009FA  0100               	movlb	0	; () banked
 15475  0009FC  51E8               	movf	??_printf& (0+255),w,b
 15476  0009FE  0100               	movlb	0	; () banked
 15477  000A00  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 15478  000A02  B4D8               	btfsc	status,2,c
 15479  000A04  D005               	goto	l9742
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;doprnt.c: 1346: width--;
 15483  000A06  0101               	movlb	1	; () banked
 15484  000A08  0788               	decf	printf@width& (0+255),f,b
 15485  000A0A  A0D8               	btfss	status,0,c
 15486  000A0C  0789               	decf	(printf@width+1)& (0+255),f,b
 15487  000A0E  D000               	goto	l9742
 15488  000A10                     l9742:
 15489                           
 15490                           ;doprnt.c: 1381: if(width > c)
 15491  000A10  0E80               	movlw	128
 15492  000A12  0101               	movlb	1	; () banked
 15493  000A14  BF95               	btfsc	printf@c& (0+255),7,b
 15494  000A16  0E7F               	movlw	127
 15495  000A18  0100               	movlb	0	; () banked
 15496  000A1A  6FE8               	movwf	??_printf& (0+255),b
 15497  000A1C  0101               	movlb	1	; () banked
 15498  000A1E  5188               	movf	printf@width& (0+255),w,b
 15499  000A20  0101               	movlb	1	; () banked
 15500  000A22  5D95               	subwf	printf@c& (0+255),w,b
 15501  000A24  0101               	movlb	1	; () banked
 15502  000A26  5189               	movf	(printf@width+1)& (0+255),w,b
 15503  000A28  0A80               	xorlw	128
 15504  000A2A  0100               	movlb	0	; () banked
 15505  000A2C  59E8               	subwfb	??_printf& (0+255),w,b
 15506  000A2E  B0D8               	btfsc	status,0,c
 15507  000A30  D00B               	goto	l9746
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;doprnt.c: 1382: width -= c;
 15511  000A32  0101               	movlb	1	; () banked
 15512  000A34  5195               	movf	printf@c& (0+255),w,b
 15513  000A36  0101               	movlb	1	; () banked
 15514  000A38  5F88               	subwf	printf@width& (0+255),f,b
 15515  000A3A  0E00               	movlw	0
 15516  000A3C  0101               	movlb	1	; () banked
 15517  000A3E  BF95               	btfsc	printf@c& (0+255),7,b
 15518  000A40  0EFF               	movlw	255
 15519  000A42  0101               	movlb	1	; () banked
 15520  000A44  5B89               	subwfb	(printf@width+1)& (0+255),f,b
 15521  000A46  D006               	goto	l9748
 15522  000A48                     l9746:
 15523                           
 15524                           ;doprnt.c: 1383: else
 15525                           ;doprnt.c: 1384: width = 0;
 15526  000A48  0E00               	movlw	0
 15527  000A4A  0101               	movlb	1	; () banked
 15528  000A4C  6F89               	movwf	(printf@width+1)& (0+255),b
 15529  000A4E  0E00               	movlw	0
 15530  000A50  6F88               	movwf	printf@width& (0+255),b
 15531  000A52  D000               	goto	l9748
 15532  000A54                     l9748:
 15533                           
 15534                           ; BSR set to: 1
 15535                           ;doprnt.c: 1387: if(flag & 0x04) {
 15536  000A54  0101               	movlb	1	; () banked
 15537  000A56  A590               	btfss	printf@flag& (0+255),2,b
 15538  000A58  D029               	goto	l9760
 15539                           
 15540                           ; BSR set to: 1
 15541                           ;doprnt.c: 1392: if(flag & 0x03)
 15542  000A5A  0E03               	movlw	3
 15543  000A5C  0101               	movlb	1	; () banked
 15544  000A5E  1590               	andwf	printf@flag& (0+255),w,b
 15545  000A60  0100               	movlb	0	; () banked
 15546  000A62  6FE8               	movwf	??_printf& (0+255),b
 15547  000A64  0E00               	movlw	0
 15548  000A66  0101               	movlb	1	; () banked
 15549  000A68  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15550  000A6A  0100               	movlb	0	; () banked
 15551  000A6C  6FE9               	movwf	(??_printf+1)& (0+255),b
 15552  000A6E  0100               	movlb	0	; () banked
 15553  000A70  51E8               	movf	??_printf& (0+255),w,b
 15554  000A72  0100               	movlb	0	; () banked
 15555  000A74  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 15556  000A76  B4D8               	btfsc	status,2,c
 15557  000A78  D004               	goto	l9754
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;doprnt.c: 1393: (putch('-') );
 15561  000A7A  0E2D               	movlw	45
 15562  000A7C  ECC5  F028         	call	_putch
 15563  000A80  D000               	goto	l9754
 15564  000A82                     l9754:
 15565                           
 15566                           ;doprnt.c: 1415: if(width)
 15567  000A82  0101               	movlb	1	; () banked
 15568  000A84  5188               	movf	printf@width& (0+255),w,b
 15569  000A86  0101               	movlb	1	; () banked
 15570  000A88  1189               	iorwf	(printf@width+1)& (0+255),w,b
 15571  000A8A  B4D8               	btfsc	status,2,c
 15572  000A8C  D038               	goto	l9770
 15573  000A8E                     l9756:
 15574                           
 15575                           ; BSR set to: 1
 15576                           ;doprnt.c: 1417: (putch('0') );
 15577  000A8E  0E30               	movlw	48
 15578  000A90  ECC5  F028         	call	_putch
 15579                           
 15580                           ;doprnt.c: 1418: while(--width);
 15581  000A94  0101               	movlb	1	; () banked
 15582  000A96  0788               	decf	printf@width& (0+255),f,b
 15583  000A98  A0D8               	btfss	status,0,c
 15584  000A9A  0789               	decf	(printf@width+1)& (0+255),f,b
 15585  000A9C  0101               	movlb	1	; () banked
 15586  000A9E  5188               	movf	printf@width& (0+255),w,b
 15587  000AA0  0101               	movlb	1	; () banked
 15588  000AA2  1189               	iorwf	(printf@width+1)& (0+255),w,b
 15589  000AA4  B4D8               	btfsc	status,2,c
 15590  000AA6  D02B               	goto	l9770
 15591  000AA8  D7F2               	goto	l9756
 15592                           
 15593                           ; BSR set to: 1
 15594                           ;doprnt.c: 1420: } else
 15595                           
 15596                           ; BSR set to: 1
 15597  000AAA  D029               	goto	l9770
 15598  000AAC                     l9760:
 15599                           
 15600                           ; BSR set to: 1
 15601                           ;doprnt.c: 1422: {
 15602                           ;doprnt.c: 1424: if(width
 15603                           ;doprnt.c: 1428: )
 15604  000AAC  0101               	movlb	1	; () banked
 15605  000AAE  5188               	movf	printf@width& (0+255),w,b
 15606  000AB0  0101               	movlb	1	; () banked
 15607  000AB2  1189               	iorwf	(printf@width+1)& (0+255),w,b
 15608  000AB4  B4D8               	btfsc	status,2,c
 15609  000AB6  D00F               	goto	l9766
 15610  000AB8                     l9762:
 15611                           
 15612                           ; BSR set to: 1
 15613                           ;doprnt.c: 1430: (putch(' ') );
 15614  000AB8  0E20               	movlw	32
 15615  000ABA  ECC5  F028         	call	_putch
 15616                           
 15617                           ;doprnt.c: 1431: while(--width);
 15618  000ABE  0101               	movlb	1	; () banked
 15619  000AC0  0788               	decf	printf@width& (0+255),f,b
 15620  000AC2  A0D8               	btfss	status,0,c
 15621  000AC4  0789               	decf	(printf@width+1)& (0+255),f,b
 15622  000AC6  0101               	movlb	1	; () banked
 15623  000AC8  5188               	movf	printf@width& (0+255),w,b
 15624  000ACA  0101               	movlb	1	; () banked
 15625  000ACC  1189               	iorwf	(printf@width+1)& (0+255),w,b
 15626  000ACE  B4D8               	btfsc	status,2,c
 15627  000AD0  D002               	goto	l9766
 15628  000AD2  D7F2               	goto	l9762
 15629                           
 15630                           ; BSR set to: 1
 15631  000AD4  D000               	goto	l9766
 15632  000AD6                     l9766:
 15633                           
 15634                           ; BSR set to: 1
 15635                           ;doprnt.c: 1438: if(flag & 0x03)
 15636  000AD6  0E03               	movlw	3
 15637  000AD8  0101               	movlb	1	; () banked
 15638  000ADA  1590               	andwf	printf@flag& (0+255),w,b
 15639  000ADC  0100               	movlb	0	; () banked
 15640  000ADE  6FE8               	movwf	??_printf& (0+255),b
 15641  000AE0  0E00               	movlw	0
 15642  000AE2  0101               	movlb	1	; () banked
 15643  000AE4  1591               	andwf	(printf@flag+1)& (0+255),w,b
 15644  000AE6  0100               	movlb	0	; () banked
 15645  000AE8  6FE9               	movwf	(??_printf+1)& (0+255),b
 15646  000AEA  0100               	movlb	0	; () banked
 15647  000AEC  51E8               	movf	??_printf& (0+255),w,b
 15648  000AEE  0100               	movlb	0	; () banked
 15649  000AF0  11E9               	iorwf	(??_printf+1)& (0+255),w,b
 15650  000AF2  B4D8               	btfsc	status,2,c
 15651  000AF4  D004               	goto	l9770
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;doprnt.c: 1439: (putch('-') );
 15655  000AF6  0E2D               	movlw	45
 15656  000AF8  ECC5  F028         	call	_putch
 15657  000AFC  D000               	goto	l9770
 15658  000AFE                     l9770:
 15659                           
 15660                           ;doprnt.c: 1469: }
 15661                           ;doprnt.c: 1472: prec = c;
 15662  000AFE  0101               	movlb	1	; () banked
 15663  000B00  5195               	movf	printf@c& (0+255),w,b
 15664  000B02  0101               	movlb	1	; () banked
 15665  000B04  6F82               	movwf	printf@prec& (0+255),b
 15666  000B06  6B83               	clrf	(printf@prec+1)& (0+255),b
 15667  000B08  BF82               	btfsc	printf@prec& (0+255),7,b
 15668  000B0A  0783               	decf	(printf@prec+1)& (0+255),f,b
 15669                           
 15670                           ;doprnt.c: 1474: while(prec--) {
 15671  000B0C  D08A               	goto	l9784
 15672                           
 15673                           ; BSR set to: 1
 15674                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15675  000B0E  D07A               	goto	l9780
 15676  000B10                     l9772:
 15677                           
 15678                           ; BSR set to: 1
 15679                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15680  000B10  C182  F0E8         	movff	printf@prec,??_printf
 15681  000B14  C183  F0E9         	movff	printf@prec+1,??_printf+1
 15682  000B18  0100               	movlb	0	; () banked
 15683  000B1A  90D8               	bcf	status,0,c
 15684  000B1C  37E8               	rlcf	??_printf& (0+255),f,b
 15685  000B1E  37E9               	rlcf	(??_printf+1)& (0+255),f,b
 15686  000B20  0100               	movlb	0	; () banked
 15687  000B22  90D8               	bcf	status,0,c
 15688  000B24  37E8               	rlcf	??_printf& (0+255),f,b
 15689  000B26  37E9               	rlcf	(??_printf+1)& (0+255),f,b
 15690  000B28  0E12               	movlw	low _dpowers
 15691  000B2A  0100               	movlb	0	; () banked
 15692  000B2C  25E8               	addwf	??_printf& (0+255),w,b
 15693  000B2E  6EF6               	movwf	tblptrl,c
 15694  000B30  0EFE               	movlw	high _dpowers
 15695  000B32  21E9               	addwfc	(??_printf+1)& (0+255),w,b
 15696  000B34  6EF7               	movwf	tblptrh,c
 15697  000B36                     	if	0	;There are less than 3 active tblptr bytes
 15698  000B36                     	endif
 15699  000B36  0009               	tblrd		*+
 15700  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 15701  000B3C  0009               	tblrd		*+
 15702  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15703  000B42  0009               	tblrd		*+
 15704  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15705  000B48  000A               	tblrd		*-
 15706  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15707  000B4E  C18C  F011         	movff	printf@val,___lldiv@dividend
 15708  000B52  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 15709  000B56  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 15710  000B5A  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 15711  000B5E  EC9F  F020         	call	___lldiv	;wreg free
 15712  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 15713  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 15714  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 15715  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 15716  000B72  0E0A               	movlw	10
 15717  000B74  6E22               	movwf	___llmod@divisor,c
 15718  000B76  0E00               	movlw	0
 15719  000B78  6E23               	movwf	___llmod@divisor+1,c
 15720  000B7A  0E00               	movlw	0
 15721  000B7C  6E24               	movwf	___llmod@divisor+2,c
 15722  000B7E  0E00               	movlw	0
 15723  000B80  6E25               	movwf	___llmod@divisor+3,c
 15724  000B82  EC24  F022         	call	___llmod	;wreg free
 15725  000B86  501E               	movf	?___llmod,w,c
 15726  000B88  0F30               	addlw	48
 15727  000B8A  0101               	movlb	1	; () banked
 15728  000B8C  6F95               	movwf	printf@c& (0+255),b
 15729                           
 15730                           ;doprnt.c: 1491: break;
 15731  000B8E  D044               	goto	l9782
 15732  000B90                     l9774:
 15733                           
 15734                           ; BSR set to: 1
 15735                           ;doprnt.c: 1499: {
 15736                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15737  000B90  C18C  F011         	movff	printf@val,___lldiv@dividend
 15738  000B94  C18D  F012         	movff	printf@val+1,___lldiv@dividend+1
 15739  000B98  C18E  F013         	movff	printf@val+2,___lldiv@dividend+2
 15740  000B9C  C18F  F014         	movff	printf@val+3,___lldiv@dividend+3
 15741  000BA0  C182  F0E8         	movff	printf@prec,??_printf
 15742  000BA4  C183  F0E9         	movff	printf@prec+1,??_printf+1
 15743  000BA8  0100               	movlb	0	; () banked
 15744  000BAA  90D8               	bcf	status,0,c
 15745  000BAC  37E8               	rlcf	??_printf& (0+255),f,b
 15746  000BAE  37E9               	rlcf	(??_printf+1)& (0+255),f,b
 15747  000BB0  0100               	movlb	0	; () banked
 15748  000BB2  90D8               	bcf	status,0,c
 15749  000BB4  37E8               	rlcf	??_printf& (0+255),f,b
 15750  000BB6  37E9               	rlcf	(??_printf+1)& (0+255),f,b
 15751  000BB8  0E88               	movlw	low _hexpowers
 15752  000BBA  0100               	movlb	0	; () banked
 15753  000BBC  25E8               	addwf	??_printf& (0+255),w,b
 15754  000BBE  6EF6               	movwf	tblptrl,c
 15755  000BC0  0EFE               	movlw	high _hexpowers
 15756  000BC2  21E9               	addwfc	(??_printf+1)& (0+255),w,b
 15757  000BC4  6EF7               	movwf	tblptrh,c
 15758  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 15759  000BC6                     	endif
 15760  000BC6  0009               	tblrd		*+
 15761  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 15762  000BCC  0009               	tblrd		*+
 15763  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 15764  000BD2  0009               	tblrd		*+
 15765  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 15766  000BD8  000A               	tblrd		*-
 15767  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 15768  000BDE  EC9F  F020         	call	___lldiv	;wreg free
 15769  000BE2  5011               	movf	?___lldiv,w,c
 15770  000BE4  0B0F               	andlw	15
 15771  000BE6  0101               	movlb	1	; () banked
 15772  000BE8  6F7F               	movwf	printf@idx& (0+255),b
 15773                           
 15774                           ; BSR set to: 1
 15775                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15776  000BEA  0101               	movlb	1	; () banked
 15777  000BEC  517F               	movf	printf@idx& (0+255),w,b
 15778  000BEE  0D01               	mullw	1
 15779  000BF0  0E42               	movlw	low STR_38
 15780  000BF2  24F3               	addwf	prodl,w,c
 15781  000BF4  6EF6               	movwf	tblptrl,c
 15782  000BF6  0EFF               	movlw	high STR_38
 15783  000BF8  20F4               	addwfc	prodh,w,c
 15784  000BFA  6EF7               	movwf	tblptrh,c
 15785  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 15786  000BFC                     	endif
 15787  000BFC  0008               	tblrd		*
 15788  000BFE  CFF5 F195          	movff	tablat,printf@c
 15789                           
 15790                           ; BSR set to: 1
 15791                           ;doprnt.c: 1523: }
 15792                           
 15793                           ;doprnt.c: 1508: }
 15794                           ;doprnt.c: 1510: break;
 15795  000C02  D00A               	goto	l9782
 15796  000C04                     l9780:
 15797                           
 15798                           ; BSR set to: 1
 15799  000C04  0101               	movlb	1	; () banked
 15800  000C06  5190               	movf	printf@flag& (0+255),w,b
 15801  000C08  0B80               	andlw	128
 15802                           
 15803                           ; Switch size 1, requested type "space"
 15804                           ; Number of cases is 2, Range of values is 0 to 128
 15805                           ; switch strategies available:
 15806                           ; Name         Instructions Cycles
 15807                           ; simple_byte            7     4 (average)
 15808                           ;	Chosen strategy is simple_byte
 15809  000C0A  0A00               	xorlw	0	; case 0
 15810  000C0C  B4D8               	btfsc	status,2,c
 15811  000C0E  D780               	goto	l9772
 15812  000C10  0A80               	xorlw	128	; case 128
 15813  000C12  B4D8               	btfsc	status,2,c
 15814  000C14  D7BD               	goto	l9774
 15815  000C16  D000               	goto	l9782
 15816  000C18                     l9782:
 15817                           
 15818                           ; BSR set to: 1
 15819                           ;doprnt.c: 1524: (putch(c) );
 15820  000C18  0101               	movlb	1	; () banked
 15821  000C1A  5195               	movf	printf@c& (0+255),w,b
 15822  000C1C  ECC5  F028         	call	_putch
 15823  000C20  D000               	goto	l9784
 15824  000C22                     l9784:
 15825  000C22  0101               	movlb	1	; () banked
 15826  000C24  0782               	decf	printf@prec& (0+255),f,b
 15827  000C26  A0D8               	btfss	status,0,c
 15828  000C28  0783               	decf	(printf@prec+1)& (0+255),f,b
 15829  000C2A  0101               	movlb	1	; () banked
 15830  000C2C  2982               	incf	printf@prec& (0+255),w,b
 15831  000C2E  E1EA               	bnz	l9780
 15832  000C30  0101               	movlb	1	; () banked
 15833  000C32  2983               	incf	(printf@prec+1)& (0+255),w,b
 15834  000C34  B4D8               	btfsc	status,2,c
 15835  000C36  D002               	goto	l9786
 15836  000C38  D7E5               	goto	l9780
 15837                           
 15838                           ; BSR set to: 1
 15839  000C3A  D000               	goto	l9786
 15840  000C3C                     l9786:
 15841  000C3C  C0DA  FFF6         	movff	printf@f,tblptrl
 15842  000C40  C0DB  FFF7         	movff	printf@f+1,tblptrh
 15843  000C44  0100               	movlb	0	; () banked
 15844  000C46  4BDA               	infsnz	printf@f& (0+255),f,b
 15845  000C48  2BDB               	incf	(printf@f+1)& (0+255),f,b
 15846  000C4A                     	if	0	;tblptru may be non-zero
 15847  000C4A                     	endif
 15848  000C4A                     	if	0	;tblptru may be non-zero
 15849  000C4A                     	endif
 15850  000C4A  0008               	tblrd		*
 15851  000C4C  CFF5 F195          	movff	tablat,printf@c
 15852  000C50  0101               	movlb	1	; () banked
 15853  000C52  5195               	movf	printf@c& (0+255),w,b
 15854  000C54  B4D8               	btfsc	status,2,c
 15855  000C56  D003               	goto	l1528
 15856  000C58  EF16  F000         	goto	l9500
 15857                           
 15858                           ; BSR set to: 1
 15859  000C5C  D000               	goto	l1528
 15860  000C5E                     l1528:
 15861  000C5E  0012               	return		;funcret
 15862  000C60                     __end_of_printf:
 15863                           	opt stack 0
 15864                           tblptru	equ	0xFF8
 15865                           tblptrh	equ	0xFF7
 15866                           tblptrl	equ	0xFF6
 15867                           tablat	equ	0xFF5
 15868                           prodh	equ	0xFF4
 15869                           prodl	equ	0xFF3
 15870                           intcon	equ	0xFF2
 15871                           intcon2	equ	0xFF1
 15872                           postinc0	equ	0xFEE
 15873                           wreg	equ	0xFE8
 15874                           postdec1	equ	0xFE5
 15875                           fsr1l	equ	0xFE1
 15876                           indf2	equ	0xFDF
 15877                           postinc2	equ	0xFDE
 15878                           postdec2	equ	0xFDD
 15879                           fsr2h	equ	0xFDA
 15880                           fsr2l	equ	0xFD9
 15881                           status	equ	0xFD8
 15882                           
 15883 ;; *************** function _scale *****************
 15884 ;; Defined at:
 15885 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15886 ;; Parameters:    Size  Location     Type
 15887 ;;  scl             1    wreg     char 
 15888 ;; Auto vars:     Size  Location     Type
 15889 ;;  scl             1   72[COMRAM] char 
 15890 ;; Return value:  Size  Location     Type
 15891 ;;                  3   66[COMRAM] char 
 15892 ;; Registers used:
 15893 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15894 ;; Tracked objects:
 15895 ;;		On entry : 0/0
 15896 ;;		On exit  : 0/0
 15897 ;;		Unchanged: 0/0
 15898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15899 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15900 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15902 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15903 ;;Total ram usage:        7 bytes
 15904 ;; Hardware stack levels used:    1
 15905 ;; Hardware stack levels required when called:    5
 15906 ;; This function calls:
 15907 ;;		___awdiv
 15908 ;;		___awmod
 15909 ;;		___ftmul
 15910 ;;		___wmul
 15911 ;; This function is called by:
 15912 ;;		_printf
 15913 ;; This function uses a non-reentrant model
 15914 ;;
 15915                           
 15916                           	psect	text75
 15917  001282                     __ptext75:
 15918                           	opt stack 0
 15919  001282                     _scale:
 15920                           	opt stack 24
 15921                           
 15922                           ;incstack = 0
 15923                           ;scale@scl stored from wreg
 15924  001282  6E49               	movwf	scale@scl,c
 15925                           
 15926                           ;doprnt.c: 428: if(scl < 0) {
 15927  001284  AE49               	btfss	scale@scl,7,c
 15928  001286  D0EF               	goto	l9222
 15929                           
 15930                           ;doprnt.c: 429: scl = -scl;
 15931  001288  6C49               	negf	scale@scl,c
 15932                           
 15933                           ;doprnt.c: 430: if(scl>=110)
 15934  00128A  5049               	movf	scale@scl,w,c
 15935  00128C  0A80               	xorlw	128
 15936  00128E  0F12               	addlw	-238
 15937  001290  A0D8               	btfss	status,0,c
 15938  001292  D08D               	goto	l9212
 15939                           
 15940                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 15941  001294  0E00               	movlw	0
 15942  001296  6E14               	movwf	___wmul@multiplicand+1,c
 15943  001298  0E03               	movlw	3
 15944  00129A  6E13               	movwf	___wmul@multiplicand,c
 15945  00129C  0E00               	movlw	0
 15946  00129E  6E1A               	movwf	___awdiv@divisor+1,c
 15947  0012A0  0E0A               	movlw	10
 15948  0012A2  6E19               	movwf	___awdiv@divisor,c
 15949  0012A4  0E00               	movlw	0
 15950  0012A6  6E40               	movwf	___awmod@divisor+1,c
 15951  0012A8  0E64               	movlw	100
 15952  0012AA  6E3F               	movwf	___awmod@divisor,c
 15953  0012AC  5049               	movf	scale@scl,w,c
 15954  0012AE  6E3D               	movwf	___awmod@dividend,c
 15955  0012B0  6A3E               	clrf	___awmod@dividend+1,c
 15956  0012B2  BE3D               	btfsc	___awmod@dividend,7,c
 15957  0012B4  063E               	decf	___awmod@dividend+1,f,c
 15958  0012B6  EC29  F021         	call	___awmod	;wreg free
 15959  0012BA  C03D  F017         	movff	?___awmod,___awdiv@dividend
 15960  0012BE  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 15961  0012C2  EC2D  F01F         	call	___awdiv	;wreg free
 15962  0012C6  0E09               	movlw	9
 15963  0012C8  2417               	addwf	?___awdiv,w,c
 15964  0012CA  6E11               	movwf	___wmul@multiplier,c
 15965  0012CC  0E00               	movlw	0
 15966  0012CE  2018               	addwfc	?___awdiv+1,w,c
 15967  0012D0  6E12               	movwf	___wmul@multiplier+1,c
 15968  0012D2  ECC4  F026         	call	___wmul	;wreg free
 15969  0012D6  0E3A               	movlw	low __npowers_
 15970  0012D8  2411               	addwf	?___wmul,w,c
 15971  0012DA  6EF6               	movwf	tblptrl,c
 15972  0012DC  0EFE               	movlw	high __npowers_
 15973  0012DE  2012               	addwfc	?___wmul+1,w,c
 15974  0012E0  6EF7               	movwf	tblptrh,c
 15975  0012E2                     	if	0	;There are less than 3 active tblptr bytes
 15976  0012E2                     	endif
 15977  0012E2  0009               	tblrd		*+
 15978  0012E4  CFF5 F022          	movff	tablat,___ftmul@f2
 15979  0012E8  0009               	tblrd		*+
 15980  0012EA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 15981  0012EE  000A               	tblrd		*-
 15982  0012F0  CFF5 F024          	movff	tablat,___ftmul@f2+2
 15983  0012F4  0E00               	movlw	0
 15984  0012F6  6E1A               	movwf	___awdiv@divisor+1,c
 15985  0012F8  0E64               	movlw	100
 15986  0012FA  6E19               	movwf	___awdiv@divisor,c
 15987  0012FC  5049               	movf	scale@scl,w,c
 15988  0012FE  6E17               	movwf	___awdiv@dividend,c
 15989  001300  6A18               	clrf	___awdiv@dividend+1,c
 15990  001302  BE17               	btfsc	___awdiv@dividend,7,c
 15991  001304  0618               	decf	___awdiv@dividend+1,f,c
 15992  001306  EC2D  F01F         	call	___awdiv	;wreg free
 15993  00130A  0E12               	movlw	18
 15994  00130C  2417               	addwf	?___awdiv,w,c
 15995  00130E  6E11               	movwf	___wmul@multiplier,c
 15996  001310  0E00               	movlw	0
 15997  001312  2018               	addwfc	?___awdiv+1,w,c
 15998  001314  6E12               	movwf	___wmul@multiplier+1,c
 15999  001316  0E00               	movlw	0
 16000  001318  6E14               	movwf	___wmul@multiplicand+1,c
 16001  00131A  0E03               	movlw	3
 16002  00131C  6E13               	movwf	___wmul@multiplicand,c
 16003  00131E  ECC4  F026         	call	___wmul	;wreg free
 16004  001322  0E3A               	movlw	low __npowers_
 16005  001324  2411               	addwf	?___wmul,w,c
 16006  001326  6EF6               	movwf	tblptrl,c
 16007  001328  0EFE               	movlw	high __npowers_
 16008  00132A  2012               	addwfc	?___wmul+1,w,c
 16009  00132C  6EF7               	movwf	tblptrh,c
 16010  00132E                     	if	0	;There are less than 3 active tblptr bytes
 16011  00132E                     	endif
 16012  00132E  0009               	tblrd		*+
 16013  001330  CFF5 F01F          	movff	tablat,___ftmul@f1
 16014  001334  0009               	tblrd		*+
 16015  001336  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16016  00133A  000A               	tblrd		*-
 16017  00133C  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16018  001340  EC8B  F017         	call	___ftmul	;wreg free
 16019  001344  C01F  F046         	movff	?___ftmul,_scale$3340
 16020  001348  C020  F047         	movff	?___ftmul+1,_scale$3340+1
 16021  00134C  C021  F048         	movff	?___ftmul+2,_scale$3340+2
 16022                           
 16023                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16024  001350  C046  F01F         	movff	_scale$3340,___ftmul@f1
 16025  001354  C047  F020         	movff	_scale$3340+1,___ftmul@f1+1
 16026  001358  C048  F021         	movff	_scale$3340+2,___ftmul@f1+2
 16027  00135C  0E00               	movlw	0
 16028  00135E  6E14               	movwf	___wmul@multiplicand+1,c
 16029  001360  0E03               	movlw	3
 16030  001362  6E13               	movwf	___wmul@multiplicand,c
 16031  001364  0E00               	movlw	0
 16032  001366  6E40               	movwf	___awmod@divisor+1,c
 16033  001368  0E0A               	movlw	10
 16034  00136A  6E3F               	movwf	___awmod@divisor,c
 16035  00136C  5049               	movf	scale@scl,w,c
 16036  00136E  6E3D               	movwf	___awmod@dividend,c
 16037  001370  6A3E               	clrf	___awmod@dividend+1,c
 16038  001372  BE3D               	btfsc	___awmod@dividend,7,c
 16039  001374  063E               	decf	___awmod@dividend+1,f,c
 16040  001376  EC29  F021         	call	___awmod	;wreg free
 16041  00137A  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16042  00137E  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16043  001382  ECC4  F026         	call	___wmul	;wreg free
 16044  001386  0E3A               	movlw	low __npowers_
 16045  001388  2411               	addwf	?___wmul,w,c
 16046  00138A  6EF6               	movwf	tblptrl,c
 16047  00138C  0EFE               	movlw	high __npowers_
 16048  00138E  2012               	addwfc	?___wmul+1,w,c
 16049  001390  6EF7               	movwf	tblptrh,c
 16050  001392                     	if	0	;There are less than 3 active tblptr bytes
 16051  001392                     	endif
 16052  001392  0009               	tblrd		*+
 16053  001394  CFF5 F022          	movff	tablat,___ftmul@f2
 16054  001398  0009               	tblrd		*+
 16055  00139A  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16056  00139E  000A               	tblrd		*-
 16057  0013A0  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16058  0013A4  EC8B  F017         	call	___ftmul	;wreg free
 16059  0013A8  D141               	goto	L17
 16060  0013AA  D15A               	goto	l1417
 16061  0013AC  D054               	goto	l9218
 16062  0013AE                     l9212:
 16063                           
 16064                           ;doprnt.c: 432: else if(scl > 10)
 16065  0013AE  5049               	movf	scale@scl,w,c
 16066  0013B0  0A80               	xorlw	128
 16067  0013B2  0F75               	addlw	-139
 16068  0013B4  A0D8               	btfss	status,0,c
 16069  0013B6  D04F               	goto	l9218
 16070                           
 16071                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 16072  0013B8  0E00               	movlw	0
 16073  0013BA  6E1A               	movwf	___awdiv@divisor+1,c
 16074  0013BC  0E0A               	movlw	10
 16075  0013BE  6E19               	movwf	___awdiv@divisor,c
 16076  0013C0  5049               	movf	scale@scl,w,c
 16077  0013C2  6E17               	movwf	___awdiv@dividend,c
 16078  0013C4  6A18               	clrf	___awdiv@dividend+1,c
 16079  0013C6  BE17               	btfsc	___awdiv@dividend,7,c
 16080  0013C8  0618               	decf	___awdiv@dividend+1,f,c
 16081  0013CA  EC2D  F01F         	call	___awdiv	;wreg free
 16082  0013CE  0E09               	movlw	9
 16083  0013D0  2417               	addwf	?___awdiv,w,c
 16084  0013D2  6E11               	movwf	___wmul@multiplier,c
 16085  0013D4  0E00               	movlw	0
 16086  0013D6  2018               	addwfc	?___awdiv+1,w,c
 16087  0013D8  6E12               	movwf	___wmul@multiplier+1,c
 16088  0013DA  0E00               	movlw	0
 16089  0013DC  6E14               	movwf	___wmul@multiplicand+1,c
 16090  0013DE  0E03               	movlw	3
 16091  0013E0  6E13               	movwf	___wmul@multiplicand,c
 16092  0013E2  ECC4  F026         	call	___wmul	;wreg free
 16093  0013E6  0E3A               	movlw	low __npowers_
 16094  0013E8  2411               	addwf	?___wmul,w,c
 16095  0013EA  6EF6               	movwf	tblptrl,c
 16096  0013EC  0EFE               	movlw	high __npowers_
 16097  0013EE  2012               	addwfc	?___wmul+1,w,c
 16098  0013F0  6EF7               	movwf	tblptrh,c
 16099  0013F2                     	if	0	;There are less than 3 active tblptr bytes
 16100  0013F2                     	endif
 16101  0013F2  0009               	tblrd		*+
 16102  0013F4  CFF5 F01F          	movff	tablat,___ftmul@f1
 16103  0013F8  0009               	tblrd		*+
 16104  0013FA  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16105  0013FE  000A               	tblrd		*-
 16106  001400  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16107  001404  0E00               	movlw	0
 16108  001406  6E14               	movwf	___wmul@multiplicand+1,c
 16109  001408  0E03               	movlw	3
 16110  00140A  6E13               	movwf	___wmul@multiplicand,c
 16111  00140C  0E00               	movlw	0
 16112  00140E  6E40               	movwf	___awmod@divisor+1,c
 16113  001410  0E0A               	movlw	10
 16114  001412  6E3F               	movwf	___awmod@divisor,c
 16115  001414  5049               	movf	scale@scl,w,c
 16116  001416  6E3D               	movwf	___awmod@dividend,c
 16117  001418  6A3E               	clrf	___awmod@dividend+1,c
 16118  00141A  BE3D               	btfsc	___awmod@dividend,7,c
 16119  00141C  063E               	decf	___awmod@dividend+1,f,c
 16120  00141E  EC29  F021         	call	___awmod	;wreg free
 16121  001422  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16122  001426  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16123  00142A  ECC4  F026         	call	___wmul	;wreg free
 16124  00142E  0E3A               	movlw	low __npowers_
 16125  001430  2411               	addwf	?___wmul,w,c
 16126  001432  6EF6               	movwf	tblptrl,c
 16127  001434  0EFE               	movlw	high __npowers_
 16128  001436  2012               	addwfc	?___wmul+1,w,c
 16129  001438  6EF7               	movwf	tblptrh,c
 16130  00143A                     	if	0	;There are less than 3 active tblptr bytes
 16131  00143A                     	endif
 16132  00143A  0009               	tblrd		*+
 16133  00143C  CFF5 F022          	movff	tablat,___ftmul@f2
 16134  001440  0009               	tblrd		*+
 16135  001442  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16136  001446  000A               	tblrd		*-
 16137  001448  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16138  00144C  EC8B  F017         	call	___ftmul	;wreg free
 16139  001450  D0ED               	goto	L17
 16140  001452  D106               	goto	l1417
 16141  001454  D000               	goto	l9218
 16142  001456                     l9218:
 16143                           
 16144                           ;doprnt.c: 434: return _npowers_[scl];
 16145  001456  5049               	movf	scale@scl,w,c
 16146  001458  0D03               	mullw	3
 16147  00145A  0E3A               	movlw	low __npowers_
 16148  00145C  24F3               	addwf	prodl,w,c
 16149  00145E  6EF6               	movwf	tblptrl,c
 16150  001460  0EFE               	movlw	high __npowers_
 16151  001462  D0F2               	goto	L16
 16152  001464  D0FD               	goto	l1417
 16153  001466                     l9222:
 16154                           
 16155                           ;doprnt.c: 435: }
 16156                           ;doprnt.c: 436: if(scl>=110)
 16157  001466  5049               	movf	scale@scl,w,c
 16158  001468  0A80               	xorlw	128
 16159  00146A  0F12               	addlw	-238
 16160  00146C  A0D8               	btfss	status,0,c
 16161  00146E  D08D               	goto	l9230
 16162                           
 16163                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16164  001470  0E00               	movlw	0
 16165  001472  6E14               	movwf	___wmul@multiplicand+1,c
 16166  001474  0E03               	movlw	3
 16167  001476  6E13               	movwf	___wmul@multiplicand,c
 16168  001478  0E00               	movlw	0
 16169  00147A  6E1A               	movwf	___awdiv@divisor+1,c
 16170  00147C  0E0A               	movlw	10
 16171  00147E  6E19               	movwf	___awdiv@divisor,c
 16172  001480  0E00               	movlw	0
 16173  001482  6E40               	movwf	___awmod@divisor+1,c
 16174  001484  0E64               	movlw	100
 16175  001486  6E3F               	movwf	___awmod@divisor,c
 16176  001488  5049               	movf	scale@scl,w,c
 16177  00148A  6E3D               	movwf	___awmod@dividend,c
 16178  00148C  6A3E               	clrf	___awmod@dividend+1,c
 16179  00148E  BE3D               	btfsc	___awmod@dividend,7,c
 16180  001490  063E               	decf	___awmod@dividend+1,f,c
 16181  001492  EC29  F021         	call	___awmod	;wreg free
 16182  001496  C03D  F017         	movff	?___awmod,___awdiv@dividend
 16183  00149A  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 16184  00149E  EC2D  F01F         	call	___awdiv	;wreg free
 16185  0014A2  0E09               	movlw	9
 16186  0014A4  2417               	addwf	?___awdiv,w,c
 16187  0014A6  6E11               	movwf	___wmul@multiplier,c
 16188  0014A8  0E00               	movlw	0
 16189  0014AA  2018               	addwfc	?___awdiv+1,w,c
 16190  0014AC  6E12               	movwf	___wmul@multiplier+1,c
 16191  0014AE  ECC4  F026         	call	___wmul	;wreg free
 16192  0014B2  0E61               	movlw	low __powers_
 16193  0014B4  2411               	addwf	?___wmul,w,c
 16194  0014B6  6EF6               	movwf	tblptrl,c
 16195  0014B8  0EFE               	movlw	high __powers_
 16196  0014BA  2012               	addwfc	?___wmul+1,w,c
 16197  0014BC  6EF7               	movwf	tblptrh,c
 16198  0014BE                     	if	0	;There are less than 3 active tblptr bytes
 16199  0014BE                     	endif
 16200  0014BE  0009               	tblrd		*+
 16201  0014C0  CFF5 F022          	movff	tablat,___ftmul@f2
 16202  0014C4  0009               	tblrd		*+
 16203  0014C6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16204  0014CA  000A               	tblrd		*-
 16205  0014CC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16206  0014D0  0E00               	movlw	0
 16207  0014D2  6E1A               	movwf	___awdiv@divisor+1,c
 16208  0014D4  0E64               	movlw	100
 16209  0014D6  6E19               	movwf	___awdiv@divisor,c
 16210  0014D8  5049               	movf	scale@scl,w,c
 16211  0014DA  6E17               	movwf	___awdiv@dividend,c
 16212  0014DC  6A18               	clrf	___awdiv@dividend+1,c
 16213  0014DE  BE17               	btfsc	___awdiv@dividend,7,c
 16214  0014E0  0618               	decf	___awdiv@dividend+1,f,c
 16215  0014E2  EC2D  F01F         	call	___awdiv	;wreg free
 16216  0014E6  0E12               	movlw	18
 16217  0014E8  2417               	addwf	?___awdiv,w,c
 16218  0014EA  6E11               	movwf	___wmul@multiplier,c
 16219  0014EC  0E00               	movlw	0
 16220  0014EE  2018               	addwfc	?___awdiv+1,w,c
 16221  0014F0  6E12               	movwf	___wmul@multiplier+1,c
 16222  0014F2  0E00               	movlw	0
 16223  0014F4  6E14               	movwf	___wmul@multiplicand+1,c
 16224  0014F6  0E03               	movlw	3
 16225  0014F8  6E13               	movwf	___wmul@multiplicand,c
 16226  0014FA  ECC4  F026         	call	___wmul	;wreg free
 16227  0014FE  0E61               	movlw	low __powers_
 16228  001500  2411               	addwf	?___wmul,w,c
 16229  001502  6EF6               	movwf	tblptrl,c
 16230  001504  0EFE               	movlw	high __powers_
 16231  001506  2012               	addwfc	?___wmul+1,w,c
 16232  001508  6EF7               	movwf	tblptrh,c
 16233  00150A                     	if	0	;There are less than 3 active tblptr bytes
 16234  00150A                     	endif
 16235  00150A  0009               	tblrd		*+
 16236  00150C  CFF5 F01F          	movff	tablat,___ftmul@f1
 16237  001510  0009               	tblrd		*+
 16238  001512  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16239  001516  000A               	tblrd		*-
 16240  001518  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16241  00151C  EC8B  F017         	call	___ftmul	;wreg free
 16242  001520  C01F  F046         	movff	?___ftmul,_scale$3340
 16243  001524  C020  F047         	movff	?___ftmul+1,_scale$3340+1
 16244  001528  C021  F048         	movff	?___ftmul+2,_scale$3340+2
 16245                           
 16246                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16247  00152C  C046  F01F         	movff	_scale$3340,___ftmul@f1
 16248  001530  C047  F020         	movff	_scale$3340+1,___ftmul@f1+1
 16249  001534  C048  F021         	movff	_scale$3340+2,___ftmul@f1+2
 16250  001538  0E00               	movlw	0
 16251  00153A  6E14               	movwf	___wmul@multiplicand+1,c
 16252  00153C  0E03               	movlw	3
 16253  00153E  6E13               	movwf	___wmul@multiplicand,c
 16254  001540  0E00               	movlw	0
 16255  001542  6E40               	movwf	___awmod@divisor+1,c
 16256  001544  0E0A               	movlw	10
 16257  001546  6E3F               	movwf	___awmod@divisor,c
 16258  001548  5049               	movf	scale@scl,w,c
 16259  00154A  6E3D               	movwf	___awmod@dividend,c
 16260  00154C  6A3E               	clrf	___awmod@dividend+1,c
 16261  00154E  BE3D               	btfsc	___awmod@dividend,7,c
 16262  001550  063E               	decf	___awmod@dividend+1,f,c
 16263  001552  EC29  F021         	call	___awmod	;wreg free
 16264  001556  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16265  00155A  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16266  00155E  ECC4  F026         	call	___wmul	;wreg free
 16267  001562  0E61               	movlw	low __powers_
 16268  001564  2411               	addwf	?___wmul,w,c
 16269  001566  6EF6               	movwf	tblptrl,c
 16270  001568  0EFE               	movlw	high __powers_
 16271  00156A  2012               	addwfc	?___wmul+1,w,c
 16272  00156C  6EF7               	movwf	tblptrh,c
 16273  00156E                     	if	0	;There are less than 3 active tblptr bytes
 16274  00156E                     	endif
 16275  00156E  0009               	tblrd		*+
 16276  001570  CFF5 F022          	movff	tablat,___ftmul@f2
 16277  001574  0009               	tblrd		*+
 16278  001576  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16279  00157A  000A               	tblrd		*-
 16280  00157C  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16281  001580  EC8B  F017         	call	___ftmul	;wreg free
 16282  001584  D053               	goto	L17
 16283  001586  D06C               	goto	l1417
 16284  001588  D059               	goto	l9236
 16285  00158A                     l9230:
 16286                           
 16287                           ;doprnt.c: 438: else if(scl > 10)
 16288  00158A  5049               	movf	scale@scl,w,c
 16289  00158C  0A80               	xorlw	128
 16290  00158E  0F75               	addlw	-139
 16291  001590  A0D8               	btfss	status,0,c
 16292  001592  D054               	goto	l9236
 16293                           
 16294                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 16295  001594  0E00               	movlw	0
 16296  001596  6E1A               	movwf	___awdiv@divisor+1,c
 16297  001598  0E0A               	movlw	10
 16298  00159A  6E19               	movwf	___awdiv@divisor,c
 16299  00159C  5049               	movf	scale@scl,w,c
 16300  00159E  6E17               	movwf	___awdiv@dividend,c
 16301  0015A0  6A18               	clrf	___awdiv@dividend+1,c
 16302  0015A2  BE17               	btfsc	___awdiv@dividend,7,c
 16303  0015A4  0618               	decf	___awdiv@dividend+1,f,c
 16304  0015A6  EC2D  F01F         	call	___awdiv	;wreg free
 16305  0015AA  0E09               	movlw	9
 16306  0015AC  2417               	addwf	?___awdiv,w,c
 16307  0015AE  6E11               	movwf	___wmul@multiplier,c
 16308  0015B0  0E00               	movlw	0
 16309  0015B2  2018               	addwfc	?___awdiv+1,w,c
 16310  0015B4  6E12               	movwf	___wmul@multiplier+1,c
 16311  0015B6  0E00               	movlw	0
 16312  0015B8  6E14               	movwf	___wmul@multiplicand+1,c
 16313  0015BA  0E03               	movlw	3
 16314  0015BC  6E13               	movwf	___wmul@multiplicand,c
 16315  0015BE  ECC4  F026         	call	___wmul	;wreg free
 16316  0015C2  0E61               	movlw	low __powers_
 16317  0015C4  2411               	addwf	?___wmul,w,c
 16318  0015C6  6EF6               	movwf	tblptrl,c
 16319  0015C8  0EFE               	movlw	high __powers_
 16320  0015CA  2012               	addwfc	?___wmul+1,w,c
 16321  0015CC  6EF7               	movwf	tblptrh,c
 16322  0015CE                     	if	0	;There are less than 3 active tblptr bytes
 16323  0015CE                     	endif
 16324  0015CE  0009               	tblrd		*+
 16325  0015D0  CFF5 F01F          	movff	tablat,___ftmul@f1
 16326  0015D4  0009               	tblrd		*+
 16327  0015D6  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16328  0015DA  000A               	tblrd		*-
 16329  0015DC  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16330  0015E0  0E00               	movlw	0
 16331  0015E2  6E14               	movwf	___wmul@multiplicand+1,c
 16332  0015E4  0E03               	movlw	3
 16333  0015E6  6E13               	movwf	___wmul@multiplicand,c
 16334  0015E8  0E00               	movlw	0
 16335  0015EA  6E40               	movwf	___awmod@divisor+1,c
 16336  0015EC  0E0A               	movlw	10
 16337  0015EE  6E3F               	movwf	___awmod@divisor,c
 16338  0015F0  5049               	movf	scale@scl,w,c
 16339  0015F2  6E3D               	movwf	___awmod@dividend,c
 16340  0015F4  6A3E               	clrf	___awmod@dividend+1,c
 16341  0015F6  BE3D               	btfsc	___awmod@dividend,7,c
 16342  0015F8  063E               	decf	___awmod@dividend+1,f,c
 16343  0015FA  EC29  F021         	call	___awmod	;wreg free
 16344  0015FE  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16345  001602  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16346  001606  ECC4  F026         	call	___wmul	;wreg free
 16347  00160A  0E61               	movlw	low __powers_
 16348  00160C  2411               	addwf	?___wmul,w,c
 16349  00160E  6EF6               	movwf	tblptrl,c
 16350  001610  0EFE               	movlw	high __powers_
 16351  001612  2012               	addwfc	?___wmul+1,w,c
 16352  001614  6EF7               	movwf	tblptrh,c
 16353  001616                     	if	0	;There are less than 3 active tblptr bytes
 16354  001616                     	endif
 16355  001616  0009               	tblrd		*+
 16356  001618  CFF5 F022          	movff	tablat,___ftmul@f2
 16357  00161C  0009               	tblrd		*+
 16358  00161E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16359  001622  000A               	tblrd		*-
 16360  001624  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16361  001628  EC8B  F017         	call	___ftmul	;wreg free
 16362  00162C                     L17:
 16363  00162C  C01F  F043         	movff	?___ftmul,?_scale
 16364  001630  C020  F044         	movff	?___ftmul+1,?_scale+1
 16365  001634  C021  F045         	movff	?___ftmul+2,?_scale+2
 16366  001638  D013               	goto	l1417
 16367  00163A  D000               	goto	l9236
 16368  00163C                     l9236:
 16369                           
 16370                           ;doprnt.c: 440: return _powers_[scl];
 16371  00163C  5049               	movf	scale@scl,w,c
 16372  00163E  0D03               	mullw	3
 16373  001640  0E61               	movlw	low __powers_
 16374  001642  24F3               	addwf	prodl,w,c
 16375  001644  6EF6               	movwf	tblptrl,c
 16376  001646  0EFE               	movlw	high __powers_
 16377  001648                     L16:
 16378  001648  20F4               	addwfc	prodh,w,c
 16379  00164A  6EF7               	movwf	tblptrh,c
 16380  00164C                     	if	0	;There are less than 3 active tblptr bytes
 16381  00164C                     	endif
 16382  00164C  0009               	tblrd		*+
 16383  00164E  CFF5 F043          	movff	tablat,?_scale
 16384  001652  0009               	tblrd		*+
 16385  001654  CFF5 F044          	movff	tablat,?_scale+1
 16386  001658  000A               	tblrd		*-
 16387  00165A  CFF5 F045          	movff	tablat,?_scale+2
 16388  00165E  D000               	goto	l1417
 16389  001660                     l1417:
 16390  001660  0012               	return		;funcret
 16391  001662                     __end_of_scale:
 16392                           	opt stack 0
 16393                           tblptru	equ	0xFF8
 16394                           tblptrh	equ	0xFF7
 16395                           tblptrl	equ	0xFF6
 16396                           tablat	equ	0xFF5
 16397                           prodh	equ	0xFF4
 16398                           prodl	equ	0xFF3
 16399                           intcon	equ	0xFF2
 16400                           intcon2	equ	0xFF1
 16401                           postinc0	equ	0xFEE
 16402                           wreg	equ	0xFE8
 16403                           postdec1	equ	0xFE5
 16404                           fsr1l	equ	0xFE1
 16405                           indf2	equ	0xFDF
 16406                           postinc2	equ	0xFDE
 16407                           postdec2	equ	0xFDD
 16408                           fsr2h	equ	0xFDA
 16409                           fsr2l	equ	0xFD9
 16410                           status	equ	0xFD8
 16411                           
 16412 ;; *************** function _putch *****************
 16413 ;; Defined at:
 16414 ;;		line 79 in file "Main.c"
 16415 ;; Parameters:    Size  Location     Type
 16416 ;;  c               1    wreg     unsigned char 
 16417 ;; Auto vars:     Size  Location     Type
 16418 ;;  c               1   16[COMRAM] unsigned char 
 16419 ;; Return value:  Size  Location     Type
 16420 ;;		None               void
 16421 ;; Registers used:
 16422 ;;		wreg
 16423 ;; Tracked objects:
 16424 ;;		On entry : 0/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16432 ;;Total ram usage:        1 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    3
 16435 ;; This function calls:
 16436 ;;		Nothing
 16437 ;; This function is called by:
 16438 ;;		_printf
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           	psect	text76
 16443  00518A                     __ptext76:
 16444                           	opt stack 0
 16445  00518A                     _putch:
 16446                           	opt stack 26
 16447                           
 16448                           ;incstack = 0
 16449                           ;putch@c stored from wreg
 16450  00518A  6E11               	movwf	putch@c,c
 16451                           
 16452                           ;Main.c: 81: while (!TRMT);
 16453  00518C  D000               	goto	l515
 16454  00518E                     l515:
 16455  00518E  A2AC               	btfss	4012,1,c	;volatile
 16456  005190  D7FE               	goto	l515
 16457                           
 16458                           ;Main.c: 82: TXREG = c;
 16459  005192  C011  FFAD         	movff	putch@c,4013	;volatile
 16460  005196  0012               	return		;funcret
 16461  005198                     __end_of_putch:
 16462                           	opt stack 0
 16463                           tblptru	equ	0xFF8
 16464                           tblptrh	equ	0xFF7
 16465                           tblptrl	equ	0xFF6
 16466                           tablat	equ	0xFF5
 16467                           prodh	equ	0xFF4
 16468                           prodl	equ	0xFF3
 16469                           intcon	equ	0xFF2
 16470                           intcon2	equ	0xFF1
 16471                           postinc0	equ	0xFEE
 16472                           wreg	equ	0xFE8
 16473                           postdec1	equ	0xFE5
 16474                           fsr1l	equ	0xFE1
 16475                           indf2	equ	0xFDF
 16476                           postinc2	equ	0xFDE
 16477                           postdec2	equ	0xFDD
 16478                           fsr2h	equ	0xFDA
 16479                           fsr2l	equ	0xFD9
 16480                           status	equ	0xFD8
 16481                           
 16482 ;; *************** function _isdigit *****************
 16483 ;; Defined at:
 16484 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 16485 ;; Parameters:    Size  Location     Type
 16486 ;;  c               1    wreg     unsigned char 
 16487 ;; Auto vars:     Size  Location     Type
 16488 ;;  c               1   18[COMRAM] unsigned char 
 16489 ;; Return value:  Size  Location     Type
 16490 ;;		None               void
 16491 ;; Registers used:
 16492 ;;		wreg, status,2, status,0
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16502 ;;Total ram usage:        3 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    3
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_printf
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512                           	psect	text77
 16513  004E68                     __ptext77:
 16514                           	opt stack 0
 16515  004E68                     _isdigit:
 16516                           	opt stack 26
 16517                           
 16518                           ;incstack = 0
 16519                           ;isdigit@c stored from wreg
 16520  004E68  6E13               	movwf	isdigit@c,c
 16521  004E6A  0E00               	movlw	0
 16522  004E6C  6E12               	movwf	_isdigit$2987,c
 16523  004E6E  0E3A               	movlw	58
 16524  004E70  6013               	cpfslt	isdigit@c,c
 16525  004E72  D006               	goto	l9248
 16526  004E74  0E2F               	movlw	47
 16527  004E76  6413               	cpfsgt	isdigit@c,c
 16528  004E78  D003               	goto	l9248
 16529  004E7A  0E01               	movlw	1
 16530  004E7C  6E12               	movwf	_isdigit$2987,c
 16531  004E7E  D000               	goto	l9248
 16532  004E80                     l9248:
 16533  004E80  C012  F011         	movff	_isdigit$2987,??_isdigit
 16534  004E84  3011               	rrcf	??_isdigit,w,c
 16535  004E86  D000               	goto	l2029
 16536  004E88                     l2029:
 16537  004E88  0012               	return		;funcret
 16538  004E8A                     __end_of_isdigit:
 16539                           	opt stack 0
 16540                           tblptru	equ	0xFF8
 16541                           tblptrh	equ	0xFF7
 16542                           tblptrl	equ	0xFF6
 16543                           tablat	equ	0xFF5
 16544                           prodh	equ	0xFF4
 16545                           prodl	equ	0xFF3
 16546                           intcon	equ	0xFF2
 16547                           intcon2	equ	0xFF1
 16548                           postinc0	equ	0xFEE
 16549                           wreg	equ	0xFE8
 16550                           postdec1	equ	0xFE5
 16551                           fsr1l	equ	0xFE1
 16552                           indf2	equ	0xFDF
 16553                           postinc2	equ	0xFDE
 16554                           postdec2	equ	0xFDD
 16555                           fsr2h	equ	0xFDA
 16556                           fsr2l	equ	0xFD9
 16557                           status	equ	0xFD8
 16558                           
 16559 ;; *************** function _fround *****************
 16560 ;; Defined at:
 16561 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 16562 ;; Parameters:    Size  Location     Type
 16563 ;;  prec            1    wreg     unsigned char 
 16564 ;; Auto vars:     Size  Location     Type
 16565 ;;  prec            1   75[COMRAM] unsigned char 
 16566 ;; Return value:  Size  Location     Type
 16567 ;;                  3   66[COMRAM] unsigned char 
 16568 ;; Registers used:
 16569 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16570 ;; Tracked objects:
 16571 ;;		On entry : 0/0
 16572 ;;		On exit  : 0/0
 16573 ;;		Unchanged: 0/0
 16574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16575 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16579 ;;Total ram usage:       10 bytes
 16580 ;; Hardware stack levels used:    1
 16581 ;; Hardware stack levels required when called:    5
 16582 ;; This function calls:
 16583 ;;		___awdiv
 16584 ;;		___awmod
 16585 ;;		___ftmul
 16586 ;;		___wmul
 16587 ;; This function is called by:
 16588 ;;		_printf
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           	psect	text78
 16593  001C38                     __ptext78:
 16594                           	opt stack 0
 16595  001C38                     _fround:
 16596                           	opt stack 24
 16597                           
 16598                           ;incstack = 0
 16599                           ;fround@prec stored from wreg
 16600  001C38  6E4C               	movwf	fround@prec,c
 16601                           
 16602                           ;doprnt.c: 413: if(prec>=110)
 16603  001C3A  0E6D               	movlw	109
 16604  001C3C  644C               	cpfsgt	fround@prec,c
 16605  001C3E  D09B               	goto	l9190
 16606                           
 16607                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16608  001C40  0E00               	movlw	0
 16609  001C42  6E14               	movwf	___wmul@multiplicand+1,c
 16610  001C44  0E03               	movlw	3
 16611  001C46  6E13               	movwf	___wmul@multiplicand,c
 16612  001C48  0E00               	movlw	0
 16613  001C4A  6E1A               	movwf	___awdiv@divisor+1,c
 16614  001C4C  0E0A               	movlw	10
 16615  001C4E  6E19               	movwf	___awdiv@divisor,c
 16616  001C50  0E00               	movlw	0
 16617  001C52  6E40               	movwf	___awmod@divisor+1,c
 16618  001C54  0E64               	movlw	100
 16619  001C56  6E3F               	movwf	___awmod@divisor,c
 16620  001C58  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16621  001C5C  6A3E               	clrf	___awmod@dividend+1,c
 16622  001C5E  EC29  F021         	call	___awmod	;wreg free
 16623  001C62  C03D  F017         	movff	?___awmod,___awdiv@dividend
 16624  001C66  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 16625  001C6A  EC2D  F01F         	call	___awdiv	;wreg free
 16626  001C6E  0E09               	movlw	9
 16627  001C70  2417               	addwf	?___awdiv,w,c
 16628  001C72  6E11               	movwf	___wmul@multiplier,c
 16629  001C74  0E00               	movlw	0
 16630  001C76  2018               	addwfc	?___awdiv+1,w,c
 16631  001C78  6E12               	movwf	___wmul@multiplier+1,c
 16632  001C7A  ECC4  F026         	call	___wmul	;wreg free
 16633  001C7E  0E3A               	movlw	low __npowers_
 16634  001C80  2411               	addwf	?___wmul,w,c
 16635  001C82  6EF6               	movwf	tblptrl,c
 16636  001C84  0EFE               	movlw	high __npowers_
 16637  001C86  2012               	addwfc	?___wmul+1,w,c
 16638  001C88  6EF7               	movwf	tblptrh,c
 16639  001C8A                     	if	0	;There are less than 3 active tblptr bytes
 16640  001C8A                     	endif
 16641  001C8A  0009               	tblrd		*+
 16642  001C8C  CFF5 F022          	movff	tablat,___ftmul@f2
 16643  001C90  0009               	tblrd		*+
 16644  001C92  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16645  001C96  000A               	tblrd		*-
 16646  001C98  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16647  001C9C  0E00               	movlw	0
 16648  001C9E  6E1A               	movwf	___awdiv@divisor+1,c
 16649  001CA0  0E64               	movlw	100
 16650  001CA2  6E19               	movwf	___awdiv@divisor,c
 16651  001CA4  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16652  001CA8  6A18               	clrf	___awdiv@dividend+1,c
 16653  001CAA  EC2D  F01F         	call	___awdiv	;wreg free
 16654  001CAE  0E12               	movlw	18
 16655  001CB0  2417               	addwf	?___awdiv,w,c
 16656  001CB2  6E11               	movwf	___wmul@multiplier,c
 16657  001CB4  0E00               	movlw	0
 16658  001CB6  2018               	addwfc	?___awdiv+1,w,c
 16659  001CB8  6E12               	movwf	___wmul@multiplier+1,c
 16660  001CBA  0E00               	movlw	0
 16661  001CBC  6E14               	movwf	___wmul@multiplicand+1,c
 16662  001CBE  0E03               	movlw	3
 16663  001CC0  6E13               	movwf	___wmul@multiplicand,c
 16664  001CC2  ECC4  F026         	call	___wmul	;wreg free
 16665  001CC6  0E3A               	movlw	low __npowers_
 16666  001CC8  2411               	addwf	?___wmul,w,c
 16667  001CCA  6EF6               	movwf	tblptrl,c
 16668  001CCC  0EFE               	movlw	high __npowers_
 16669  001CCE  2012               	addwfc	?___wmul+1,w,c
 16670  001CD0  6EF7               	movwf	tblptrh,c
 16671  001CD2                     	if	0	;There are less than 3 active tblptr bytes
 16672  001CD2                     	endif
 16673  001CD2  0009               	tblrd		*+
 16674  001CD4  CFF5 F01F          	movff	tablat,___ftmul@f1
 16675  001CD8  0009               	tblrd		*+
 16676  001CDA  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16677  001CDE  000A               	tblrd		*-
 16678  001CE0  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16679  001CE4  EC8B  F017         	call	___ftmul	;wreg free
 16680  001CE8  C01F  F049         	movff	?___ftmul,_fround$3338
 16681  001CEC  C020  F04A         	movff	?___ftmul+1,_fround$3338+1
 16682  001CF0  C021  F04B         	movff	?___ftmul+2,_fround$3338+2
 16683                           
 16684                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16685  001CF4  0E00               	movlw	0
 16686  001CF6  6E14               	movwf	___wmul@multiplicand+1,c
 16687  001CF8  0E03               	movlw	3
 16688  001CFA  6E13               	movwf	___wmul@multiplicand,c
 16689  001CFC  0E00               	movlw	0
 16690  001CFE  6E40               	movwf	___awmod@divisor+1,c
 16691  001D00  0E0A               	movlw	10
 16692  001D02  6E3F               	movwf	___awmod@divisor,c
 16693  001D04  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16694  001D08  6A3E               	clrf	___awmod@dividend+1,c
 16695  001D0A  EC29  F021         	call	___awmod	;wreg free
 16696  001D0E  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16697  001D12  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16698  001D16  ECC4  F026         	call	___wmul	;wreg free
 16699  001D1A  0E3A               	movlw	low __npowers_
 16700  001D1C  2411               	addwf	?___wmul,w,c
 16701  001D1E  6EF6               	movwf	tblptrl,c
 16702  001D20  0EFE               	movlw	high __npowers_
 16703  001D22  2012               	addwfc	?___wmul+1,w,c
 16704  001D24  6EF7               	movwf	tblptrh,c
 16705  001D26                     	if	0	;There are less than 3 active tblptr bytes
 16706  001D26                     	endif
 16707  001D26  0009               	tblrd		*+
 16708  001D28  CFF5 F022          	movff	tablat,___ftmul@f2
 16709  001D2C  0009               	tblrd		*+
 16710  001D2E  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16711  001D32  000A               	tblrd		*-
 16712  001D34  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16713  001D38  C049  F01F         	movff	_fround$3338,___ftmul@f1
 16714  001D3C  C04A  F020         	movff	_fround$3338+1,___ftmul@f1+1
 16715  001D40  C04B  F021         	movff	_fround$3338+2,___ftmul@f1+2
 16716  001D44  EC8B  F017         	call	___ftmul	;wreg free
 16717  001D48  C01F  F046         	movff	?___ftmul,_fround$3339
 16718  001D4C  C020  F047         	movff	?___ftmul+1,_fround$3339+1
 16719  001D50  C021  F048         	movff	?___ftmul+2,_fround$3339+2
 16720                           
 16721                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16722  001D54  C046  F01F         	movff	_fround$3339,___ftmul@f1
 16723  001D58  C047  F020         	movff	_fround$3339+1,___ftmul@f1+1
 16724  001D5C  C048  F021         	movff	_fround$3339+2,___ftmul@f1+2
 16725  001D60  0E00               	movlw	0
 16726  001D62  6E22               	movwf	___ftmul@f2,c
 16727  001D64  0E00               	movlw	0
 16728  001D66  6E23               	movwf	___ftmul@f2+1,c
 16729  001D68  0E3F               	movlw	63
 16730  001D6A  6E24               	movwf	___ftmul@f2+2,c
 16731  001D6C  EC8B  F017         	call	___ftmul	;wreg free
 16732  001D70  D07D               	goto	L19
 16733  001D72  D083               	goto	l1410
 16734  001D74  D062               	goto	l9198
 16735  001D76                     l9190:
 16736                           
 16737                           ;doprnt.c: 415: else if(prec > 10)
 16738  001D76  0E0A               	movlw	10
 16739  001D78  644C               	cpfsgt	fround@prec,c
 16740  001D7A  D05F               	goto	l9198
 16741                           
 16742                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16743  001D7C  0E00               	movlw	0
 16744  001D7E  6E14               	movwf	___wmul@multiplicand+1,c
 16745  001D80  0E03               	movlw	3
 16746  001D82  6E13               	movwf	___wmul@multiplicand,c
 16747  001D84  0E00               	movlw	0
 16748  001D86  6E40               	movwf	___awmod@divisor+1,c
 16749  001D88  0E0A               	movlw	10
 16750  001D8A  6E3F               	movwf	___awmod@divisor,c
 16751  001D8C  C04C  F03D         	movff	fround@prec,___awmod@dividend
 16752  001D90  6A3E               	clrf	___awmod@dividend+1,c
 16753  001D92  EC29  F021         	call	___awmod	;wreg free
 16754  001D96  C03D  F011         	movff	?___awmod,___wmul@multiplier
 16755  001D9A  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 16756  001D9E  ECC4  F026         	call	___wmul	;wreg free
 16757  001DA2  0E3A               	movlw	low __npowers_
 16758  001DA4  2411               	addwf	?___wmul,w,c
 16759  001DA6  6EF6               	movwf	tblptrl,c
 16760  001DA8  0EFE               	movlw	high __npowers_
 16761  001DAA  2012               	addwfc	?___wmul+1,w,c
 16762  001DAC  6EF7               	movwf	tblptrh,c
 16763  001DAE                     	if	0	;There are less than 3 active tblptr bytes
 16764  001DAE                     	endif
 16765  001DAE  0009               	tblrd		*+
 16766  001DB0  CFF5 F022          	movff	tablat,___ftmul@f2
 16767  001DB4  0009               	tblrd		*+
 16768  001DB6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 16769  001DBA  000A               	tblrd		*-
 16770  001DBC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 16771  001DC0  0E00               	movlw	0
 16772  001DC2  6E1A               	movwf	___awdiv@divisor+1,c
 16773  001DC4  0E0A               	movlw	10
 16774  001DC6  6E19               	movwf	___awdiv@divisor,c
 16775  001DC8  C04C  F017         	movff	fround@prec,___awdiv@dividend
 16776  001DCC  6A18               	clrf	___awdiv@dividend+1,c
 16777  001DCE  EC2D  F01F         	call	___awdiv	;wreg free
 16778  001DD2  0E09               	movlw	9
 16779  001DD4  2417               	addwf	?___awdiv,w,c
 16780  001DD6  6E11               	movwf	___wmul@multiplier,c
 16781  001DD8  0E00               	movlw	0
 16782  001DDA  2018               	addwfc	?___awdiv+1,w,c
 16783  001DDC  6E12               	movwf	___wmul@multiplier+1,c
 16784  001DDE  0E00               	movlw	0
 16785  001DE0  6E14               	movwf	___wmul@multiplicand+1,c
 16786  001DE2  0E03               	movlw	3
 16787  001DE4  6E13               	movwf	___wmul@multiplicand,c
 16788  001DE6  ECC4  F026         	call	___wmul	;wreg free
 16789  001DEA  0E3A               	movlw	low __npowers_
 16790  001DEC  2411               	addwf	?___wmul,w,c
 16791  001DEE  6EF6               	movwf	tblptrl,c
 16792  001DF0  0EFE               	movlw	high __npowers_
 16793  001DF2  2012               	addwfc	?___wmul+1,w,c
 16794  001DF4  6EF7               	movwf	tblptrh,c
 16795  001DF6                     	if	0	;There are less than 3 active tblptr bytes
 16796  001DF6                     	endif
 16797  001DF6  0009               	tblrd		*+
 16798  001DF8  CFF5 F01F          	movff	tablat,___ftmul@f1
 16799  001DFC  0009               	tblrd		*+
 16800  001DFE  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16801  001E02  000A               	tblrd		*-
 16802  001E04  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16803  001E08  EC8B  F017         	call	___ftmul	;wreg free
 16804  001E0C  C01F  F049         	movff	?___ftmul,_fround$3338
 16805  001E10  C020  F04A         	movff	?___ftmul+1,_fround$3338+1
 16806  001E14  C021  F04B         	movff	?___ftmul+2,_fround$3338+2
 16807                           
 16808                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16809  001E18  C049  F01F         	movff	_fround$3338,___ftmul@f1
 16810  001E1C  C04A  F020         	movff	_fround$3338+1,___ftmul@f1+1
 16811  001E20  C04B  F021         	movff	_fround$3338+2,___ftmul@f1+2
 16812  001E24  0E00               	movlw	0
 16813  001E26  6E22               	movwf	___ftmul@f2,c
 16814  001E28  0E00               	movlw	0
 16815  001E2A  6E23               	movwf	___ftmul@f2+1,c
 16816  001E2C  0E3F               	movlw	63
 16817  001E2E  6E24               	movwf	___ftmul@f2+2,c
 16818  001E30  EC8B  F017         	call	___ftmul	;wreg free
 16819  001E34  D01B               	goto	L19
 16820  001E36  D021               	goto	l1410
 16821  001E38  D000               	goto	l9198
 16822  001E3A                     l9198:
 16823                           
 16824                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 16825  001E3A  504C               	movf	fround@prec,w,c
 16826  001E3C  0D03               	mullw	3
 16827  001E3E  0E3A               	movlw	low __npowers_
 16828  001E40  24F3               	addwf	prodl,w,c
 16829  001E42  6EF6               	movwf	tblptrl,c
 16830  001E44  0EFE               	movlw	high __npowers_
 16831  001E46  20F4               	addwfc	prodh,w,c
 16832  001E48  6EF7               	movwf	tblptrh,c
 16833  001E4A                     	if	0	;There are less than 3 active tblptr bytes
 16834  001E4A                     	endif
 16835  001E4A  0009               	tblrd		*+
 16836  001E4C  CFF5 F01F          	movff	tablat,___ftmul@f1
 16837  001E50  0009               	tblrd		*+
 16838  001E52  CFF5 F020          	movff	tablat,___ftmul@f1+1
 16839  001E56  000A               	tblrd		*-
 16840  001E58  CFF5 F021          	movff	tablat,___ftmul@f1+2
 16841  001E5C  0E00               	movlw	0
 16842  001E5E  6E22               	movwf	___ftmul@f2,c
 16843  001E60  0E00               	movlw	0
 16844  001E62  6E23               	movwf	___ftmul@f2+1,c
 16845  001E64  0E3F               	movlw	63
 16846  001E66  6E24               	movwf	___ftmul@f2+2,c
 16847  001E68  EC8B  F017         	call	___ftmul	;wreg free
 16848  001E6C                     L19:
 16849  001E6C  C01F  F043         	movff	?___ftmul,?_fround
 16850  001E70  C020  F044         	movff	?___ftmul+1,?_fround+1
 16851  001E74  C021  F045         	movff	?___ftmul+2,?_fround+2
 16852  001E78  D000               	goto	l1410
 16853  001E7A                     l1410:
 16854  001E7A  0012               	return		;funcret
 16855  001E7C                     __end_of_fround:
 16856                           	opt stack 0
 16857                           tblptru	equ	0xFF8
 16858                           tblptrh	equ	0xFF7
 16859                           tblptrl	equ	0xFF6
 16860                           tablat	equ	0xFF5
 16861                           prodh	equ	0xFF4
 16862                           prodl	equ	0xFF3
 16863                           intcon	equ	0xFF2
 16864                           intcon2	equ	0xFF1
 16865                           postinc0	equ	0xFEE
 16866                           wreg	equ	0xFE8
 16867                           postdec1	equ	0xFE5
 16868                           fsr1l	equ	0xFE1
 16869                           indf2	equ	0xFDF
 16870                           postinc2	equ	0xFDE
 16871                           postdec2	equ	0xFDD
 16872                           fsr2h	equ	0xFDA
 16873                           fsr2l	equ	0xFD9
 16874                           status	equ	0xFD8
 16875                           
 16876 ;; *************** function ___ftmul *****************
 16877 ;; Defined at:
 16878 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 16879 ;; Parameters:    Size  Location     Type
 16880 ;;  f1              3   30[COMRAM] float 
 16881 ;;  f2              3   33[COMRAM] float 
 16882 ;; Auto vars:     Size  Location     Type
 16883 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 16884 ;;  sign            1   44[COMRAM] unsigned char 
 16885 ;;  cntr            1   43[COMRAM] unsigned char 
 16886 ;;  exp             1   39[COMRAM] unsigned char 
 16887 ;; Return value:  Size  Location     Type
 16888 ;;                  3   30[COMRAM] float 
 16889 ;; Registers used:
 16890 ;;		wreg, status,2, status,0, cstack
 16891 ;; Tracked objects:
 16892 ;;		On entry : 0/0
 16893 ;;		On exit  : 0/0
 16894 ;;		Unchanged: 0/0
 16895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;Total ram usage:       15 bytes
 16901 ;; Hardware stack levels used:    1
 16902 ;; Hardware stack levels required when called:    4
 16903 ;; This function calls:
 16904 ;;		___ftpack
 16905 ;; This function is called by:
 16906 ;;		_Update_Screen
 16907 ;;		_do_update_pwm
 16908 ;;		_read_volt
 16909 ;;		_fround
 16910 ;;		_scale
 16911 ;;		_printf
 16912 ;; This function uses a non-reentrant model
 16913 ;;
 16914                           
 16915                           	psect	text79
 16916  002F16                     __ptext79:
 16917                           	opt stack 0
 16918  002F16                     ___ftmul:
 16919                           	opt stack 25
 16920                           
 16921                           ;incstack = 0
 16922  002F16  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 16923  002F1A  6A26               	clrf	(??___ftmul+1)& (0+255),c
 16924  002F1C  6A27               	clrf	(??___ftmul+2)& (0+255),c
 16925  002F1E  3420               	rlcf	___ftmul@f1+1,w,c
 16926  002F20  3625               	rlcf	??___ftmul& (0+255),f,c
 16927  002F22  E301               	bnc	u7131
 16928  002F24  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 16929  002F26                     u7131:
 16930  002F26  5025               	movf	??___ftmul,w,c
 16931  002F28  6E28               	movwf	___ftmul@exp,c
 16932  002F2A  5028               	movf	___ftmul@exp,w,c
 16933  002F2C  A4D8               	btfss	status,2,c
 16934  002F2E  D002               	goto	l8910
 16935  002F30  D00E               	goto	l8912
 16936  002F32  D06C               	goto	l1993
 16937  002F34                     l8910:
 16938  002F34  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 16939  002F38  6A26               	clrf	(??___ftmul+1)& (0+255),c
 16940  002F3A  6A27               	clrf	(??___ftmul+2)& (0+255),c
 16941  002F3C  3423               	rlcf	___ftmul@f2+1,w,c
 16942  002F3E  3625               	rlcf	??___ftmul& (0+255),f,c
 16943  002F40  E301               	bnc	u7151
 16944  002F42  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 16945  002F44                     u7151:
 16946  002F44  5025               	movf	??___ftmul,w,c
 16947  002F46  6E2D               	movwf	___ftmul@sign,c
 16948  002F48  502D               	movf	___ftmul@sign,w,c
 16949  002F4A  A4D8               	btfss	status,2,c
 16950  002F4C  D007               	goto	l8916
 16951  002F4E                     l8912:
 16952  002F4E  0E00               	movlw	0
 16953  002F50  6E1F               	movwf	?___ftmul,c
 16954  002F52  0E00               	movlw	0
 16955  002F54  6E20               	movwf	?___ftmul+1,c
 16956  002F56  0E00               	movlw	0
 16957  002F58  6E21               	movwf	?___ftmul+2,c
 16958  002F5A  D058               	goto	l1993
 16959  002F5C                     l8916:
 16960  002F5C  502D               	movf	___ftmul@sign,w,c
 16961  002F5E  0F7B               	addlw	123
 16962  002F60  2628               	addwf	___ftmul@exp,f,c
 16963  002F62  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 16964  002F66  5024               	movf	___ftmul@f2+2,w,c
 16965  002F68  1A2D               	xorwf	___ftmul@sign,f,c
 16966  002F6A  0E80               	movlw	128
 16967  002F6C  162D               	andwf	___ftmul@sign,f,c
 16968  002F6E  8E20               	bsf	___ftmul@f1+1,7,c
 16969  002F70  8E23               	bsf	___ftmul@f2+1,7,c
 16970  002F72  0EFF               	movlw	255
 16971  002F74  1622               	andwf	___ftmul@f2,f,c
 16972  002F76  0EFF               	movlw	255
 16973  002F78  1623               	andwf	___ftmul@f2+1,f,c
 16974  002F7A  0E00               	movlw	0
 16975  002F7C  1624               	andwf	___ftmul@f2+2,f,c
 16976  002F7E  0E00               	movlw	0
 16977  002F80  6E29               	movwf	___ftmul@f3_as_product,c
 16978  002F82  0E00               	movlw	0
 16979  002F84  6E2A               	movwf	___ftmul@f3_as_product+1,c
 16980  002F86  0E00               	movlw	0
 16981  002F88  6E2B               	movwf	___ftmul@f3_as_product+2,c
 16982  002F8A  0E07               	movlw	7
 16983  002F8C  6E2C               	movwf	___ftmul@cntr,c
 16984  002F8E  D000               	goto	l8930
 16985  002F90                     l8930:
 16986  002F90  A01F               	btfss	___ftmul@f1,0,c
 16987  002F92  D007               	goto	l8934
 16988  002F94  5022               	movf	___ftmul@f2,w,c
 16989  002F96  2629               	addwf	___ftmul@f3_as_product,f,c
 16990  002F98  5023               	movf	___ftmul@f2+1,w,c
 16991  002F9A  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 16992  002F9C  5024               	movf	___ftmul@f2+2,w,c
 16993  002F9E  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 16994  002FA0  D000               	goto	l8934
 16995  002FA2                     l8934:
 16996  002FA2  90D8               	bcf	status,0,c
 16997  002FA4  3221               	rrcf	___ftmul@f1+2,f,c
 16998  002FA6  3220               	rrcf	___ftmul@f1+1,f,c
 16999  002FA8  321F               	rrcf	___ftmul@f1,f,c
 17000  002FAA  90D8               	bcf	status,0,c
 17001  002FAC  3622               	rlcf	___ftmul@f2,f,c
 17002  002FAE  3623               	rlcf	___ftmul@f2+1,f,c
 17003  002FB0  3624               	rlcf	___ftmul@f2+2,f,c
 17004  002FB2  2E2C               	decfsz	___ftmul@cntr,f,c
 17005  002FB4  D7ED               	goto	l8930
 17006  002FB6  D000               	goto	l8938
 17007  002FB8                     l8938:
 17008  002FB8  0E09               	movlw	9
 17009  002FBA  6E2C               	movwf	___ftmul@cntr,c
 17010  002FBC  D000               	goto	l8940
 17011  002FBE                     l8940:
 17012  002FBE  A01F               	btfss	___ftmul@f1,0,c
 17013  002FC0  D007               	goto	l8944
 17014  002FC2  5022               	movf	___ftmul@f2,w,c
 17015  002FC4  2629               	addwf	___ftmul@f3_as_product,f,c
 17016  002FC6  5023               	movf	___ftmul@f2+1,w,c
 17017  002FC8  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 17018  002FCA  5024               	movf	___ftmul@f2+2,w,c
 17019  002FCC  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 17020  002FCE  D000               	goto	l8944
 17021  002FD0                     l8944:
 17022  002FD0  90D8               	bcf	status,0,c
 17023  002FD2  3221               	rrcf	___ftmul@f1+2,f,c
 17024  002FD4  3220               	rrcf	___ftmul@f1+1,f,c
 17025  002FD6  321F               	rrcf	___ftmul@f1,f,c
 17026  002FD8  90D8               	bcf	status,0,c
 17027  002FDA  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 17028  002FDC  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 17029  002FDE  3229               	rrcf	___ftmul@f3_as_product,f,c
 17030  002FE0  2E2C               	decfsz	___ftmul@cntr,f,c
 17031  002FE2  D7ED               	goto	l8940
 17032  002FE4  D000               	goto	l8948
 17033  002FE6                     l8948:
 17034  002FE6  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 17035  002FEA  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17036  002FEE  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17037  002FF2  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 17038  002FF6  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 17039  002FFA  EC12  F01C         	call	___ftpack	;wreg free
 17040  002FFE  C011  F01F         	movff	?___ftpack,?___ftmul
 17041  003002  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 17042  003006  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 17043  00300A  D000               	goto	l1993
 17044  00300C                     l1993:
 17045  00300C  0012               	return		;funcret
 17046  00300E                     __end_of___ftmul:
 17047                           	opt stack 0
 17048                           tblptru	equ	0xFF8
 17049                           tblptrh	equ	0xFF7
 17050                           tblptrl	equ	0xFF6
 17051                           tablat	equ	0xFF5
 17052                           prodh	equ	0xFF4
 17053                           prodl	equ	0xFF3
 17054                           intcon	equ	0xFF2
 17055                           intcon2	equ	0xFF1
 17056                           postinc0	equ	0xFEE
 17057                           wreg	equ	0xFE8
 17058                           postdec1	equ	0xFE5
 17059                           fsr1l	equ	0xFE1
 17060                           indf2	equ	0xFDF
 17061                           postinc2	equ	0xFDE
 17062                           postdec2	equ	0xFDD
 17063                           fsr2h	equ	0xFDA
 17064                           fsr2l	equ	0xFD9
 17065                           status	equ	0xFD8
 17066                           
 17067 ;; *************** function ___awmod *****************
 17068 ;; Defined at:
 17069 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;  dividend        2   60[COMRAM] int 
 17072 ;;  divisor         2   62[COMRAM] int 
 17073 ;; Auto vars:     Size  Location     Type
 17074 ;;  sign            1   65[COMRAM] unsigned char 
 17075 ;;  counter         1   64[COMRAM] unsigned char 
 17076 ;; Return value:  Size  Location     Type
 17077 ;;                  2   60[COMRAM] int 
 17078 ;; Registers used:
 17079 ;;		wreg, status,2, status,0
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17085 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17088 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;Total ram usage:        6 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    3
 17092 ;; This function calls:
 17093 ;;		Nothing
 17094 ;; This function is called by:
 17095 ;;		_Update_Screen
 17096 ;;		_Update_Setup_Alarm_Time_Screen
 17097 ;;		_Update_Setup_Heater_Screen
 17098 ;;		_Update_Setup_Time_Screen
 17099 ;;		_dec_2_bcd
 17100 ;;		_fround
 17101 ;;		_scale
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           	psect	text80
 17106  004252                     __ptext80:
 17107                           	opt stack 0
 17108  004252                     ___awmod:
 17109                           	opt stack 25
 17110                           
 17111                           ;incstack = 0
 17112  004252  0E00               	movlw	0
 17113  004254  6E42               	movwf	___awmod@sign,c
 17114  004256  AE3E               	btfss	___awmod@dividend+1,7,c
 17115  004258  D007               	goto	l9004
 17116  00425A  6C3D               	negf	___awmod@dividend,c
 17117  00425C  1E3E               	comf	___awmod@dividend+1,f,c
 17118  00425E  B0D8               	btfsc	status,0,c
 17119  004260  2A3E               	incf	___awmod@dividend+1,f,c
 17120  004262  0E01               	movlw	1
 17121  004264  6E42               	movwf	___awmod@sign,c
 17122  004266  D000               	goto	l9004
 17123  004268                     l9004:
 17124  004268  AE40               	btfss	___awmod@divisor+1,7,c
 17125  00426A  D005               	goto	l9008
 17126  00426C  6C3F               	negf	___awmod@divisor,c
 17127  00426E  1E40               	comf	___awmod@divisor+1,f,c
 17128  004270  B0D8               	btfsc	status,0,c
 17129  004272  2A40               	incf	___awmod@divisor+1,f,c
 17130  004274  D000               	goto	l9008
 17131  004276                     l9008:
 17132  004276  503F               	movf	___awmod@divisor,w,c
 17133  004278  1040               	iorwf	___awmod@divisor+1,w,c
 17134  00427A  B4D8               	btfsc	status,2,c
 17135  00427C  D01D               	goto	l9024
 17136  00427E  0E01               	movlw	1
 17137  004280  6E41               	movwf	___awmod@counter,c
 17138  004282  D005               	goto	l9014
 17139  004284                     l9012:
 17140  004284  90D8               	bcf	status,0,c
 17141  004286  363F               	rlcf	___awmod@divisor,f,c
 17142  004288  3640               	rlcf	___awmod@divisor+1,f,c
 17143  00428A  2A41               	incf	___awmod@counter,f,c
 17144  00428C  D000               	goto	l9014
 17145  00428E                     l9014:
 17146  00428E  BE40               	btfsc	___awmod@divisor+1,7,c
 17147  004290  D002               	goto	l9016
 17148  004292  D7F8               	goto	l9012
 17149  004294  D000               	goto	l9016
 17150  004296                     l9016:
 17151  004296  503F               	movf	___awmod@divisor,w,c
 17152  004298  5C3D               	subwf	___awmod@dividend,w,c
 17153  00429A  5040               	movf	___awmod@divisor+1,w,c
 17154  00429C  583E               	subwfb	___awmod@dividend+1,w,c
 17155  00429E  A0D8               	btfss	status,0,c
 17156  0042A0  D005               	goto	l9020
 17157  0042A2  503F               	movf	___awmod@divisor,w,c
 17158  0042A4  5E3D               	subwf	___awmod@dividend,f,c
 17159  0042A6  5040               	movf	___awmod@divisor+1,w,c
 17160  0042A8  5A3E               	subwfb	___awmod@dividend+1,f,c
 17161  0042AA  D000               	goto	l9020
 17162  0042AC                     l9020:
 17163  0042AC  90D8               	bcf	status,0,c
 17164  0042AE  3240               	rrcf	___awmod@divisor+1,f,c
 17165  0042B0  323F               	rrcf	___awmod@divisor,f,c
 17166  0042B2  2E41               	decfsz	___awmod@counter,f,c
 17167  0042B4  D7F0               	goto	l9016
 17168  0042B6  D000               	goto	l9024
 17169  0042B8                     l9024:
 17170  0042B8  5042               	movf	___awmod@sign,w,c
 17171  0042BA  B4D8               	btfsc	status,2,c
 17172  0042BC  D005               	goto	l9028
 17173  0042BE  6C3D               	negf	___awmod@dividend,c
 17174  0042C0  1E3E               	comf	___awmod@dividend+1,f,c
 17175  0042C2  B0D8               	btfsc	status,0,c
 17176  0042C4  2A3E               	incf	___awmod@dividend+1,f,c
 17177  0042C6  D000               	goto	l9028
 17178  0042C8                     l9028:
 17179  0042C8  C03D  F03D         	movff	___awmod@dividend,?___awmod
 17180  0042CC  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 17181  0042D0  D000               	goto	l1770
 17182  0042D2                     l1770:
 17183  0042D2  0012               	return		;funcret
 17184  0042D4                     __end_of___awmod:
 17185                           	opt stack 0
 17186                           tblptru	equ	0xFF8
 17187                           tblptrh	equ	0xFF7
 17188                           tblptrl	equ	0xFF6
 17189                           tablat	equ	0xFF5
 17190                           prodh	equ	0xFF4
 17191                           prodl	equ	0xFF3
 17192                           intcon	equ	0xFF2
 17193                           intcon2	equ	0xFF1
 17194                           postinc0	equ	0xFEE
 17195                           wreg	equ	0xFE8
 17196                           postdec1	equ	0xFE5
 17197                           fsr1l	equ	0xFE1
 17198                           indf2	equ	0xFDF
 17199                           postinc2	equ	0xFDE
 17200                           postdec2	equ	0xFDD
 17201                           fsr2h	equ	0xFDA
 17202                           fsr2l	equ	0xFD9
 17203                           status	equ	0xFD8
 17204                           
 17205 ;; *************** function ___awdiv *****************
 17206 ;; Defined at:
 17207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 17208 ;; Parameters:    Size  Location     Type
 17209 ;;  dividend        2   22[COMRAM] int 
 17210 ;;  divisor         2   24[COMRAM] int 
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;  quotient        2   28[COMRAM] int 
 17213 ;;  sign            1   27[COMRAM] unsigned char 
 17214 ;;  counter         1   26[COMRAM] unsigned char 
 17215 ;; Return value:  Size  Location     Type
 17216 ;;                  2   22[COMRAM] int 
 17217 ;; Registers used:
 17218 ;;		wreg, status,2, status,0
 17219 ;; Tracked objects:
 17220 ;;		On entry : 0/0
 17221 ;;		On exit  : 0/0
 17222 ;;		Unchanged: 0/0
 17223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17224 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17225 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17227 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17228 ;;Total ram usage:        8 bytes
 17229 ;; Hardware stack levels used:    1
 17230 ;; Hardware stack levels required when called:    3
 17231 ;; This function calls:
 17232 ;;		Nothing
 17233 ;; This function is called by:
 17234 ;;		_get_duty_cycle
 17235 ;;		_get_RPM
 17236 ;;		_main
 17237 ;;		_Update_Screen
 17238 ;;		_Update_Setup_Alarm_Time_Screen
 17239 ;;		_Update_Setup_Heater_Screen
 17240 ;;		_Update_Setup_Time_Screen
 17241 ;;		_dec_2_bcd
 17242 ;;		_Set_DC_RGB
 17243 ;;		_Set_RPM_RGB
 17244 ;;		_fround
 17245 ;;		_scale
 17246 ;;		_printf
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text81
 17251  003E5A                     __ptext81:
 17252                           	opt stack 0
 17253  003E5A                     ___awdiv:
 17254                           	opt stack 25
 17255                           
 17256                           ;incstack = 0
 17257  003E5A  0E00               	movlw	0
 17258  003E5C  6E1C               	movwf	___awdiv@sign,c
 17259  003E5E  AE1A               	btfss	___awdiv@divisor+1,7,c
 17260  003E60  D007               	goto	l8960
 17261  003E62  6C19               	negf	___awdiv@divisor,c
 17262  003E64  1E1A               	comf	___awdiv@divisor+1,f,c
 17263  003E66  B0D8               	btfsc	status,0,c
 17264  003E68  2A1A               	incf	___awdiv@divisor+1,f,c
 17265  003E6A  0E01               	movlw	1
 17266  003E6C  6E1C               	movwf	___awdiv@sign,c
 17267  003E6E  D000               	goto	l8960
 17268  003E70                     l8960:
 17269  003E70  AE18               	btfss	___awdiv@dividend+1,7,c
 17270  003E72  D007               	goto	l8966
 17271  003E74  6C17               	negf	___awdiv@dividend,c
 17272  003E76  1E18               	comf	___awdiv@dividend+1,f,c
 17273  003E78  B0D8               	btfsc	status,0,c
 17274  003E7A  2A18               	incf	___awdiv@dividend+1,f,c
 17275  003E7C  0E01               	movlw	1
 17276  003E7E  1A1C               	xorwf	___awdiv@sign,f,c
 17277  003E80  D000               	goto	l8966
 17278  003E82                     l8966:
 17279  003E82  0E00               	movlw	0
 17280  003E84  6E1E               	movwf	___awdiv@quotient+1,c
 17281  003E86  0E00               	movlw	0
 17282  003E88  6E1D               	movwf	___awdiv@quotient,c
 17283  003E8A  5019               	movf	___awdiv@divisor,w,c
 17284  003E8C  101A               	iorwf	___awdiv@divisor+1,w,c
 17285  003E8E  B4D8               	btfsc	status,2,c
 17286  003E90  D021               	goto	l8988
 17287  003E92  0E01               	movlw	1
 17288  003E94  6E1B               	movwf	___awdiv@counter,c
 17289  003E96  D005               	goto	l8974
 17290  003E98                     l8972:
 17291  003E98  90D8               	bcf	status,0,c
 17292  003E9A  3619               	rlcf	___awdiv@divisor,f,c
 17293  003E9C  361A               	rlcf	___awdiv@divisor+1,f,c
 17294  003E9E  2A1B               	incf	___awdiv@counter,f,c
 17295  003EA0  D000               	goto	l8974
 17296  003EA2                     l8974:
 17297  003EA2  BE1A               	btfsc	___awdiv@divisor+1,7,c
 17298  003EA4  D002               	goto	l8976
 17299  003EA6  D7F8               	goto	l8972
 17300  003EA8  D000               	goto	l8976
 17301  003EAA                     l8976:
 17302  003EAA  90D8               	bcf	status,0,c
 17303  003EAC  361D               	rlcf	___awdiv@quotient,f,c
 17304  003EAE  361E               	rlcf	___awdiv@quotient+1,f,c
 17305  003EB0  5019               	movf	___awdiv@divisor,w,c
 17306  003EB2  5C17               	subwf	___awdiv@dividend,w,c
 17307  003EB4  501A               	movf	___awdiv@divisor+1,w,c
 17308  003EB6  5818               	subwfb	___awdiv@dividend+1,w,c
 17309  003EB8  A0D8               	btfss	status,0,c
 17310  003EBA  D006               	goto	l8984
 17311  003EBC  5019               	movf	___awdiv@divisor,w,c
 17312  003EBE  5E17               	subwf	___awdiv@dividend,f,c
 17313  003EC0  501A               	movf	___awdiv@divisor+1,w,c
 17314  003EC2  5A18               	subwfb	___awdiv@dividend+1,f,c
 17315  003EC4  801D               	bsf	___awdiv@quotient,0,c
 17316  003EC6  D000               	goto	l8984
 17317  003EC8                     l8984:
 17318  003EC8  90D8               	bcf	status,0,c
 17319  003ECA  321A               	rrcf	___awdiv@divisor+1,f,c
 17320  003ECC  3219               	rrcf	___awdiv@divisor,f,c
 17321  003ECE  2E1B               	decfsz	___awdiv@counter,f,c
 17322  003ED0  D7EC               	goto	l8976
 17323  003ED2  D000               	goto	l8988
 17324  003ED4                     l8988:
 17325  003ED4  501C               	movf	___awdiv@sign,w,c
 17326  003ED6  B4D8               	btfsc	status,2,c
 17327  003ED8  D005               	goto	l8992
 17328  003EDA  6C1D               	negf	___awdiv@quotient,c
 17329  003EDC  1E1E               	comf	___awdiv@quotient+1,f,c
 17330  003EDE  B0D8               	btfsc	status,0,c
 17331  003EE0  2A1E               	incf	___awdiv@quotient+1,f,c
 17332  003EE2  D000               	goto	l8992
 17333  003EE4                     l8992:
 17334  003EE4  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 17335  003EE8  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 17336  003EEC  D000               	goto	l1757
 17337  003EEE                     l1757:
 17338  003EEE  0012               	return		;funcret
 17339  003EF0                     __end_of___awdiv:
 17340                           	opt stack 0
 17341                           tblptru	equ	0xFF8
 17342                           tblptrh	equ	0xFF7
 17343                           tblptrl	equ	0xFF6
 17344                           tablat	equ	0xFF5
 17345                           prodh	equ	0xFF4
 17346                           prodl	equ	0xFF3
 17347                           intcon	equ	0xFF2
 17348                           intcon2	equ	0xFF1
 17349                           postinc0	equ	0xFEE
 17350                           wreg	equ	0xFE8
 17351                           postdec1	equ	0xFE5
 17352                           fsr1l	equ	0xFE1
 17353                           indf2	equ	0xFDF
 17354                           postinc2	equ	0xFDE
 17355                           postdec2	equ	0xFDD
 17356                           fsr2h	equ	0xFDA
 17357                           fsr2l	equ	0xFD9
 17358                           status	equ	0xFD8
 17359                           
 17360 ;; *************** function __tdiv_to_l_ *****************
 17361 ;; Defined at:
 17362 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 17363 ;; Parameters:    Size  Location     Type
 17364 ;;  f1              3   16[COMRAM] float 
 17365 ;;  f2              3   19[COMRAM] float 
 17366 ;; Auto vars:     Size  Location     Type
 17367 ;;  quot            4   25[COMRAM] unsigned long 
 17368 ;;  exp1            1   30[COMRAM] unsigned char 
 17369 ;;  cntr            1   29[COMRAM] unsigned char 
 17370 ;; Return value:  Size  Location     Type
 17371 ;;                  4   16[COMRAM] unsigned long 
 17372 ;; Registers used:
 17373 ;;		wreg, status,2, status,0
 17374 ;; Tracked objects:
 17375 ;;		On entry : 0/0
 17376 ;;		On exit  : 0/0
 17377 ;;		Unchanged: 0/0
 17378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17379 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17380 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17381 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17382 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17383 ;;Total ram usage:       15 bytes
 17384 ;; Hardware stack levels used:    1
 17385 ;; Hardware stack levels required when called:    3
 17386 ;; This function calls:
 17387 ;;		Nothing
 17388 ;; This function is called by:
 17389 ;;		_printf
 17390 ;; This function uses a non-reentrant model
 17391 ;;
 17392                           
 17393                           	psect	text82
 17394  002AE0                     __ptext82:
 17395                           	opt stack 0
 17396  002AE0                     __tdiv_to_l_:
 17397                           	opt stack 26
 17398                           
 17399                           ;incstack = 0
 17400  002AE0  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 17401  002AE4  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 17402  002AE6  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 17403  002AE8  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 17404  002AEA  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 17405  002AEC  E301               	bnc	u7551
 17406  002AEE  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 17407  002AF0                     u7551:
 17408  002AF0  5017               	movf	??__tdiv_to_l_,w,c
 17409  002AF2  6E1F               	movwf	__tdiv_to_l_@exp1,c
 17410  002AF4  501F               	movf	__tdiv_to_l_@exp1,w,c
 17411  002AF6  A4D8               	btfss	status,2,c
 17412  002AF8  D002               	goto	l9258
 17413  002AFA  D05D               	goto	l9300
 17414  002AFC  D078               	goto	l1969
 17415  002AFE                     l9258:
 17416  002AFE  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 17417  002B02  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 17418  002B04  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 17419  002B06  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 17420  002B08  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 17421  002B0A  E301               	bnc	u7571
 17422  002B0C  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 17423  002B0E                     u7571:
 17424  002B0E  5017               	movf	??__tdiv_to_l_,w,c
 17425  002B10  6E1E               	movwf	__tdiv_to_l_@cntr,c
 17426  002B12  501E               	movf	__tdiv_to_l_@cntr,w,c
 17427  002B14  A4D8               	btfss	status,2,c
 17428  002B16  D002               	goto	l9264
 17429  002B18  D04E               	goto	l9300
 17430  002B1A  D069               	goto	l1969
 17431  002B1C                     l9264:
 17432  002B1C  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 17433  002B1E  0EFF               	movlw	255
 17434  002B20  1611               	andwf	__tdiv_to_l_@f1,f,c
 17435  002B22  0EFF               	movlw	255
 17436  002B24  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 17437  002B26  0E00               	movlw	0
 17438  002B28  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 17439  002B2A  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 17440  002B2C  0EFF               	movlw	255
 17441  002B2E  1614               	andwf	__tdiv_to_l_@f2,f,c
 17442  002B30  0EFF               	movlw	255
 17443  002B32  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 17444  002B34  0E00               	movlw	0
 17445  002B36  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 17446  002B38  0E00               	movlw	0
 17447  002B3A  6E1A               	movwf	__tdiv_to_l_@quot,c
 17448  002B3C  0E00               	movlw	0
 17449  002B3E  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 17450  002B40  0E00               	movlw	0
 17451  002B42  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 17452  002B44  0E00               	movlw	0
 17453  002B46  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 17454  002B48  0E7F               	movlw	127
 17455  002B4A  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 17456  002B4C  501E               	movf	__tdiv_to_l_@cntr,w,c
 17457  002B4E  0F98               	addlw	152
 17458  002B50  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 17459  002B52  0E18               	movlw	24
 17460  002B54  6E1E               	movwf	__tdiv_to_l_@cntr,c
 17461  002B56                     l1971:
 17462  002B56  90D8               	bcf	status,0,c
 17463  002B58  361A               	rlcf	__tdiv_to_l_@quot,f,c
 17464  002B5A  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 17465  002B5C  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 17466  002B5E  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 17467  002B60  5014               	movf	__tdiv_to_l_@f2,w,c
 17468  002B62  5C11               	subwf	__tdiv_to_l_@f1,w,c
 17469  002B64  5015               	movf	__tdiv_to_l_@f2+1,w,c
 17470  002B66  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 17471  002B68  5016               	movf	__tdiv_to_l_@f2+2,w,c
 17472  002B6A  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 17473  002B6C  A0D8               	btfss	status,0,c
 17474  002B6E  D007               	goto	l1972
 17475  002B70  5014               	movf	__tdiv_to_l_@f2,w,c
 17476  002B72  5E11               	subwf	__tdiv_to_l_@f1,f,c
 17477  002B74  5015               	movf	__tdiv_to_l_@f2+1,w,c
 17478  002B76  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 17479  002B78  5016               	movf	__tdiv_to_l_@f2+2,w,c
 17480  002B7A  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 17481  002B7C  801A               	bsf	__tdiv_to_l_@quot,0,c
 17482  002B7E                     l1972:
 17483  002B7E  90D8               	bcf	status,0,c
 17484  002B80  3611               	rlcf	__tdiv_to_l_@f1,f,c
 17485  002B82  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 17486  002B84  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 17487  002B86  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 17488  002B88  D7E6               	goto	l1971
 17489  002B8A  D000               	goto	l9286
 17490  002B8C                     l9286:
 17491  002B8C  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 17492  002B8E  D010               	goto	l9298
 17493  002B90  501F               	movf	__tdiv_to_l_@exp1,w,c
 17494  002B92  0A80               	xorlw	128
 17495  002B94  0F97               	addlw	151
 17496  002B96  B0D8               	btfsc	status,0,c
 17497  002B98  D003               	goto	l9294
 17498  002B9A  D00D               	goto	l9300
 17499  002B9C  D028               	goto	l1969
 17500  002B9E  D000               	goto	l9294
 17501  002BA0                     l9294:
 17502  002BA0  90D8               	bcf	status,0,c
 17503  002BA2  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 17504  002BA4  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 17505  002BA6  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 17506  002BA8  321A               	rrcf	__tdiv_to_l_@quot,f,c
 17507  002BAA  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 17508  002BAC  D7F9               	goto	l9294
 17509  002BAE  D017               	goto	l1978
 17510  002BB0                     l9298:
 17511  002BB0  0E17               	movlw	23
 17512  002BB2  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 17513  002BB4  D011               	goto	l9306
 17514  002BB6                     l9300:
 17515  002BB6  0E00               	movlw	0
 17516  002BB8  6E11               	movwf	?__tdiv_to_l_,c
 17517  002BBA  0E00               	movlw	0
 17518  002BBC  6E12               	movwf	?__tdiv_to_l_+1,c
 17519  002BBE  0E00               	movlw	0
 17520  002BC0  6E13               	movwf	?__tdiv_to_l_+2,c
 17521  002BC2  0E00               	movlw	0
 17522  002BC4  6E14               	movwf	?__tdiv_to_l_+3,c
 17523  002BC6  D013               	goto	l1969
 17524  002BC8  D007               	goto	l9306
 17525  002BCA                     l9304:
 17526  002BCA  90D8               	bcf	status,0,c
 17527  002BCC  361A               	rlcf	__tdiv_to_l_@quot,f,c
 17528  002BCE  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 17529  002BD0  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 17530  002BD2  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 17531  002BD4  061F               	decf	__tdiv_to_l_@exp1,f,c
 17532  002BD6  D000               	goto	l9306
 17533  002BD8                     l9306:
 17534  002BD8  501F               	movf	__tdiv_to_l_@exp1,w,c
 17535  002BDA  A4D8               	btfss	status,2,c
 17536  002BDC  D7F6               	goto	l9304
 17537  002BDE                     l1978:
 17538  002BDE  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 17539  002BE2  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 17540  002BE6  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 17541  002BEA  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 17542  002BEE                     l1969:
 17543  002BEE  0012               	return		;funcret
 17544  002BF0                     __end_of__tdiv_to_l_:
 17545                           	opt stack 0
 17546                           tblptru	equ	0xFF8
 17547                           tblptrh	equ	0xFF7
 17548                           tblptrl	equ	0xFF6
 17549                           tablat	equ	0xFF5
 17550                           prodh	equ	0xFF4
 17551                           prodl	equ	0xFF3
 17552                           intcon	equ	0xFF2
 17553                           intcon2	equ	0xFF1
 17554                           postinc0	equ	0xFEE
 17555                           wreg	equ	0xFE8
 17556                           postdec1	equ	0xFE5
 17557                           fsr1l	equ	0xFE1
 17558                           indf2	equ	0xFDF
 17559                           postinc2	equ	0xFDE
 17560                           postdec2	equ	0xFDD
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function __div_to_l_ *****************
 17566 ;; Defined at:
 17567 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  f1              3   16[COMRAM] unsigned long 
 17570 ;;  f2              3   19[COMRAM] unsigned long 
 17571 ;; Auto vars:     Size  Location     Type
 17572 ;;  quot            4   22[COMRAM] unsigned long 
 17573 ;;  exp1            1   27[COMRAM] unsigned char 
 17574 ;;  cntr            1   26[COMRAM] unsigned char 
 17575 ;; Return value:  Size  Location     Type
 17576 ;;                  4   16[COMRAM] unsigned long 
 17577 ;; Registers used:
 17578 ;;		wreg, status,2, status,0
 17579 ;; Tracked objects:
 17580 ;;		On entry : 0/0
 17581 ;;		On exit  : 0/0
 17582 ;;		Unchanged: 0/0
 17583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17584 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17585 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17587 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17588 ;;Total ram usage:       12 bytes
 17589 ;; Hardware stack levels used:    1
 17590 ;; Hardware stack levels required when called:    3
 17591 ;; This function calls:
 17592 ;;		Nothing
 17593 ;; This function is called by:
 17594 ;;		_printf
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           	psect	text83
 17599  002E0C                     __ptext83:
 17600                           	opt stack 0
 17601  002E0C                     __div_to_l_:
 17602                           	opt stack 26
 17603                           
 17604                           ;incstack = 0
 17605  002E0C  3413               	rlcf	__div_to_l_@f1+2,w,c
 17606  002E0E  3414               	rlcf	__div_to_l_@f1+3,w,c
 17607  002E10  6E1C               	movwf	__div_to_l_@exp1,c
 17608  002E12  501C               	movf	__div_to_l_@exp1,w,c
 17609  002E14  A4D8               	btfss	status,2,c
 17610  002E16  D002               	goto	l9314
 17611  002E18  D061               	goto	l9360
 17612  002E1A  D07C               	goto	l1848
 17613  002E1C                     l9314:
 17614  002E1C  3416               	rlcf	__div_to_l_@f2+2,w,c
 17615  002E1E  3417               	rlcf	__div_to_l_@f2+3,w,c
 17616  002E20  6E1B               	movwf	__div_to_l_@cntr,c
 17617  002E22  501B               	movf	__div_to_l_@cntr,w,c
 17618  002E24  A4D8               	btfss	status,2,c
 17619  002E26  D002               	goto	l9320
 17620  002E28  D059               	goto	l9360
 17621  002E2A  D074               	goto	l1848
 17622  002E2C                     l9320:
 17623  002E2C  8E13               	bsf	__div_to_l_@f1+2,7,c
 17624  002E2E  0EFF               	movlw	255
 17625  002E30  1611               	andwf	__div_to_l_@f1,f,c
 17626  002E32  0EFF               	movlw	255
 17627  002E34  1612               	andwf	__div_to_l_@f1+1,f,c
 17628  002E36  0EFF               	movlw	255
 17629  002E38  1613               	andwf	__div_to_l_@f1+2,f,c
 17630  002E3A  0E00               	movlw	0
 17631  002E3C  1614               	andwf	__div_to_l_@f1+3,f,c
 17632  002E3E  8E16               	bsf	__div_to_l_@f2+2,7,c
 17633  002E40  0EFF               	movlw	255
 17634  002E42  1614               	andwf	__div_to_l_@f2,f,c
 17635  002E44  0EFF               	movlw	255
 17636  002E46  1615               	andwf	__div_to_l_@f2+1,f,c
 17637  002E48  0EFF               	movlw	255
 17638  002E4A  1616               	andwf	__div_to_l_@f2+2,f,c
 17639  002E4C  0E00               	movlw	0
 17640  002E4E  1617               	andwf	__div_to_l_@f2+3,f,c
 17641  002E50  0E00               	movlw	0
 17642  002E52  6E17               	movwf	__div_to_l_@quot,c
 17643  002E54  0E00               	movlw	0
 17644  002E56  6E18               	movwf	__div_to_l_@quot+1,c
 17645  002E58  0E00               	movlw	0
 17646  002E5A  6E19               	movwf	__div_to_l_@quot+2,c
 17647  002E5C  0E00               	movlw	0
 17648  002E5E  6E1A               	movwf	__div_to_l_@quot+3,c
 17649  002E60  0E7F               	movlw	127
 17650  002E62  5E1C               	subwf	__div_to_l_@exp1,f,c
 17651  002E64  501B               	movf	__div_to_l_@cntr,w,c
 17652  002E66  0FA0               	addlw	160
 17653  002E68  5E1C               	subwf	__div_to_l_@exp1,f,c
 17654  002E6A  0E20               	movlw	32
 17655  002E6C  6E1B               	movwf	__div_to_l_@cntr,c
 17656  002E6E  D000               	goto	l9334
 17657  002E70                     l9334:
 17658  002E70  90D8               	bcf	status,0,c
 17659  002E72  3617               	rlcf	__div_to_l_@quot,f,c
 17660  002E74  3618               	rlcf	__div_to_l_@quot+1,f,c
 17661  002E76  3619               	rlcf	__div_to_l_@quot+2,f,c
 17662  002E78  361A               	rlcf	__div_to_l_@quot+3,f,c
 17663  002E7A  5014               	movf	__div_to_l_@f2,w,c
 17664  002E7C  5C11               	subwf	__div_to_l_@f1,w,c
 17665  002E7E  5015               	movf	__div_to_l_@f2+1,w,c
 17666  002E80  5812               	subwfb	__div_to_l_@f1+1,w,c
 17667  002E82  5016               	movf	__div_to_l_@f2+2,w,c
 17668  002E84  5813               	subwfb	__div_to_l_@f1+2,w,c
 17669  002E86  5017               	movf	__div_to_l_@f2+3,w,c
 17670  002E88  5814               	subwfb	__div_to_l_@f1+3,w,c
 17671  002E8A  A0D8               	btfss	status,0,c
 17672  002E8C  D00A               	goto	l9342
 17673  002E8E  5014               	movf	__div_to_l_@f2,w,c
 17674  002E90  5E11               	subwf	__div_to_l_@f1,f,c
 17675  002E92  5015               	movf	__div_to_l_@f2+1,w,c
 17676  002E94  5A12               	subwfb	__div_to_l_@f1+1,f,c
 17677  002E96  5016               	movf	__div_to_l_@f2+2,w,c
 17678  002E98  5A13               	subwfb	__div_to_l_@f1+2,f,c
 17679  002E9A  5017               	movf	__div_to_l_@f2+3,w,c
 17680  002E9C  5A14               	subwfb	__div_to_l_@f1+3,f,c
 17681  002E9E  8017               	bsf	__div_to_l_@quot,0,c
 17682  002EA0  D000               	goto	l9342
 17683  002EA2                     l9342:
 17684  002EA2  90D8               	bcf	status,0,c
 17685  002EA4  3611               	rlcf	__div_to_l_@f1,f,c
 17686  002EA6  3612               	rlcf	__div_to_l_@f1+1,f,c
 17687  002EA8  3613               	rlcf	__div_to_l_@f1+2,f,c
 17688  002EAA  3614               	rlcf	__div_to_l_@f1+3,f,c
 17689  002EAC  2E1B               	decfsz	__div_to_l_@cntr,f,c
 17690  002EAE  D7E0               	goto	l9334
 17691  002EB0  D000               	goto	l9346
 17692  002EB2                     l9346:
 17693  002EB2  AE1C               	btfss	__div_to_l_@exp1,7,c
 17694  002EB4  D010               	goto	l9358
 17695  002EB6  501C               	movf	__div_to_l_@exp1,w,c
 17696  002EB8  0A80               	xorlw	128
 17697  002EBA  0F9F               	addlw	159
 17698  002EBC  B0D8               	btfsc	status,0,c
 17699  002EBE  D003               	goto	l9354
 17700  002EC0  D00D               	goto	l9360
 17701  002EC2  D028               	goto	l1848
 17702  002EC4  D000               	goto	l9354
 17703  002EC6                     l9354:
 17704  002EC6  90D8               	bcf	status,0,c
 17705  002EC8  321A               	rrcf	__div_to_l_@quot+3,f,c
 17706  002ECA  3219               	rrcf	__div_to_l_@quot+2,f,c
 17707  002ECC  3218               	rrcf	__div_to_l_@quot+1,f,c
 17708  002ECE  3217               	rrcf	__div_to_l_@quot,f,c
 17709  002ED0  3E1C               	incfsz	__div_to_l_@exp1,f,c
 17710  002ED2  D7F9               	goto	l9354
 17711  002ED4  D017               	goto	l1857
 17712  002ED6                     l9358:
 17713  002ED6  0E1F               	movlw	31
 17714  002ED8  641C               	cpfsgt	__div_to_l_@exp1,c
 17715  002EDA  D011               	goto	l9366
 17716  002EDC                     l9360:
 17717  002EDC  0E00               	movlw	0
 17718  002EDE  6E11               	movwf	?__div_to_l_,c
 17719  002EE0  0E00               	movlw	0
 17720  002EE2  6E12               	movwf	?__div_to_l_+1,c
 17721  002EE4  0E00               	movlw	0
 17722  002EE6  6E13               	movwf	?__div_to_l_+2,c
 17723  002EE8  0E00               	movlw	0
 17724  002EEA  6E14               	movwf	?__div_to_l_+3,c
 17725  002EEC  D013               	goto	l1848
 17726  002EEE  D007               	goto	l9366
 17727  002EF0                     l9364:
 17728  002EF0  90D8               	bcf	status,0,c
 17729  002EF2  3617               	rlcf	__div_to_l_@quot,f,c
 17730  002EF4  3618               	rlcf	__div_to_l_@quot+1,f,c
 17731  002EF6  3619               	rlcf	__div_to_l_@quot+2,f,c
 17732  002EF8  361A               	rlcf	__div_to_l_@quot+3,f,c
 17733  002EFA  061C               	decf	__div_to_l_@exp1,f,c
 17734  002EFC  D000               	goto	l9366
 17735  002EFE                     l9366:
 17736  002EFE  501C               	movf	__div_to_l_@exp1,w,c
 17737  002F00  A4D8               	btfss	status,2,c
 17738  002F02  D7F6               	goto	l9364
 17739  002F04                     l1857:
 17740  002F04  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 17741  002F08  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 17742  002F0C  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 17743  002F10  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 17744  002F14                     l1848:
 17745  002F14  0012               	return		;funcret
 17746  002F16                     __end_of__div_to_l_:
 17747                           	opt stack 0
 17748                           tblptru	equ	0xFF8
 17749                           tblptrh	equ	0xFF7
 17750                           tblptrl	equ	0xFF6
 17751                           tablat	equ	0xFF5
 17752                           prodh	equ	0xFF4
 17753                           prodl	equ	0xFF3
 17754                           intcon	equ	0xFF2
 17755                           intcon2	equ	0xFF1
 17756                           postinc0	equ	0xFEE
 17757                           wreg	equ	0xFE8
 17758                           postdec1	equ	0xFE5
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           fsr2h	equ	0xFDA
 17764                           fsr2l	equ	0xFD9
 17765                           status	equ	0xFD8
 17766                           
 17767 ;; *************** function ___lltoft *****************
 17768 ;; Defined at:
 17769 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  c               4   24[COMRAM] unsigned long 
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;  exp             1   32[COMRAM] unsigned char 
 17774 ;; Return value:  Size  Location     Type
 17775 ;;                  3   24[COMRAM] float 
 17776 ;; Registers used:
 17777 ;;		wreg, status,2, status,0, cstack
 17778 ;; Tracked objects:
 17779 ;;		On entry : 0/0
 17780 ;;		On exit  : 0/0
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17785 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17786 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17787 ;;Total ram usage:        9 bytes
 17788 ;; Hardware stack levels used:    1
 17789 ;; Hardware stack levels required when called:    4
 17790 ;; This function calls:
 17791 ;;		___ftpack
 17792 ;; This function is called by:
 17793 ;;		_printf
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           	psect	text84
 17798  004652                     __ptext84:
 17799                           	opt stack 0
 17800  004652                     ___lltoft:
 17801                           	opt stack 25
 17802                           
 17803                           ;incstack = 0
 17804  004652  0E8E               	movlw	142
 17805  004654  6E21               	movwf	___lltoft@exp,c
 17806  004656  D007               	goto	l9486
 17807  004658                     l9484:
 17808  004658  90D8               	bcf	status,0,c
 17809  00465A  321C               	rrcf	___lltoft@c+3,f,c
 17810  00465C  321B               	rrcf	___lltoft@c+2,f,c
 17811  00465E  321A               	rrcf	___lltoft@c+1,f,c
 17812  004660  3219               	rrcf	___lltoft@c,f,c
 17813  004662  2A21               	incf	___lltoft@exp,f,c
 17814  004664  D000               	goto	l9486
 17815  004666                     l9486:
 17816  004666  0E00               	movlw	0
 17817  004668  1419               	andwf	___lltoft@c,w,c
 17818  00466A  6E1D               	movwf	??___lltoft& (0+255),c
 17819  00466C  0E00               	movlw	0
 17820  00466E  141A               	andwf	___lltoft@c+1,w,c
 17821  004670  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 17822  004672  0E00               	movlw	0
 17823  004674  141B               	andwf	___lltoft@c+2,w,c
 17824  004676  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 17825  004678  0EFF               	movlw	255
 17826  00467A  141C               	andwf	___lltoft@c+3,w,c
 17827  00467C  6E20               	movwf	(??___lltoft+3)& (0+255),c
 17828  00467E  501D               	movf	??___lltoft,w,c
 17829  004680  101E               	iorwf	??___lltoft+1,w,c
 17830  004682  101F               	iorwf	??___lltoft+2,w,c
 17831  004684  1020               	iorwf	??___lltoft+3,w,c
 17832  004686  A4D8               	btfss	status,2,c
 17833  004688  D7E7               	goto	l9484
 17834  00468A  C019  F011         	movff	___lltoft@c,___ftpack@arg
 17835  00468E  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 17836  004692  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 17837  004696  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 17838  00469A  0E00               	movlw	0
 17839  00469C  6E15               	movwf	___ftpack@sign,c
 17840  00469E  EC12  F01C         	call	___ftpack	;wreg free
 17841  0046A2  C011  F019         	movff	?___ftpack,?___lltoft
 17842  0046A6  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 17843  0046AA  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 17844  0046AE  D000               	goto	l2088
 17845  0046B0                     l2088:
 17846  0046B0  0012               	return		;funcret
 17847  0046B2                     __end_of___lltoft:
 17848                           	opt stack 0
 17849                           tblptru	equ	0xFF8
 17850                           tblptrh	equ	0xFF7
 17851                           tblptrl	equ	0xFF6
 17852                           tablat	equ	0xFF5
 17853                           prodh	equ	0xFF4
 17854                           prodl	equ	0xFF3
 17855                           intcon	equ	0xFF2
 17856                           intcon2	equ	0xFF1
 17857                           postinc0	equ	0xFEE
 17858                           wreg	equ	0xFE8
 17859                           postdec1	equ	0xFE5
 17860                           fsr1l	equ	0xFE1
 17861                           indf2	equ	0xFDF
 17862                           postinc2	equ	0xFDE
 17863                           postdec2	equ	0xFDD
 17864                           fsr2h	equ	0xFDA
 17865                           fsr2l	equ	0xFD9
 17866                           status	equ	0xFD8
 17867                           
 17868 ;; *************** function ___llmod *****************
 17869 ;; Defined at:
 17870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;  dividend        4   29[COMRAM] unsigned long 
 17873 ;;  divisor         4   33[COMRAM] unsigned long 
 17874 ;; Auto vars:     Size  Location     Type
 17875 ;;  counter         1   37[COMRAM] unsigned char 
 17876 ;; Return value:  Size  Location     Type
 17877 ;;                  4   29[COMRAM] unsigned long 
 17878 ;; Registers used:
 17879 ;;		wreg, status,2, status,0
 17880 ;; Tracked objects:
 17881 ;;		On entry : 0/0
 17882 ;;		On exit  : 0/0
 17883 ;;		Unchanged: 0/0
 17884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17885 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17886 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;Total ram usage:        9 bytes
 17890 ;; Hardware stack levels used:    1
 17891 ;; Hardware stack levels required when called:    3
 17892 ;; This function calls:
 17893 ;;		Nothing
 17894 ;; This function is called by:
 17895 ;;		_printf
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text85
 17900  004448                     __ptext85:
 17901                           	opt stack 0
 17902  004448                     ___llmod:
 17903                           	opt stack 26
 17904                           
 17905                           ;incstack = 0
 17906  004448  5022               	movf	___llmod@divisor,w,c
 17907  00444A  1023               	iorwf	___llmod@divisor+1,w,c
 17908  00444C  1024               	iorwf	___llmod@divisor+2,w,c
 17909  00444E  1025               	iorwf	___llmod@divisor+3,w,c
 17910  004450  B4D8               	btfsc	status,2,c
 17911  004452  D029               	goto	l2068
 17912  004454  0E01               	movlw	1
 17913  004456  6E26               	movwf	___llmod@counter,c
 17914  004458  D007               	goto	l9472
 17915  00445A                     l9470:
 17916  00445A  90D8               	bcf	status,0,c
 17917  00445C  3622               	rlcf	___llmod@divisor,f,c
 17918  00445E  3623               	rlcf	___llmod@divisor+1,f,c
 17919  004460  3624               	rlcf	___llmod@divisor+2,f,c
 17920  004462  3625               	rlcf	___llmod@divisor+3,f,c
 17921  004464  2A26               	incf	___llmod@counter,f,c
 17922  004466  D000               	goto	l9472
 17923  004468                     l9472:
 17924  004468  BE25               	btfsc	___llmod@divisor+3,7,c
 17925  00446A  D002               	goto	l9474
 17926  00446C  D7F6               	goto	l9470
 17927  00446E  D000               	goto	l9474
 17928  004470                     l9474:
 17929  004470  5022               	movf	___llmod@divisor,w,c
 17930  004472  5C1E               	subwf	___llmod@dividend,w,c
 17931  004474  5023               	movf	___llmod@divisor+1,w,c
 17932  004476  581F               	subwfb	___llmod@dividend+1,w,c
 17933  004478  5024               	movf	___llmod@divisor+2,w,c
 17934  00447A  5820               	subwfb	___llmod@dividend+2,w,c
 17935  00447C  5025               	movf	___llmod@divisor+3,w,c
 17936  00447E  5821               	subwfb	___llmod@dividend+3,w,c
 17937  004480  A0D8               	btfss	status,0,c
 17938  004482  D009               	goto	l9478
 17939  004484  5022               	movf	___llmod@divisor,w,c
 17940  004486  5E1E               	subwf	___llmod@dividend,f,c
 17941  004488  5023               	movf	___llmod@divisor+1,w,c
 17942  00448A  5A1F               	subwfb	___llmod@dividend+1,f,c
 17943  00448C  5024               	movf	___llmod@divisor+2,w,c
 17944  00448E  5A20               	subwfb	___llmod@dividend+2,f,c
 17945  004490  5025               	movf	___llmod@divisor+3,w,c
 17946  004492  5A21               	subwfb	___llmod@dividend+3,f,c
 17947  004494  D000               	goto	l9478
 17948  004496                     l9478:
 17949  004496  90D8               	bcf	status,0,c
 17950  004498  3225               	rrcf	___llmod@divisor+3,f,c
 17951  00449A  3224               	rrcf	___llmod@divisor+2,f,c
 17952  00449C  3223               	rrcf	___llmod@divisor+1,f,c
 17953  00449E  3222               	rrcf	___llmod@divisor,f,c
 17954  0044A0  2E26               	decfsz	___llmod@counter,f,c
 17955  0044A2  D7E6               	goto	l9474
 17956  0044A4  D000               	goto	l2068
 17957  0044A6                     l2068:
 17958  0044A6  C01E  F01E         	movff	___llmod@dividend,?___llmod
 17959  0044AA  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 17960  0044AE  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 17961  0044B2  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 17962  0044B6  0012               	return		;funcret
 17963  0044B8                     __end_of___llmod:
 17964                           	opt stack 0
 17965                           tblptru	equ	0xFF8
 17966                           tblptrh	equ	0xFF7
 17967                           tblptrl	equ	0xFF6
 17968                           tablat	equ	0xFF5
 17969                           prodh	equ	0xFF4
 17970                           prodl	equ	0xFF3
 17971                           intcon	equ	0xFF2
 17972                           intcon2	equ	0xFF1
 17973                           postinc0	equ	0xFEE
 17974                           wreg	equ	0xFE8
 17975                           postdec1	equ	0xFE5
 17976                           fsr1l	equ	0xFE1
 17977                           indf2	equ	0xFDF
 17978                           postinc2	equ	0xFDE
 17979                           postdec2	equ	0xFDD
 17980                           fsr2h	equ	0xFDA
 17981                           fsr2l	equ	0xFD9
 17982                           status	equ	0xFD8
 17983                           
 17984 ;; *************** function ___lldiv *****************
 17985 ;; Defined at:
 17986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 17987 ;; Parameters:    Size  Location     Type
 17988 ;;  dividend        4   16[COMRAM] unsigned long 
 17989 ;;  divisor         4   20[COMRAM] unsigned long 
 17990 ;; Auto vars:     Size  Location     Type
 17991 ;;  quotient        4   24[COMRAM] unsigned long 
 17992 ;;  counter         1   28[COMRAM] unsigned char 
 17993 ;; Return value:  Size  Location     Type
 17994 ;;                  4   16[COMRAM] unsigned long 
 17995 ;; Registers used:
 17996 ;;		wreg, status,2, status,0
 17997 ;; Tracked objects:
 17998 ;;		On entry : 0/0
 17999 ;;		On exit  : 0/0
 18000 ;;		Unchanged: 0/0
 18001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18002 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18006 ;;Total ram usage:       13 bytes
 18007 ;; Hardware stack levels used:    1
 18008 ;; Hardware stack levels required when called:    3
 18009 ;; This function calls:
 18010 ;;		Nothing
 18011 ;; This function is called by:
 18012 ;;		_printf
 18013 ;; This function uses a non-reentrant model
 18014 ;;
 18015                           
 18016                           	psect	text86
 18017  00413E                     __ptext86:
 18018                           	opt stack 0
 18019  00413E                     ___lldiv:
 18020                           	opt stack 26
 18021                           
 18022                           ;incstack = 0
 18023  00413E  0E00               	movlw	0
 18024  004140  6E19               	movwf	___lldiv@quotient,c
 18025  004142  0E00               	movlw	0
 18026  004144  6E1A               	movwf	___lldiv@quotient+1,c
 18027  004146  0E00               	movlw	0
 18028  004148  6E1B               	movwf	___lldiv@quotient+2,c
 18029  00414A  0E00               	movlw	0
 18030  00414C  6E1C               	movwf	___lldiv@quotient+3,c
 18031  00414E  5015               	movf	___lldiv@divisor,w,c
 18032  004150  1016               	iorwf	___lldiv@divisor+1,w,c
 18033  004152  1017               	iorwf	___lldiv@divisor+2,w,c
 18034  004154  1018               	iorwf	___lldiv@divisor+3,w,c
 18035  004156  B4D8               	btfsc	status,2,c
 18036  004158  D02F               	goto	l2058
 18037  00415A  0E01               	movlw	1
 18038  00415C  6E1D               	movwf	___lldiv@counter,c
 18039  00415E  D007               	goto	l9452
 18040  004160                     l9450:
 18041  004160  90D8               	bcf	status,0,c
 18042  004162  3615               	rlcf	___lldiv@divisor,f,c
 18043  004164  3616               	rlcf	___lldiv@divisor+1,f,c
 18044  004166  3617               	rlcf	___lldiv@divisor+2,f,c
 18045  004168  3618               	rlcf	___lldiv@divisor+3,f,c
 18046  00416A  2A1D               	incf	___lldiv@counter,f,c
 18047  00416C  D000               	goto	l9452
 18048  00416E                     l9452:
 18049  00416E  BE18               	btfsc	___lldiv@divisor+3,7,c
 18050  004170  D002               	goto	l9454
 18051  004172  D7F6               	goto	l9450
 18052  004174  D000               	goto	l9454
 18053  004176                     l9454:
 18054  004176  90D8               	bcf	status,0,c
 18055  004178  3619               	rlcf	___lldiv@quotient,f,c
 18056  00417A  361A               	rlcf	___lldiv@quotient+1,f,c
 18057  00417C  361B               	rlcf	___lldiv@quotient+2,f,c
 18058  00417E  361C               	rlcf	___lldiv@quotient+3,f,c
 18059  004180  5015               	movf	___lldiv@divisor,w,c
 18060  004182  5C11               	subwf	___lldiv@dividend,w,c
 18061  004184  5016               	movf	___lldiv@divisor+1,w,c
 18062  004186  5812               	subwfb	___lldiv@dividend+1,w,c
 18063  004188  5017               	movf	___lldiv@divisor+2,w,c
 18064  00418A  5813               	subwfb	___lldiv@dividend+2,w,c
 18065  00418C  5018               	movf	___lldiv@divisor+3,w,c
 18066  00418E  5814               	subwfb	___lldiv@dividend+3,w,c
 18067  004190  A0D8               	btfss	status,0,c
 18068  004192  D00A               	goto	l9462
 18069  004194  5015               	movf	___lldiv@divisor,w,c
 18070  004196  5E11               	subwf	___lldiv@dividend,f,c
 18071  004198  5016               	movf	___lldiv@divisor+1,w,c
 18072  00419A  5A12               	subwfb	___lldiv@dividend+1,f,c
 18073  00419C  5017               	movf	___lldiv@divisor+2,w,c
 18074  00419E  5A13               	subwfb	___lldiv@dividend+2,f,c
 18075  0041A0  5018               	movf	___lldiv@divisor+3,w,c
 18076  0041A2  5A14               	subwfb	___lldiv@dividend+3,f,c
 18077  0041A4  8019               	bsf	___lldiv@quotient,0,c
 18078  0041A6  D000               	goto	l9462
 18079  0041A8                     l9462:
 18080  0041A8  90D8               	bcf	status,0,c
 18081  0041AA  3218               	rrcf	___lldiv@divisor+3,f,c
 18082  0041AC  3217               	rrcf	___lldiv@divisor+2,f,c
 18083  0041AE  3216               	rrcf	___lldiv@divisor+1,f,c
 18084  0041B0  3215               	rrcf	___lldiv@divisor,f,c
 18085  0041B2  2E1D               	decfsz	___lldiv@counter,f,c
 18086  0041B4  D7E0               	goto	l9454
 18087  0041B6  D000               	goto	l2058
 18088  0041B8                     l2058:
 18089  0041B8  C019  F011         	movff	___lldiv@quotient,?___lldiv
 18090  0041BC  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 18091  0041C0  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 18092  0041C4  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 18093  0041C8  0012               	return		;funcret
 18094  0041CA                     __end_of___lldiv:
 18095                           	opt stack 0
 18096                           tblptru	equ	0xFF8
 18097                           tblptrh	equ	0xFF7
 18098                           tblptrl	equ	0xFF6
 18099                           tablat	equ	0xFF5
 18100                           prodh	equ	0xFF4
 18101                           prodl	equ	0xFF3
 18102                           intcon	equ	0xFF2
 18103                           intcon2	equ	0xFF1
 18104                           postinc0	equ	0xFEE
 18105                           wreg	equ	0xFE8
 18106                           postdec1	equ	0xFE5
 18107                           fsr1l	equ	0xFE1
 18108                           indf2	equ	0xFDF
 18109                           postinc2	equ	0xFDE
 18110                           postdec2	equ	0xFDD
 18111                           fsr2h	equ	0xFDA
 18112                           fsr2l	equ	0xFD9
 18113                           status	equ	0xFD8
 18114                           
 18115 ;; *************** function ___fttol *****************
 18116 ;; Defined at:
 18117 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 18118 ;; Parameters:    Size  Location     Type
 18119 ;;  f1              3   45[COMRAM] float 
 18120 ;; Auto vars:     Size  Location     Type
 18121 ;;  lval            4   55[COMRAM] unsigned long 
 18122 ;;  exp1            1   59[COMRAM] unsigned char 
 18123 ;;  sign1           1   54[COMRAM] unsigned char 
 18124 ;; Return value:  Size  Location     Type
 18125 ;;                  4   45[COMRAM] long 
 18126 ;; Registers used:
 18127 ;;		wreg, status,2, status,0
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18133 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18137 ;;Total ram usage:       15 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:    3
 18140 ;; This function calls:
 18141 ;;		Nothing
 18142 ;; This function is called by:
 18143 ;;		_Update_Screen
 18144 ;;		_do_update_pwm
 18145 ;;		_printf
 18146 ;; This function uses a non-reentrant model
 18147 ;;
 18148                           
 18149                           	psect	text87
 18150  0033C6                     __ptext87:
 18151                           	opt stack 0
 18152  0033C6                     ___fttol:
 18153                           	opt stack 26
 18154                           
 18155                           ;incstack = 0
 18156  0033C6  C030  F032         	movff	___fttol@f1+2,??___fttol
 18157  0033CA  6A33               	clrf	(??___fttol+1)& (0+255),c
 18158  0033CC  6A34               	clrf	(??___fttol+2)& (0+255),c
 18159  0033CE  342F               	rlcf	___fttol@f1+1,w,c
 18160  0033D0  3632               	rlcf	??___fttol& (0+255),f,c
 18161  0033D2  E301               	bnc	u7761
 18162  0033D4  8033               	bsf	(??___fttol+1)& (0+255),0,c
 18163  0033D6                     u7761:
 18164  0033D6  5032               	movf	??___fttol,w,c
 18165  0033D8  6E3C               	movwf	___fttol@exp1,c
 18166  0033DA  503C               	movf	___fttol@exp1,w,c
 18167  0033DC  A4D8               	btfss	status,2,c
 18168  0033DE  D002               	goto	l9404
 18169  0033E0  D039               	goto	l9428
 18170  0033E2  D063               	goto	l2014
 18171  0033E4                     l9404:
 18172  0033E4  0E17               	movlw	23
 18173  0033E6  6E32               	movwf	??___fttol& (0+255),c
 18174  0033E8  C02E  F033         	movff	___fttol@f1,??___fttol+1
 18175  0033EC  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 18176  0033F0  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 18177  0033F4  2832               	incf	??___fttol,w,c
 18178  0033F6  6E36               	movwf	(??___fttol+4)& (0+255),c
 18179  0033F8  D004               	goto	u7780
 18180  0033FA                     u7785:
 18181  0033FA  90D8               	bcf	status,0,c
 18182  0033FC  3235               	rrcf	??___fttol+3,f,c
 18183  0033FE  3234               	rrcf	??___fttol+2,f,c
 18184  003400  3233               	rrcf	??___fttol+1,f,c
 18185  003402                     u7780:
 18186  003402  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 18187  003404  D7FA               	goto	u7785
 18188  003406  5033               	movf	??___fttol+1,w,c
 18189  003408  6E37               	movwf	___fttol@sign1,c
 18190  00340A  8E2F               	bsf	___fttol@f1+1,7,c
 18191  00340C  0EFF               	movlw	255
 18192  00340E  162E               	andwf	___fttol@f1,f,c
 18193  003410  0EFF               	movlw	255
 18194  003412  162F               	andwf	___fttol@f1+1,f,c
 18195  003414  0E00               	movlw	0
 18196  003416  1630               	andwf	___fttol@f1+2,f,c
 18197  003418  502E               	movf	___fttol@f1,w,c
 18198  00341A  6E38               	movwf	___fttol@lval,c
 18199  00341C  502F               	movf	___fttol@f1+1,w,c
 18200  00341E  6E39               	movwf	___fttol@lval+1,c
 18201  003420  5030               	movf	___fttol@f1+2,w,c
 18202  003422  6E3A               	movwf	___fttol@lval+2,c
 18203  003424  6A3B               	clrf	___fttol@lval+3,c
 18204  003426  0E8E               	movlw	142
 18205  003428  5E3C               	subwf	___fttol@exp1,f,c
 18206  00342A  AE3C               	btfss	___fttol@exp1,7,c
 18207  00342C  D010               	goto	l9426
 18208  00342E  503C               	movf	___fttol@exp1,w,c
 18209  003430  0A80               	xorlw	128
 18210  003432  0F8F               	addlw	143
 18211  003434  B0D8               	btfsc	status,0,c
 18212  003436  D003               	goto	l9422
 18213  003438  D00D               	goto	l9428
 18214  00343A  D037               	goto	l2014
 18215  00343C  D000               	goto	l9422
 18216  00343E                     l9422:
 18217  00343E  90D8               	bcf	status,0,c
 18218  003440  323B               	rrcf	___fttol@lval+3,f,c
 18219  003442  323A               	rrcf	___fttol@lval+2,f,c
 18220  003444  3239               	rrcf	___fttol@lval+1,f,c
 18221  003446  3238               	rrcf	___fttol@lval,f,c
 18222  003448  3E3C               	incfsz	___fttol@exp1,f,c
 18223  00344A  D7F9               	goto	l9422
 18224  00344C  D019               	goto	l9436
 18225  00344E                     l9426:
 18226  00344E  0E17               	movlw	23
 18227  003450  643C               	cpfsgt	___fttol@exp1,c
 18228  003452  D011               	goto	l9434
 18229  003454                     l9428:
 18230  003454  0E00               	movlw	0
 18231  003456  6E2E               	movwf	?___fttol,c
 18232  003458  0E00               	movlw	0
 18233  00345A  6E2F               	movwf	?___fttol+1,c
 18234  00345C  0E00               	movlw	0
 18235  00345E  6E30               	movwf	?___fttol+2,c
 18236  003460  0E00               	movlw	0
 18237  003462  6E31               	movwf	?___fttol+3,c
 18238  003464  D022               	goto	l2014
 18239  003466  D007               	goto	l9434
 18240  003468                     l9432:
 18241  003468  90D8               	bcf	status,0,c
 18242  00346A  3638               	rlcf	___fttol@lval,f,c
 18243  00346C  3639               	rlcf	___fttol@lval+1,f,c
 18244  00346E  363A               	rlcf	___fttol@lval+2,f,c
 18245  003470  363B               	rlcf	___fttol@lval+3,f,c
 18246  003472  063C               	decf	___fttol@exp1,f,c
 18247  003474  D000               	goto	l9434
 18248  003476                     l9434:
 18249  003476  503C               	movf	___fttol@exp1,w,c
 18250  003478  B4D8               	btfsc	status,2,c
 18251  00347A  D002               	goto	l9436
 18252  00347C  D7F5               	goto	l9432
 18253  00347E  D000               	goto	l9436
 18254  003480                     l9436:
 18255  003480  5037               	movf	___fttol@sign1,w,c
 18256  003482  B4D8               	btfsc	status,2,c
 18257  003484  D009               	goto	l9440
 18258  003486  1E3B               	comf	___fttol@lval+3,f,c
 18259  003488  1E3A               	comf	___fttol@lval+2,f,c
 18260  00348A  1E39               	comf	___fttol@lval+1,f,c
 18261  00348C  6C38               	negf	___fttol@lval,c
 18262  00348E  0E00               	movlw	0
 18263  003490  2239               	addwfc	___fttol@lval+1,f,c
 18264  003492  223A               	addwfc	___fttol@lval+2,f,c
 18265  003494  223B               	addwfc	___fttol@lval+3,f,c
 18266  003496  D000               	goto	l9440
 18267  003498                     l9440:
 18268  003498  C038  F02E         	movff	___fttol@lval,?___fttol
 18269  00349C  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 18270  0034A0  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 18271  0034A4  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 18272  0034A8  D000               	goto	l2014
 18273  0034AA                     l2014:
 18274  0034AA  0012               	return		;funcret
 18275  0034AC                     __end_of___fttol:
 18276                           	opt stack 0
 18277                           tblptru	equ	0xFF8
 18278                           tblptrh	equ	0xFF7
 18279                           tblptrl	equ	0xFF6
 18280                           tablat	equ	0xFF5
 18281                           prodh	equ	0xFF4
 18282                           prodl	equ	0xFF3
 18283                           intcon	equ	0xFF2
 18284                           intcon2	equ	0xFF1
 18285                           postinc0	equ	0xFEE
 18286                           wreg	equ	0xFE8
 18287                           postdec1	equ	0xFE5
 18288                           fsr1l	equ	0xFE1
 18289                           indf2	equ	0xFDF
 18290                           postinc2	equ	0xFDE
 18291                           postdec2	equ	0xFDD
 18292                           fsr2h	equ	0xFDA
 18293                           fsr2l	equ	0xFD9
 18294                           status	equ	0xFD8
 18295                           
 18296 ;; *************** function ___ftsub *****************
 18297 ;; Defined at:
 18298 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 18299 ;; Parameters:    Size  Location     Type
 18300 ;;  f1              3   88[COMRAM] float 
 18301 ;;  f2              3   91[COMRAM] float 
 18302 ;; Auto vars:     Size  Location     Type
 18303 ;;		None
 18304 ;; Return value:  Size  Location     Type
 18305 ;;                  3   88[COMRAM] float 
 18306 ;; Registers used:
 18307 ;;		wreg, status,2, status,0, cstack
 18308 ;; Tracked objects:
 18309 ;;		On entry : 0/0
 18310 ;;		On exit  : 0/0
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18313 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18316 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18317 ;;Total ram usage:        6 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; Hardware stack levels required when called:    5
 18320 ;; This function calls:
 18321 ;;		___ftadd
 18322 ;; This function is called by:
 18323 ;;		_printf
 18324 ;; This function uses a non-reentrant model
 18325 ;;
 18326                           
 18327                           	psect	text88
 18328  004A4E                     __ptext88:
 18329                           	opt stack 0
 18330  004A4E                     ___ftsub:
 18331                           	opt stack 24
 18332                           
 18333                           ;incstack = 0
 18334  004A4E  505C               	movf	___ftsub@f2,w,c
 18335  004A50  105D               	iorwf	___ftsub@f2+1,w,c
 18336  004A52  105E               	iorwf	___ftsub@f2+2,w,c
 18337  004A54  B4D8               	btfsc	status,2,c
 18338  004A56  D007               	goto	l9372
 18339  004A58  0E00               	movlw	0
 18340  004A5A  1A5C               	xorwf	___ftsub@f2,f,c
 18341  004A5C  0E00               	movlw	0
 18342  004A5E  1A5D               	xorwf	___ftsub@f2+1,f,c
 18343  004A60  0E80               	movlw	128
 18344  004A62  1A5E               	xorwf	___ftsub@f2+2,f,c
 18345  004A64  D000               	goto	l9372
 18346  004A66                     l9372:
 18347  004A66  C059  F04D         	movff	___ftsub@f1,___ftadd@f1
 18348  004A6A  C05A  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 18349  004A6E  C05B  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 18350  004A72  C05C  F050         	movff	___ftsub@f2,___ftadd@f2
 18351  004A76  C05D  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 18352  004A7A  C05E  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 18353  004A7E  EC21  F010         	call	___ftadd	;wreg free
 18354  004A82  C04D  F059         	movff	?___ftadd,?___ftsub
 18355  004A86  C04E  F05A         	movff	?___ftadd+1,?___ftsub+1
 18356  004A8A  C04F  F05B         	movff	?___ftadd+2,?___ftsub+2
 18357  004A8E  D000               	goto	l2010
 18358  004A90                     l2010:
 18359  004A90  0012               	return		;funcret
 18360  004A92                     __end_of___ftsub:
 18361                           	opt stack 0
 18362                           tblptru	equ	0xFF8
 18363                           tblptrh	equ	0xFF7
 18364                           tblptrl	equ	0xFF6
 18365                           tablat	equ	0xFF5
 18366                           prodh	equ	0xFF4
 18367                           prodl	equ	0xFF3
 18368                           intcon	equ	0xFF2
 18369                           intcon2	equ	0xFF1
 18370                           postinc0	equ	0xFEE
 18371                           wreg	equ	0xFE8
 18372                           postdec1	equ	0xFE5
 18373                           fsr1l	equ	0xFE1
 18374                           indf2	equ	0xFDF
 18375                           postinc2	equ	0xFDE
 18376                           postdec2	equ	0xFDD
 18377                           fsr2h	equ	0xFDA
 18378                           fsr2l	equ	0xFD9
 18379                           status	equ	0xFD8
 18380                           
 18381 ;; *************** function ___ftadd *****************
 18382 ;; Defined at:
 18383 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 18384 ;; Parameters:    Size  Location     Type
 18385 ;;  f1              3   76[COMRAM] float 
 18386 ;;  f2              3   79[COMRAM] float 
 18387 ;; Auto vars:     Size  Location     Type
 18388 ;;  exp1            1   87[COMRAM] unsigned char 
 18389 ;;  exp2            1   86[COMRAM] unsigned char 
 18390 ;;  sign            1   85[COMRAM] unsigned char 
 18391 ;; Return value:  Size  Location     Type
 18392 ;;                  3   76[COMRAM] float 
 18393 ;; Registers used:
 18394 ;;		wreg, status,2, status,0, cstack
 18395 ;; Tracked objects:
 18396 ;;		On entry : 0/0
 18397 ;;		On exit  : 0/0
 18398 ;;		Unchanged: 0/0
 18399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18400 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18401 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18402 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18403 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;Total ram usage:       12 bytes
 18405 ;; Hardware stack levels used:    1
 18406 ;; Hardware stack levels required when called:    4
 18407 ;; This function calls:
 18408 ;;		___ftpack
 18409 ;; This function is called by:
 18410 ;;		_printf
 18411 ;;		___ftsub
 18412 ;; This function uses a non-reentrant model
 18413 ;;
 18414                           
 18415                           	psect	text89
 18416  002042                     __ptext89:
 18417                           	opt stack 0
 18418  002042                     ___ftadd:
 18419                           	opt stack 24
 18420                           
 18421                           ;incstack = 0
 18422  002042  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 18423  002046  6A54               	clrf	(??___ftadd+1)& (0+255),c
 18424  002048  6A55               	clrf	(??___ftadd+2)& (0+255),c
 18425  00204A  344E               	rlcf	___ftadd@f1+1,w,c
 18426  00204C  3653               	rlcf	??___ftadd& (0+255),f,c
 18427  00204E  E301               	bnc	u6921
 18428  002050  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 18429  002052                     u6921:
 18430  002052  5053               	movf	??___ftadd,w,c
 18431  002054  6E58               	movwf	___ftadd@exp1,c
 18432  002056  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 18433  00205A  6A54               	clrf	(??___ftadd+1)& (0+255),c
 18434  00205C  6A55               	clrf	(??___ftadd+2)& (0+255),c
 18435  00205E  3451               	rlcf	___ftadd@f2+1,w,c
 18436  002060  3653               	rlcf	??___ftadd& (0+255),f,c
 18437  002062  E301               	bnc	u6931
 18438  002064  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 18439  002066                     u6931:
 18440  002066  5053               	movf	??___ftadd,w,c
 18441  002068  6E57               	movwf	___ftadd@exp2,c
 18442  00206A  5058               	movf	___ftadd@exp1,w,c
 18443  00206C  B4D8               	btfsc	status,2,c
 18444  00206E  D00B               	goto	l1929
 18445  002070  5057               	movf	___ftadd@exp2,w,c
 18446  002072  5C58               	subwf	___ftadd@exp1,w,c
 18447  002074  B0D8               	btfsc	status,0,c
 18448  002076  D00E               	goto	l8842
 18449  002078  5058               	movf	___ftadd@exp1,w,c
 18450  00207A  0800               	sublw	0
 18451  00207C  2457               	addwf	___ftadd@exp2,w,c
 18452  00207E  6E53               	movwf	??___ftadd& (0+255),c
 18453  002080  0E18               	movlw	24
 18454  002082  6453               	cpfsgt	??___ftadd,c
 18455  002084  D007               	goto	l8842
 18456  002086                     l1929:
 18457  002086  C050  F04D         	movff	___ftadd@f2,?___ftadd
 18458  00208A  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 18459  00208E  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 18460  002092  D0B8               	goto	l1930
 18461  002094                     l8842:
 18462  002094  5057               	movf	___ftadd@exp2,w,c
 18463  002096  B4D8               	btfsc	status,2,c
 18464  002098  D00B               	goto	l1933
 18465  00209A  5058               	movf	___ftadd@exp1,w,c
 18466  00209C  5C57               	subwf	___ftadd@exp2,w,c
 18467  00209E  B0D8               	btfsc	status,0,c
 18468  0020A0  D00E               	goto	l8848
 18469  0020A2  5057               	movf	___ftadd@exp2,w,c
 18470  0020A4  0800               	sublw	0
 18471  0020A6  2458               	addwf	___ftadd@exp1,w,c
 18472  0020A8  6E53               	movwf	??___ftadd& (0+255),c
 18473  0020AA  0E18               	movlw	24
 18474  0020AC  6453               	cpfsgt	??___ftadd,c
 18475  0020AE  D007               	goto	l8848
 18476  0020B0                     l1933:
 18477  0020B0  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 18478  0020B4  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 18479  0020B8  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 18480  0020BC  D0A3               	goto	l1930
 18481  0020BE                     l8848:
 18482  0020BE  0E06               	movlw	6
 18483  0020C0  6E56               	movwf	___ftadd@sign,c
 18484  0020C2  AE4F               	btfss	___ftadd@f1+2,7,c
 18485  0020C4  D002               	goto	l8854
 18486  0020C6  8E56               	bsf	___ftadd@sign,7,c
 18487  0020C8  D000               	goto	l8854
 18488  0020CA                     l8854:
 18489  0020CA  BE52               	btfsc	___ftadd@f2+2,7,c
 18490  0020CC  8C56               	bsf	___ftadd@sign,6,c
 18491  0020CE  8E4E               	bsf	___ftadd@f1+1,7,c
 18492  0020D0  0EFF               	movlw	255
 18493  0020D2  164D               	andwf	___ftadd@f1,f,c
 18494  0020D4  0EFF               	movlw	255
 18495  0020D6  164E               	andwf	___ftadd@f1+1,f,c
 18496  0020D8  0E00               	movlw	0
 18497  0020DA  164F               	andwf	___ftadd@f1+2,f,c
 18498  0020DC  8E51               	bsf	___ftadd@f2+1,7,c
 18499  0020DE  0EFF               	movlw	255
 18500  0020E0  1650               	andwf	___ftadd@f2,f,c
 18501  0020E2  0EFF               	movlw	255
 18502  0020E4  1651               	andwf	___ftadd@f2+1,f,c
 18503  0020E6  0E00               	movlw	0
 18504  0020E8  1652               	andwf	___ftadd@f2+2,f,c
 18505  0020EA  5057               	movf	___ftadd@exp2,w,c
 18506  0020EC  5C58               	subwf	___ftadd@exp1,w,c
 18507  0020EE  B0D8               	btfsc	status,0,c
 18508  0020F0  D01E               	goto	l8874
 18509  0020F2                     l8864:
 18510  0020F2  90D8               	bcf	status,0,c
 18511  0020F4  3650               	rlcf	___ftadd@f2,f,c
 18512  0020F6  3651               	rlcf	___ftadd@f2+1,f,c
 18513  0020F8  3652               	rlcf	___ftadd@f2+2,f,c
 18514  0020FA  0657               	decf	___ftadd@exp2,f,c
 18515  0020FC  5058               	movf	___ftadd@exp1,w,c
 18516  0020FE  1857               	xorwf	___ftadd@exp2,w,c
 18517  002100  B4D8               	btfsc	status,2,c
 18518  002102  D00F               	goto	l8872
 18519  002104  0656               	decf	___ftadd@sign,f,c
 18520  002106  C056  F053         	movff	___ftadd@sign,??___ftadd
 18521  00210A  0E07               	movlw	7
 18522  00210C  1653               	andwf	??___ftadd,f,c
 18523  00210E  B4D8               	btfsc	status,2,c
 18524  002110  D008               	goto	l8872
 18525  002112  D7EF               	goto	l8864
 18526  002114  D006               	goto	l8872
 18527  002116                     l8870:
 18528  002116  90D8               	bcf	status,0,c
 18529  002118  324F               	rrcf	___ftadd@f1+2,f,c
 18530  00211A  324E               	rrcf	___ftadd@f1+1,f,c
 18531  00211C  324D               	rrcf	___ftadd@f1,f,c
 18532  00211E  2A58               	incf	___ftadd@exp1,f,c
 18533  002120  D000               	goto	l8872
 18534  002122                     l8872:
 18535  002122  5057               	movf	___ftadd@exp2,w,c
 18536  002124  1858               	xorwf	___ftadd@exp1,w,c
 18537  002126  B4D8               	btfsc	status,2,c
 18538  002128  D024               	goto	l1944
 18539  00212A  D7F5               	goto	l8870
 18540  00212C  D022               	goto	l1944
 18541  00212E                     l8874:
 18542  00212E  5058               	movf	___ftadd@exp1,w,c
 18543  002130  5C57               	subwf	___ftadd@exp2,w,c
 18544  002132  B0D8               	btfsc	status,0,c
 18545  002134  D01E               	goto	l1944
 18546  002136                     l8876:
 18547  002136  90D8               	bcf	status,0,c
 18548  002138  364D               	rlcf	___ftadd@f1,f,c
 18549  00213A  364E               	rlcf	___ftadd@f1+1,f,c
 18550  00213C  364F               	rlcf	___ftadd@f1+2,f,c
 18551  00213E  0658               	decf	___ftadd@exp1,f,c
 18552  002140  5058               	movf	___ftadd@exp1,w,c
 18553  002142  1857               	xorwf	___ftadd@exp2,w,c
 18554  002144  B4D8               	btfsc	status,2,c
 18555  002146  D00F               	goto	l8884
 18556  002148  0656               	decf	___ftadd@sign,f,c
 18557  00214A  C056  F053         	movff	___ftadd@sign,??___ftadd
 18558  00214E  0E07               	movlw	7
 18559  002150  1653               	andwf	??___ftadd,f,c
 18560  002152  B4D8               	btfsc	status,2,c
 18561  002154  D008               	goto	l8884
 18562  002156  D7EF               	goto	l8876
 18563  002158  D006               	goto	l8884
 18564  00215A                     l8882:
 18565  00215A  90D8               	bcf	status,0,c
 18566  00215C  3252               	rrcf	___ftadd@f2+2,f,c
 18567  00215E  3251               	rrcf	___ftadd@f2+1,f,c
 18568  002160  3250               	rrcf	___ftadd@f2,f,c
 18569  002162  2A57               	incf	___ftadd@exp2,f,c
 18570  002164  D000               	goto	l8884
 18571  002166                     l8884:
 18572  002166  5057               	movf	___ftadd@exp2,w,c
 18573  002168  1858               	xorwf	___ftadd@exp1,w,c
 18574  00216A  B4D8               	btfsc	status,2,c
 18575  00216C  D002               	goto	l1944
 18576  00216E  D7F5               	goto	l8882
 18577  002170  D000               	goto	l1944
 18578  002172                     l1944:
 18579  002172  AE56               	btfss	___ftadd@sign,7,c
 18580  002174  D00C               	goto	l1953
 18581  002176  0EFF               	movlw	255
 18582  002178  1A4D               	xorwf	___ftadd@f1,f,c
 18583  00217A  0EFF               	movlw	255
 18584  00217C  1A4E               	xorwf	___ftadd@f1+1,f,c
 18585  00217E  0EFF               	movlw	255
 18586  002180  1A4F               	xorwf	___ftadd@f1+2,f,c
 18587  002182  0E01               	movlw	1
 18588  002184  264D               	addwf	___ftadd@f1,f,c
 18589  002186  0E00               	movlw	0
 18590  002188  224E               	addwfc	___ftadd@f1+1,f,c
 18591  00218A  0E00               	movlw	0
 18592  00218C  224F               	addwfc	___ftadd@f1+2,f,c
 18593  00218E                     l1953:
 18594  00218E  AC56               	btfss	___ftadd@sign,6,c
 18595  002190  D00D               	goto	l8890
 18596  002192  0EFF               	movlw	255
 18597  002194  1A50               	xorwf	___ftadd@f2,f,c
 18598  002196  0EFF               	movlw	255
 18599  002198  1A51               	xorwf	___ftadd@f2+1,f,c
 18600  00219A  0EFF               	movlw	255
 18601  00219C  1A52               	xorwf	___ftadd@f2+2,f,c
 18602  00219E  0E01               	movlw	1
 18603  0021A0  2650               	addwf	___ftadd@f2,f,c
 18604  0021A2  0E00               	movlw	0
 18605  0021A4  2251               	addwfc	___ftadd@f2+1,f,c
 18606  0021A6  0E00               	movlw	0
 18607  0021A8  2252               	addwfc	___ftadd@f2+2,f,c
 18608  0021AA  D000               	goto	l8890
 18609  0021AC                     l8890:
 18610  0021AC  0E00               	movlw	0
 18611  0021AE  6E56               	movwf	___ftadd@sign,c
 18612  0021B0  504D               	movf	___ftadd@f1,w,c
 18613  0021B2  2650               	addwf	___ftadd@f2,f,c
 18614  0021B4  504E               	movf	___ftadd@f1+1,w,c
 18615  0021B6  2251               	addwfc	___ftadd@f2+1,f,c
 18616  0021B8  504F               	movf	___ftadd@f1+2,w,c
 18617  0021BA  2252               	addwfc	___ftadd@f2+2,f,c
 18618  0021BC  AE52               	btfss	___ftadd@f2+2,7,c
 18619  0021BE  D00F               	goto	l8900
 18620  0021C0  0EFF               	movlw	255
 18621  0021C2  1A50               	xorwf	___ftadd@f2,f,c
 18622  0021C4  0EFF               	movlw	255
 18623  0021C6  1A51               	xorwf	___ftadd@f2+1,f,c
 18624  0021C8  0EFF               	movlw	255
 18625  0021CA  1A52               	xorwf	___ftadd@f2+2,f,c
 18626  0021CC  0E01               	movlw	1
 18627  0021CE  2650               	addwf	___ftadd@f2,f,c
 18628  0021D0  0E00               	movlw	0
 18629  0021D2  2251               	addwfc	___ftadd@f2+1,f,c
 18630  0021D4  0E00               	movlw	0
 18631  0021D6  2252               	addwfc	___ftadd@f2+2,f,c
 18632  0021D8  0E01               	movlw	1
 18633  0021DA  6E56               	movwf	___ftadd@sign,c
 18634  0021DC  D000               	goto	l8900
 18635  0021DE                     l8900:
 18636  0021DE  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 18637  0021E2  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 18638  0021E6  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 18639  0021EA  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 18640  0021EE  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 18641  0021F2  EC12  F01C         	call	___ftpack	;wreg free
 18642  0021F6  C011  F04D         	movff	?___ftpack,?___ftadd
 18643  0021FA  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 18644  0021FE  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 18645  002202  D000               	goto	l1930
 18646  002204                     l1930:
 18647  002204  0012               	return		;funcret
 18648  002206                     __end_of___ftadd:
 18649                           	opt stack 0
 18650                           tblptru	equ	0xFF8
 18651                           tblptrh	equ	0xFF7
 18652                           tblptrl	equ	0xFF6
 18653                           tablat	equ	0xFF5
 18654                           prodh	equ	0xFF4
 18655                           prodl	equ	0xFF3
 18656                           intcon	equ	0xFF2
 18657                           intcon2	equ	0xFF1
 18658                           postinc0	equ	0xFEE
 18659                           wreg	equ	0xFE8
 18660                           postdec1	equ	0xFE5
 18661                           fsr1l	equ	0xFE1
 18662                           indf2	equ	0xFDF
 18663                           postinc2	equ	0xFDE
 18664                           postdec2	equ	0xFDD
 18665                           fsr2h	equ	0xFDA
 18666                           fsr2l	equ	0xFD9
 18667                           status	equ	0xFD8
 18668                           
 18669 ;; *************** function ___ftpack *****************
 18670 ;; Defined at:
 18671 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;  arg             3   16[COMRAM] unsigned um
 18674 ;;  exp             1   19[COMRAM] unsigned char 
 18675 ;;  sign            1   20[COMRAM] unsigned char 
 18676 ;; Auto vars:     Size  Location     Type
 18677 ;;		None
 18678 ;; Return value:  Size  Location     Type
 18679 ;;                  3   16[COMRAM] float 
 18680 ;; Registers used:
 18681 ;;		wreg, status,2, status,0
 18682 ;; Tracked objects:
 18683 ;;		On entry : 0/0
 18684 ;;		On exit  : 0/0
 18685 ;;		Unchanged: 0/0
 18686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18687 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18689 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;Total ram usage:        8 bytes
 18692 ;; Hardware stack levels used:    1
 18693 ;; Hardware stack levels required when called:    3
 18694 ;; This function calls:
 18695 ;;		Nothing
 18696 ;; This function is called by:
 18697 ;;		___awtoft
 18698 ;;		___ftadd
 18699 ;;		___ftdiv
 18700 ;;		___ftmul
 18701 ;;		___lbtoft
 18702 ;;		___lltoft
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           	psect	text90
 18707  003824                     __ptext90:
 18708                           	opt stack 0
 18709  003824                     ___ftpack:
 18710                           	opt stack 25
 18711                           
 18712                           ;incstack = 0
 18713  003824  5014               	movf	___ftpack@exp,w,c
 18714  003826  B4D8               	btfsc	status,2,c
 18715  003828  D005               	goto	l8788
 18716  00382A  5011               	movf	___ftpack@arg,w,c
 18717  00382C  1012               	iorwf	___ftpack@arg+1,w,c
 18718  00382E  1013               	iorwf	___ftpack@arg+2,w,c
 18719  003830  A4D8               	btfss	status,2,c
 18720  003832  D00E               	goto	l8794
 18721  003834                     l8788:
 18722  003834  0E00               	movlw	0
 18723  003836  6E11               	movwf	?___ftpack,c
 18724  003838  0E00               	movlw	0
 18725  00383A  6E12               	movwf	?___ftpack+1,c
 18726  00383C  0E00               	movlw	0
 18727  00383E  6E13               	movwf	?___ftpack+2,c
 18728  003840  D053               	goto	l1889
 18729  003842  D006               	goto	l8794
 18730  003844                     l8792:
 18731  003844  2A14               	incf	___ftpack@exp,f,c
 18732  003846  90D8               	bcf	status,0,c
 18733  003848  3213               	rrcf	___ftpack@arg+2,f,c
 18734  00384A  3212               	rrcf	___ftpack@arg+1,f,c
 18735  00384C  3211               	rrcf	___ftpack@arg,f,c
 18736  00384E  D000               	goto	l8794
 18737  003850                     l8794:
 18738  003850  0E00               	movlw	0
 18739  003852  1411               	andwf	___ftpack@arg,w,c
 18740  003854  6E16               	movwf	??___ftpack& (0+255),c
 18741  003856  0E00               	movlw	0
 18742  003858  1412               	andwf	___ftpack@arg+1,w,c
 18743  00385A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 18744  00385C  0EFE               	movlw	254
 18745  00385E  1413               	andwf	___ftpack@arg+2,w,c
 18746  003860  6E18               	movwf	(??___ftpack+2)& (0+255),c
 18747  003862  5016               	movf	??___ftpack,w,c
 18748  003864  1017               	iorwf	??___ftpack+1,w,c
 18749  003866  1018               	iorwf	??___ftpack+2,w,c
 18750  003868  B4D8               	btfsc	status,2,c
 18751  00386A  D00E               	goto	l8800
 18752  00386C  D7EB               	goto	l8792
 18753  00386E  D00C               	goto	l8800
 18754  003870                     l8796:
 18755  003870  2A14               	incf	___ftpack@exp,f,c
 18756  003872  0E01               	movlw	1
 18757  003874  2611               	addwf	___ftpack@arg,f,c
 18758  003876  0E00               	movlw	0
 18759  003878  2212               	addwfc	___ftpack@arg+1,f,c
 18760  00387A  0E00               	movlw	0
 18761  00387C  2213               	addwfc	___ftpack@arg+2,f,c
 18762  00387E  90D8               	bcf	status,0,c
 18763  003880  3213               	rrcf	___ftpack@arg+2,f,c
 18764  003882  3212               	rrcf	___ftpack@arg+1,f,c
 18765  003884  3211               	rrcf	___ftpack@arg,f,c
 18766  003886  D000               	goto	l8800
 18767  003888                     l8800:
 18768  003888  0E00               	movlw	0
 18769  00388A  1411               	andwf	___ftpack@arg,w,c
 18770  00388C  6E16               	movwf	??___ftpack& (0+255),c
 18771  00388E  0E00               	movlw	0
 18772  003890  1412               	andwf	___ftpack@arg+1,w,c
 18773  003892  6E17               	movwf	(??___ftpack+1)& (0+255),c
 18774  003894  0EFF               	movlw	255
 18775  003896  1413               	andwf	___ftpack@arg+2,w,c
 18776  003898  6E18               	movwf	(??___ftpack+2)& (0+255),c
 18777  00389A  5016               	movf	??___ftpack,w,c
 18778  00389C  1017               	iorwf	??___ftpack+1,w,c
 18779  00389E  1018               	iorwf	??___ftpack+2,w,c
 18780  0038A0  B4D8               	btfsc	status,2,c
 18781  0038A2  D008               	goto	l8804
 18782  0038A4  D7E5               	goto	l8796
 18783  0038A6  D006               	goto	l8804
 18784  0038A8                     l8802:
 18785  0038A8  0614               	decf	___ftpack@exp,f,c
 18786  0038AA  90D8               	bcf	status,0,c
 18787  0038AC  3611               	rlcf	___ftpack@arg,f,c
 18788  0038AE  3612               	rlcf	___ftpack@arg+1,f,c
 18789  0038B0  3613               	rlcf	___ftpack@arg+2,f,c
 18790  0038B2  D000               	goto	l8804
 18791  0038B4                     l8804:
 18792  0038B4  BE12               	btfsc	___ftpack@arg+1,7,c
 18793  0038B6  D004               	goto	l1900
 18794  0038B8  0E02               	movlw	2
 18795  0038BA  6014               	cpfslt	___ftpack@exp,c
 18796  0038BC  D7F5               	goto	l8802
 18797  0038BE  D000               	goto	l1900
 18798  0038C0                     l1900:
 18799  0038C0  B014               	btfsc	___ftpack@exp,0,c
 18800  0038C2  D002               	goto	l8810
 18801  0038C4  9E12               	bcf	___ftpack@arg+1,7,c
 18802  0038C6  D000               	goto	l8810
 18803  0038C8                     l8810:
 18804  0038C8  90D8               	bcf	status,0,c
 18805  0038CA  3214               	rrcf	___ftpack@exp,f,c
 18806  0038CC  5014               	movf	___ftpack@exp,w,c
 18807  0038CE  1213               	iorwf	___ftpack@arg+2,f,c
 18808  0038D0  5015               	movf	___ftpack@sign,w,c
 18809  0038D2  B4D8               	btfsc	status,2,c
 18810  0038D4  D002               	goto	l8816
 18811  0038D6  8E13               	bsf	___ftpack@arg+2,7,c
 18812  0038D8  D000               	goto	l8816
 18813  0038DA                     l8816:
 18814  0038DA  C011  F011         	movff	___ftpack@arg,?___ftpack
 18815  0038DE  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 18816  0038E2  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 18817  0038E6  D000               	goto	l1889
 18818  0038E8                     l1889:
 18819  0038E8  0012               	return		;funcret
 18820  0038EA                     __end_of___ftpack:
 18821                           	opt stack 0
 18822                           tblptru	equ	0xFF8
 18823                           tblptrh	equ	0xFF7
 18824                           tblptrl	equ	0xFF6
 18825                           tablat	equ	0xFF5
 18826                           prodh	equ	0xFF4
 18827                           prodl	equ	0xFF3
 18828                           intcon	equ	0xFF2
 18829                           intcon2	equ	0xFF1
 18830                           postinc0	equ	0xFEE
 18831                           wreg	equ	0xFE8
 18832                           postdec1	equ	0xFE5
 18833                           fsr1l	equ	0xFE1
 18834                           indf2	equ	0xFDF
 18835                           postinc2	equ	0xFDE
 18836                           postdec2	equ	0xFDD
 18837                           fsr2h	equ	0xFDA
 18838                           fsr2l	equ	0xFD9
 18839                           status	equ	0xFD8
 18840                           
 18841 ;; *************** function ___ftneg *****************
 18842 ;; Defined at:
 18843 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 18844 ;; Parameters:    Size  Location     Type
 18845 ;;  f1              3   16[COMRAM] float 
 18846 ;; Auto vars:     Size  Location     Type
 18847 ;;		None
 18848 ;; Return value:  Size  Location     Type
 18849 ;;                  3   16[COMRAM] float 
 18850 ;; Registers used:
 18851 ;;		wreg, status,2, status,0
 18852 ;; Tracked objects:
 18853 ;;		On entry : 0/0
 18854 ;;		On exit  : 0/0
 18855 ;;		Unchanged: 0/0
 18856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18857 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18860 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18861 ;;Total ram usage:        3 bytes
 18862 ;; Hardware stack levels used:    1
 18863 ;; Hardware stack levels required when called:    3
 18864 ;; This function calls:
 18865 ;;		Nothing
 18866 ;; This function is called by:
 18867 ;;		_printf
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           	psect	text91
 18872  004DFC                     __ptext91:
 18873                           	opt stack 0
 18874  004DFC                     ___ftneg:
 18875                           	opt stack 26
 18876                           
 18877                           ;incstack = 0
 18878  004DFC  5011               	movf	___ftneg@f1,w,c
 18879  004DFE  1012               	iorwf	___ftneg@f1+1,w,c
 18880  004E00  1013               	iorwf	___ftneg@f1+2,w,c
 18881  004E02  B4D8               	btfsc	status,2,c
 18882  004E04  D006               	goto	l2003
 18883  004E06  0E00               	movlw	0
 18884  004E08  1A11               	xorwf	___ftneg@f1,f,c
 18885  004E0A  0E00               	movlw	0
 18886  004E0C  1A12               	xorwf	___ftneg@f1+1,f,c
 18887  004E0E  0E80               	movlw	128
 18888  004E10  1A13               	xorwf	___ftneg@f1+2,f,c
 18889  004E12                     l2003:
 18890  004E12  C011  F011         	movff	___ftneg@f1,?___ftneg
 18891  004E16  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 18892  004E1A  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 18893  004E1E  0012               	return		;funcret
 18894  004E20                     __end_of___ftneg:
 18895                           	opt stack 0
 18896                           tblptru	equ	0xFF8
 18897                           tblptrh	equ	0xFF7
 18898                           tblptrl	equ	0xFF6
 18899                           tablat	equ	0xFF5
 18900                           prodh	equ	0xFF4
 18901                           prodl	equ	0xFF3
 18902                           intcon	equ	0xFF2
 18903                           intcon2	equ	0xFF1
 18904                           postinc0	equ	0xFEE
 18905                           wreg	equ	0xFE8
 18906                           postdec1	equ	0xFE5
 18907                           fsr1l	equ	0xFE1
 18908                           indf2	equ	0xFDF
 18909                           postinc2	equ	0xFDE
 18910                           postdec2	equ	0xFDD
 18911                           fsr2h	equ	0xFDA
 18912                           fsr2l	equ	0xFD9
 18913                           status	equ	0xFD8
 18914                           
 18915 ;; *************** function ___ftge *****************
 18916 ;; Defined at:
 18917 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 18918 ;; Parameters:    Size  Location     Type
 18919 ;;  ff1             3   16[COMRAM] float 
 18920 ;;  ff2             3   19[COMRAM] float 
 18921 ;; Auto vars:     Size  Location     Type
 18922 ;;		None
 18923 ;; Return value:  Size  Location     Type
 18924 ;;		None               void
 18925 ;; Registers used:
 18926 ;;		wreg, status,2, status,0
 18927 ;; Tracked objects:
 18928 ;;		On entry : 0/0
 18929 ;;		On exit  : 0/0
 18930 ;;		Unchanged: 0/0
 18931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18932 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18934 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;Total ram usage:        9 bytes
 18937 ;; Hardware stack levels used:    1
 18938 ;; Hardware stack levels required when called:    3
 18939 ;; This function calls:
 18940 ;;		Nothing
 18941 ;; This function is called by:
 18942 ;;		_Test_Alarm
 18943 ;;		_printf
 18944 ;; This function uses a non-reentrant model
 18945 ;;
 18946                           
 18947                           	psect	text92
 18948  003EF0                     __ptext92:
 18949                           	opt stack 0
 18950  003EF0                     ___ftge:
 18951                           	opt stack 26
 18952                           
 18953                           ;incstack = 0
 18954  003EF0  AE13               	btfss	___ftge@ff1+2,7,c
 18955  003EF2  D017               	goto	l9380
 18956  003EF4  C011  F017         	movff	___ftge@ff1,??___ftge
 18957  003EF8  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 18958  003EFC  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 18959  003F00  1E17               	comf	??___ftge,f,c
 18960  003F02  1E18               	comf	??___ftge+1,f,c
 18961  003F04  1E19               	comf	??___ftge+2,f,c
 18962  003F06  2A17               	incf	??___ftge,f,c
 18963  003F08  0E00               	movlw	0
 18964  003F0A  2218               	addwfc	??___ftge+1,f,c
 18965  003F0C  2219               	addwfc	??___ftge+2,f,c
 18966  003F0E  0E00               	movlw	0
 18967  003F10  2417               	addwf	??___ftge,w,c
 18968  003F12  6E11               	movwf	___ftge@ff1,c
 18969  003F14  0E00               	movlw	0
 18970  003F16  2018               	addwfc	??___ftge+1,w,c
 18971  003F18  6E12               	movwf	___ftge@ff1+1,c
 18972  003F1A  0E80               	movlw	128
 18973  003F1C  2019               	addwfc	??___ftge+2,w,c
 18974  003F1E  6E13               	movwf	___ftge@ff1+2,c
 18975  003F20  D000               	goto	l9380
 18976  003F22                     l9380:
 18977  003F22  AE16               	btfss	___ftge@ff2+2,7,c
 18978  003F24  D017               	goto	l9384
 18979  003F26  C014  F017         	movff	___ftge@ff2,??___ftge
 18980  003F2A  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 18981  003F2E  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 18982  003F32  1E17               	comf	??___ftge,f,c
 18983  003F34  1E18               	comf	??___ftge+1,f,c
 18984  003F36  1E19               	comf	??___ftge+2,f,c
 18985  003F38  2A17               	incf	??___ftge,f,c
 18986  003F3A  0E00               	movlw	0
 18987  003F3C  2218               	addwfc	??___ftge+1,f,c
 18988  003F3E  2219               	addwfc	??___ftge+2,f,c
 18989  003F40  0E00               	movlw	0
 18990  003F42  2417               	addwf	??___ftge,w,c
 18991  003F44  6E14               	movwf	___ftge@ff2,c
 18992  003F46  0E00               	movlw	0
 18993  003F48  2018               	addwfc	??___ftge+1,w,c
 18994  003F4A  6E15               	movwf	___ftge@ff2+1,c
 18995  003F4C  0E80               	movlw	128
 18996  003F4E  2019               	addwfc	??___ftge+2,w,c
 18997  003F50  6E16               	movwf	___ftge@ff2+2,c
 18998  003F52  D000               	goto	l9384
 18999  003F54                     l9384:
 19000  003F54  0E00               	movlw	0
 19001  003F56  1A11               	xorwf	___ftge@ff1,f,c
 19002  003F58  0E00               	movlw	0
 19003  003F5A  1A12               	xorwf	___ftge@ff1+1,f,c
 19004  003F5C  0E80               	movlw	128
 19005  003F5E  1A13               	xorwf	___ftge@ff1+2,f,c
 19006  003F60  0E00               	movlw	0
 19007  003F62  1A14               	xorwf	___ftge@ff2,f,c
 19008  003F64  0E00               	movlw	0
 19009  003F66  1A15               	xorwf	___ftge@ff2+1,f,c
 19010  003F68  0E80               	movlw	128
 19011  003F6A  1A16               	xorwf	___ftge@ff2+2,f,c
 19012  003F6C  5014               	movf	___ftge@ff2,w,c
 19013  003F6E  5C11               	subwf	___ftge@ff1,w,c
 19014  003F70  5015               	movf	___ftge@ff2+1,w,c
 19015  003F72  5812               	subwfb	___ftge@ff1+1,w,c
 19016  003F74  5016               	movf	___ftge@ff2+2,w,c
 19017  003F76  5813               	subwfb	___ftge@ff1+2,w,c
 19018  003F78  B0D8               	btfsc	status,0,c
 19019  003F7A  D002               	goto	l9390
 19020  003F7C  90D8               	bcf	status,0,c
 19021  003F7E  D002               	goto	l1987
 19022  003F80                     l9390:
 19023  003F80  80D8               	bsf	status,0,c
 19024  003F82  D000               	goto	l1987
 19025  003F84                     l1987:
 19026  003F84  0012               	return		;funcret
 19027  003F86                     __end_of___ftge:
 19028                           	opt stack 0
 19029                           tblptru	equ	0xFF8
 19030                           tblptrh	equ	0xFF7
 19031                           tblptrl	equ	0xFF6
 19032                           tablat	equ	0xFF5
 19033                           prodh	equ	0xFF4
 19034                           prodl	equ	0xFF3
 19035                           intcon	equ	0xFF2
 19036                           intcon2	equ	0xFF1
 19037                           postinc0	equ	0xFEE
 19038                           wreg	equ	0xFE8
 19039                           postdec1	equ	0xFE5
 19040                           fsr1l	equ	0xFE1
 19041                           indf2	equ	0xFDF
 19042                           postinc2	equ	0xFDE
 19043                           postdec2	equ	0xFDD
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function _drawtext *****************
 19049 ;; Defined at:
 19050 ;;		line 474 in file "ST7735_TFT.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;  x               1    wreg     unsigned char 
 19053 ;;  y               1   56[COMRAM] unsigned char 
 19054 ;;  _text           2   57[COMRAM] PTR unsigned char 
 19055 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 19056 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 19057 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 19058 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 19059 ;;		 -> tempC(4), 
 19060 ;;  color           2   59[COMRAM] unsigned int 
 19061 ;;  bg              2   61[COMRAM] unsigned int 
 19062 ;;  size            1   63[COMRAM] unsigned char 
 19063 ;; Auto vars:     Size  Location     Type
 19064 ;;  x               1   66[COMRAM] unsigned char 
 19065 ;;  i               2   69[COMRAM] unsigned int 
 19066 ;;  textsize        2   67[COMRAM] unsigned int 
 19067 ;;  cursor_x        1   72[COMRAM] unsigned char 
 19068 ;;  cursor_y        1   71[COMRAM] unsigned char 
 19069 ;; Return value:  Size  Location     Type
 19070 ;;		None               void
 19071 ;; Registers used:
 19072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19078 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19082 ;;Total ram usage:       17 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; Hardware stack levels required when called:    9
 19085 ;; This function calls:
 19086 ;;		_drawChar
 19087 ;;		_strlen
 19088 ;; This function is called by:
 19089 ;;		_Initialize_Screen
 19090 ;;		_Update_Screen
 19091 ;;		_Initialize_Setup_Alarm_Time_Screen
 19092 ;;		_Update_Setup_Alarm_Time_Screen
 19093 ;;		_Initialize_Setup_Heater_Screen
 19094 ;;		_Update_Setup_Heater_Screen
 19095 ;;		_Initialize_Setup_Time_Screen
 19096 ;;		_Update_Setup_Time_Screen
 19097 ;; This function uses a non-reentrant model
 19098 ;;
 19099                           
 19100                           	psect	text93
 19101  00358E                     __ptext93:
 19102                           	opt stack 0
 19103  00358E                     _drawtext:
 19104                           	opt stack 20
 19105                           
 19106                           ;incstack = 0
 19107                           ;drawtext@x stored from wreg
 19108  00358E  6E43               	movwf	drawtext@x,c
 19109                           
 19110                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 19111                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 19112                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 19113  003590  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 19114  003594  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 19115                           
 19116                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 19117  003598  C03A  F011         	movff	drawtext@_text,strlen@s
 19118  00359C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 19119  0035A0  EC87  F025         	call	_strlen	;wreg free
 19120  0035A4  C011  F044         	movff	?_strlen,drawtext@textsize
 19121  0035A8  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 19122                           
 19123                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 19124  0035AC  0E00               	movlw	0
 19125  0035AE  6E47               	movwf	drawtext@i+1,c
 19126  0035B0  0E00               	movlw	0
 19127  0035B2  6E46               	movwf	drawtext@i,c
 19128  0035B4  D056               	goto	l9844
 19129  0035B6                     l9818:
 19130                           
 19131                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 19132  0035B6  0100               	movlb	0	; () banked
 19133  0035B8  51B9               	movf	_wrap& (0+255),w,b
 19134  0035BA  0100               	movlb	0	; () banked
 19135  0035BC  B4D8               	btfsc	status,2,c
 19136  0035BE  D02C               	goto	l9834
 19137                           
 19138                           ; BSR set to: 0
 19139  0035C0  5040               	movf	drawtext@size,w,c
 19140  0035C2  0D05               	mullw	5
 19141  0035C4  5049               	movf	drawtext@cursor_x,w,c
 19142  0035C6  6E41               	movwf	??_drawtext& (0+255),c
 19143  0035C8  6A42               	clrf	(??_drawtext+1)& (0+255),c
 19144  0035CA  50F3               	movf	prodl,w,c
 19145  0035CC  2641               	addwf	??_drawtext,f,c
 19146  0035CE  50F4               	movf	prodh,w,c
 19147  0035D0  2242               	addwfc	??_drawtext+1,f,c
 19148  0035D2  BE42               	btfsc	??_drawtext+1,7,c
 19149  0035D4  D021               	goto	l9834
 19150  0035D6  5042               	movf	??_drawtext+1,w,c
 19151  0035D8  E104               	bnz	u8440
 19152  0035DA  0E81               	movlw	129
 19153  0035DC  5C41               	subwf	??_drawtext,w,c
 19154  0035DE  A0D8               	btfss	status,0,c
 19155  0035E0  D01B               	goto	l9834
 19156  0035E2                     u8440:
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;ST7735_TFT.c: 482: cursor_x = 0;
 19160  0035E2  0E00               	movlw	0
 19161  0035E4  6E49               	movwf	drawtext@cursor_x,c
 19162                           
 19163                           ; BSR set to: 0
 19164                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 19165  0035E6  5040               	movf	drawtext@size,w,c
 19166  0035E8  0D07               	mullw	7
 19167  0035EA  50F3               	movf	prodl,w,c
 19168  0035EC  2448               	addwf	drawtext@cursor_y,w,c
 19169  0035EE  0F03               	addlw	3
 19170  0035F0  6E48               	movwf	drawtext@cursor_y,c
 19171                           
 19172                           ; BSR set to: 0
 19173                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 19174  0035F2  0EA0               	movlw	160
 19175  0035F4  6448               	cpfsgt	drawtext@cursor_y,c
 19176  0035F6  D003               	goto	l9830
 19177                           
 19178                           ; BSR set to: 0
 19179  0035F8  0EA0               	movlw	160
 19180  0035FA  6E48               	movwf	drawtext@cursor_y,c
 19181  0035FC  D000               	goto	l9830
 19182  0035FE                     l9830:
 19183                           
 19184                           ; BSR set to: 0
 19185                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 19186  0035FE  5046               	movf	drawtext@i,w,c
 19187  003600  243A               	addwf	drawtext@_text,w,c
 19188  003602  6ED9               	movwf	fsr2l,c
 19189  003604  5047               	movf	drawtext@i+1,w,c
 19190  003606  203B               	addwfc	drawtext@_text+1,w,c
 19191  003608  6EDA               	movwf	fsr2h,c
 19192  00360A  0E20               	movlw	32
 19193  00360C  18DE               	xorwf	postinc2,w,c
 19194  00360E  B4D8               	btfsc	status,2,c
 19195  003610  D025               	goto	l9842
 19196  003612  D002               	goto	l9834
 19197                           
 19198                           ; BSR set to: 0
 19199  003614  D023               	goto	l9842
 19200                           
 19201                           ; BSR set to: 0
 19202  003616  D000               	goto	l9834
 19203  003618                     l9834:
 19204                           
 19205                           ; BSR set to: 0
 19206                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 19207  003618  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 19208  00361C  5046               	movf	drawtext@i,w,c
 19209  00361E  243A               	addwf	drawtext@_text,w,c
 19210  003620  6ED9               	movwf	fsr2l,c
 19211  003622  5047               	movf	drawtext@i+1,w,c
 19212  003624  203B               	addwfc	drawtext@_text+1,w,c
 19213  003626  6EDA               	movwf	fsr2h,c
 19214  003628  50DF               	movf	indf2,w,c
 19215  00362A  6E2F               	movwf	drawChar@c,c
 19216  00362C  C03C  F030         	movff	drawtext@color,drawChar@color
 19217  003630  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 19218  003634  C03E  F032         	movff	drawtext@bg,drawChar@bg
 19219  003638  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 19220  00363C  C040  F034         	movff	drawtext@size,drawChar@size
 19221  003640  5049               	movf	drawtext@cursor_x,w,c
 19222  003642  EC3D  F014         	call	_drawChar
 19223                           
 19224                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 19225  003646  5040               	movf	drawtext@size,w,c
 19226  003648  0D06               	mullw	6
 19227  00364A  50F3               	movf	prodl,w,c
 19228  00364C  2449               	addwf	drawtext@cursor_x,w,c
 19229  00364E  6E49               	movwf	drawtext@cursor_x,c
 19230                           
 19231                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 19232  003650  0E80               	movlw	128
 19233  003652  6449               	cpfsgt	drawtext@cursor_x,c
 19234  003654  D003               	goto	l9842
 19235  003656  0E80               	movlw	128
 19236  003658  6E49               	movwf	drawtext@cursor_x,c
 19237  00365A  D000               	goto	l9842
 19238  00365C                     l9842:
 19239  00365C  4A46               	infsnz	drawtext@i,f,c
 19240  00365E  2A47               	incf	drawtext@i+1,f,c
 19241  003660  D000               	goto	l9844
 19242  003662                     l9844:
 19243  003662  5044               	movf	drawtext@textsize,w,c
 19244  003664  5C46               	subwf	drawtext@i,w,c
 19245  003666  5045               	movf	drawtext@textsize+1,w,c
 19246  003668  5847               	subwfb	drawtext@i+1,w,c
 19247  00366A  A0D8               	btfss	status,0,c
 19248  00366C  D7A4               	goto	l9818
 19249  00366E  0012               	return		;funcret
 19250  003670                     __end_of_drawtext:
 19251                           	opt stack 0
 19252                           tblptru	equ	0xFF8
 19253                           tblptrh	equ	0xFF7
 19254                           tblptrl	equ	0xFF6
 19255                           tablat	equ	0xFF5
 19256                           prodh	equ	0xFF4
 19257                           prodl	equ	0xFF3
 19258                           intcon	equ	0xFF2
 19259                           intcon2	equ	0xFF1
 19260                           postinc0	equ	0xFEE
 19261                           wreg	equ	0xFE8
 19262                           postdec1	equ	0xFE5
 19263                           fsr1l	equ	0xFE1
 19264                           indf2	equ	0xFDF
 19265                           postinc2	equ	0xFDE
 19266                           postdec2	equ	0xFDD
 19267                           fsr2h	equ	0xFDA
 19268                           fsr2l	equ	0xFD9
 19269                           status	equ	0xFD8
 19270                           
 19271 ;; *************** function _strlen *****************
 19272 ;; Defined at:
 19273 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 19274 ;; Parameters:    Size  Location     Type
 19275 ;;  s               2   16[COMRAM] PTR const unsigned char 
 19276 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 19277 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 19278 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 19279 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 19280 ;;		 -> tempC(4), 
 19281 ;; Auto vars:     Size  Location     Type
 19282 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 19283 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 19284 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 19285 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 19286 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 19287 ;;		 -> tempC(4), 
 19288 ;; Return value:  Size  Location     Type
 19289 ;;                  2   16[COMRAM] unsigned int 
 19290 ;; Registers used:
 19291 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19292 ;; Tracked objects:
 19293 ;;		On entry : 0/0
 19294 ;;		On exit  : 0/0
 19295 ;;		Unchanged: 0/0
 19296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19301 ;;Total ram usage:        6 bytes
 19302 ;; Hardware stack levels used:    1
 19303 ;; Hardware stack levels required when called:    3
 19304 ;; This function calls:
 19305 ;;		Nothing
 19306 ;; This function is called by:
 19307 ;;		_drawtext
 19308 ;; This function uses a non-reentrant model
 19309 ;;
 19310                           
 19311                           	psect	text94
 19312  004B0E                     __ptext94:
 19313                           	opt stack 0
 19314  004B0E                     _strlen:
 19315                           	opt stack 25
 19316                           
 19317                           ;incstack = 0
 19318  004B0E  C011  F015         	movff	strlen@s,strlen@cp
 19319  004B12  C012  F016         	movff	strlen@s+1,strlen@cp+1
 19320  004B16  D003               	goto	l6080
 19321  004B18                     l6078:
 19322  004B18  4A15               	infsnz	strlen@cp,f,c
 19323  004B1A  2A16               	incf	strlen@cp+1,f,c
 19324  004B1C  D000               	goto	l6080
 19325  004B1E                     l6080:
 19326  004B1E  C015  FFD9         	movff	strlen@cp,fsr2l
 19327  004B22  C016  FFDA         	movff	strlen@cp+1,fsr2h
 19328  004B26  50DF               	movf	indf2,w,c
 19329  004B28  A4D8               	btfss	status,2,c
 19330  004B2A  D7F6               	goto	l6078
 19331  004B2C  C011  F013         	movff	strlen@s,??_strlen
 19332  004B30  C012  F014         	movff	strlen@s+1,??_strlen+1
 19333  004B34  1E13               	comf	??_strlen,f,c
 19334  004B36  1E14               	comf	??_strlen+1,f,c
 19335  004B38  4A13               	infsnz	??_strlen,f,c
 19336  004B3A  2A14               	incf	??_strlen+1,f,c
 19337  004B3C  5015               	movf	strlen@cp,w,c
 19338  004B3E  2413               	addwf	??_strlen,w,c
 19339  004B40  6E11               	movwf	?_strlen,c
 19340  004B42  5016               	movf	strlen@cp+1,w,c
 19341  004B44  2014               	addwfc	??_strlen+1,w,c
 19342  004B46  6E12               	movwf	?_strlen+1,c
 19343  004B48  D000               	goto	l2164
 19344  004B4A                     l2164:
 19345  004B4A  0012               	return		;funcret
 19346  004B4C                     __end_of_strlen:
 19347                           	opt stack 0
 19348                           tblptru	equ	0xFF8
 19349                           tblptrh	equ	0xFF7
 19350                           tblptrl	equ	0xFF6
 19351                           tablat	equ	0xFF5
 19352                           prodh	equ	0xFF4
 19353                           prodl	equ	0xFF3
 19354                           intcon	equ	0xFF2
 19355                           intcon2	equ	0xFF1
 19356                           postinc0	equ	0xFEE
 19357                           wreg	equ	0xFE8
 19358                           postdec1	equ	0xFE5
 19359                           fsr1l	equ	0xFE1
 19360                           indf2	equ	0xFDF
 19361                           postinc2	equ	0xFDE
 19362                           postdec2	equ	0xFDD
 19363                           fsr2h	equ	0xFDA
 19364                           fsr2l	equ	0xFD9
 19365                           status	equ	0xFD8
 19366                           
 19367 ;; *************** function _drawChar *****************
 19368 ;; Defined at:
 19369 ;;		line 447 in file "ST7735_TFT.c"
 19370 ;; Parameters:    Size  Location     Type
 19371 ;;  x               1    wreg     unsigned char 
 19372 ;;  y               1   45[COMRAM] unsigned char 
 19373 ;;  c               1   46[COMRAM] unsigned char 
 19374 ;;  color           2   47[COMRAM] unsigned int 
 19375 ;;  bg              2   49[COMRAM] unsigned int 
 19376 ;;  size            1   51[COMRAM] unsigned char 
 19377 ;; Auto vars:     Size  Location     Type
 19378 ;;  x               1   53[COMRAM] unsigned char 
 19379 ;;  line            1   52[COMRAM] unsigned char 
 19380 ;;  i               1   55[COMRAM] unsigned char 
 19381 ;;  j               1   54[COMRAM] unsigned char 
 19382 ;; Return value:  Size  Location     Type
 19383 ;;		None               void
 19384 ;; Registers used:
 19385 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19386 ;; Tracked objects:
 19387 ;;		On entry : 0/0
 19388 ;;		On exit  : 0/0
 19389 ;;		Unchanged: 0/0
 19390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19391 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19394 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19395 ;;Total ram usage:       11 bytes
 19396 ;; Hardware stack levels used:    1
 19397 ;; Hardware stack levels required when called:    8
 19398 ;; This function calls:
 19399 ;;		___wmul
 19400 ;;		_drawPixel
 19401 ;;		_fillRect
 19402 ;; This function is called by:
 19403 ;;		_drawtext
 19404 ;; This function uses a non-reentrant model
 19405 ;;
 19406                           
 19407                           	psect	text95
 19408  00287A                     __ptext95:
 19409                           	opt stack 0
 19410  00287A                     _drawChar:
 19411                           	opt stack 20
 19412                           
 19413                           ;incstack = 0
 19414                           ;drawChar@x stored from wreg
 19415  00287A  6E36               	movwf	drawChar@x,c
 19416                           
 19417                           ;ST7735_TFT.c: 449: char i, j;
 19418                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 19419  00287C  0E80               	movlw	128
 19420  00287E  6036               	cpfslt	drawChar@x,c
 19421  002880  D0A6               	goto	l1288
 19422  002882  0E9F               	movlw	159
 19423  002884  642E               	cpfsgt	drawChar@y,c
 19424  002886  D001               	goto	l9130
 19425                           
 19426                           ;ST7735_TFT.c: 451: return;
 19427  002888  D0A2               	goto	l1288
 19428  00288A                     l9130:
 19429                           
 19430                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 19431  00288A  5034               	movf	drawChar@size,w,c
 19432  00288C  A4D8               	btfss	status,2,c
 19433  00288E  D003               	goto	l9134
 19434  002890  0E01               	movlw	1
 19435  002892  6E34               	movwf	drawChar@size,c
 19436  002894  D000               	goto	l9134
 19437  002896                     l9134:
 19438                           
 19439                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 19440  002896  0E1F               	movlw	31
 19441  002898  642F               	cpfsgt	drawChar@c,c
 19442  00289A  D004               	goto	l9138
 19443  00289C  0E7E               	movlw	126
 19444  00289E  642F               	cpfsgt	drawChar@c,c
 19445  0028A0  D003               	goto	l1290
 19446  0028A2  D000               	goto	l9138
 19447  0028A4                     l9138:
 19448                           
 19449                           ;ST7735_TFT.c: 454: c = '?';
 19450  0028A4  0E3F               	movlw	63
 19451  0028A6  6E2F               	movwf	drawChar@c,c
 19452  0028A8                     l1290:
 19453                           
 19454                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 19455  0028A8  0E00               	movlw	0
 19456  0028AA  6E38               	movwf	drawChar@i,c
 19457  0028AC                     l9140:
 19458  0028AC  0E04               	movlw	4
 19459  0028AE  6438               	cpfsgt	drawChar@i,c
 19460  0028B0  D001               	goto	l9144
 19461  0028B2  D08D               	goto	l1288
 19462  0028B4                     l9144:
 19463                           
 19464                           ;ST7735_TFT.c: 456: unsigned char line;
 19465                           ;ST7735_TFT.c: 457: if(c < 'S')
 19466  0028B4  0E53               	movlw	83
 19467  0028B6  602F               	cpfslt	drawChar@c,c
 19468  0028B8  D015               	goto	l9148
 19469                           
 19470                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 19471  0028BA  0EE0               	movlw	224
 19472  0028BC  242F               	addwf	drawChar@c,w,c
 19473  0028BE  6E11               	movwf	___wmul@multiplier,c
 19474  0028C0  6A12               	clrf	___wmul@multiplier+1,c
 19475  0028C2  0EFF               	movlw	255
 19476  0028C4  2212               	addwfc	___wmul@multiplier+1,f,c
 19477  0028C6  0E00               	movlw	0
 19478  0028C8  6E14               	movwf	___wmul@multiplicand+1,c
 19479  0028CA  0E05               	movlw	5
 19480  0028CC  6E13               	movwf	___wmul@multiplicand,c
 19481  0028CE  ECC4  F026         	call	___wmul	;wreg free
 19482  0028D2  5038               	movf	drawChar@i,w,c
 19483  0028D4  2611               	addwf	?___wmul,f,c
 19484  0028D6  0E00               	movlw	0
 19485  0028D8  2212               	addwfc	?___wmul+1,f,c
 19486  0028DA  0E37               	movlw	low _font
 19487  0028DC  2411               	addwf	?___wmul,w,c
 19488  0028DE  6EF6               	movwf	tblptrl,c
 19489  0028E0  0EFC               	movlw	high _font
 19490  0028E2  D014               	goto	L20
 19491  0028E4                     l9148:
 19492                           
 19493                           ;ST7735_TFT.c: 459: else
 19494                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 19495  0028E4  0EAD               	movlw	173
 19496  0028E6  242F               	addwf	drawChar@c,w,c
 19497  0028E8  6E11               	movwf	___wmul@multiplier,c
 19498  0028EA  6A12               	clrf	___wmul@multiplier+1,c
 19499  0028EC  0EFF               	movlw	255
 19500  0028EE  2212               	addwfc	___wmul@multiplier+1,f,c
 19501  0028F0  0E00               	movlw	0
 19502  0028F2  6E14               	movwf	___wmul@multiplicand+1,c
 19503  0028F4  0E05               	movlw	5
 19504  0028F6  6E13               	movwf	___wmul@multiplicand,c
 19505  0028F8  ECC4  F026         	call	___wmul	;wreg free
 19506  0028FC  5038               	movf	drawChar@i,w,c
 19507  0028FE  2611               	addwf	?___wmul,f,c
 19508  002900  0E00               	movlw	0
 19509  002902  2212               	addwfc	?___wmul+1,f,c
 19510  002904  0E36               	movlw	low _font2
 19511  002906  2411               	addwf	?___wmul,w,c
 19512  002908  6EF6               	movwf	tblptrl,c
 19513  00290A  0EFD               	movlw	high _font2
 19514  00290C                     L20:
 19515  00290C  2012               	addwfc	?___wmul+1,w,c
 19516  00290E  6EF7               	movwf	tblptrh,c
 19517  002910                     	if	0	;There are less than 3 active tblptr bytes
 19518  002910                     	endif
 19519  002910  0008               	tblrd		*
 19520  002912  CFF5 F035          	movff	tablat,drawChar@line
 19521  002916  D000               	goto	l9150
 19522  002918                     l9150:
 19523                           
 19524                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 19525  002918  0E00               	movlw	0
 19526  00291A  6E37               	movwf	drawChar@j,c
 19527  00291C                     l9152:
 19528  00291C  0E06               	movlw	6
 19529  00291E  6437               	cpfsgt	drawChar@j,c
 19530  002920  D001               	goto	l1297
 19531  002922  D053               	goto	l9176
 19532  002924                     l1297:
 19533                           
 19534                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 19535  002924  A035               	btfss	drawChar@line,0,c
 19536  002926  D023               	goto	l9162
 19537                           
 19538                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 19539  002928  0434               	decf	drawChar@size,w,c
 19540  00292A  A4D8               	btfss	status,2,c
 19541  00292C  D00C               	goto	l9160
 19542  00292E  502E               	movf	drawChar@y,w,c
 19543  002930  2437               	addwf	drawChar@j,w,c
 19544  002932  6E18               	movwf	drawPixel@y,c
 19545  002934  C030  F019         	movff	drawChar@color,drawPixel@color
 19546  002938  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 19547  00293C  5036               	movf	drawChar@x,w,c
 19548  00293E  2438               	addwf	drawChar@i,w,c
 19549  002940  EC6A  F026         	call	_drawPixel
 19550  002944  D03E               	goto	l9170
 19551  002946                     l9160:
 19552                           
 19553                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 19554  002946  5037               	movf	drawChar@j,w,c
 19555  002948  0234               	mulwf	drawChar@size,c
 19556  00294A  50F3               	movf	prodl,w,c
 19557  00294C  242E               	addwf	drawChar@y,w,c
 19558  00294E  6E23               	movwf	fillRect@y,c
 19559  002950  C034  F024         	movff	drawChar@size,fillRect@w
 19560  002954  C034  F025         	movff	drawChar@size,fillRect@h
 19561  002958  C030  F026         	movff	drawChar@color,fillRect@color
 19562  00295C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 19563  002960  5038               	movf	drawChar@i,w,c
 19564  002962  0234               	mulwf	drawChar@size,c
 19565  002964  50F3               	movf	prodl,w,c
 19566  002966  2436               	addwf	drawChar@x,w,c
 19567  002968  ECDE  F024         	call	_fillRect
 19568                           
 19569                           ;ST7735_TFT.c: 465: }
 19570  00296C  D02A               	goto	l9170
 19571  00296E                     l9162:
 19572                           
 19573                           ;ST7735_TFT.c: 466: else if(bg != color) {
 19574  00296E  5030               	movf	drawChar@color,w,c
 19575  002970  1832               	xorwf	drawChar@bg,w,c
 19576  002972  E104               	bnz	u7420
 19577  002974  5031               	movf	drawChar@color+1,w,c
 19578  002976  1833               	xorwf	drawChar@bg+1,w,c
 19579  002978  B4D8               	btfsc	status,2,c
 19580  00297A  D023               	goto	l9170
 19581  00297C                     u7420:
 19582                           
 19583                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 19584  00297C  0434               	decf	drawChar@size,w,c
 19585  00297E  A4D8               	btfss	status,2,c
 19586  002980  D00C               	goto	l9168
 19587  002982  502E               	movf	drawChar@y,w,c
 19588  002984  2437               	addwf	drawChar@j,w,c
 19589  002986  6E18               	movwf	drawPixel@y,c
 19590  002988  C032  F019         	movff	drawChar@bg,drawPixel@color
 19591  00298C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 19592  002990  5036               	movf	drawChar@x,w,c
 19593  002992  2438               	addwf	drawChar@i,w,c
 19594  002994  EC6A  F026         	call	_drawPixel
 19595  002998  D014               	goto	l9170
 19596  00299A                     l9168:
 19597                           
 19598                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 19599  00299A  5037               	movf	drawChar@j,w,c
 19600  00299C  0234               	mulwf	drawChar@size,c
 19601  00299E  50F3               	movf	prodl,w,c
 19602  0029A0  242E               	addwf	drawChar@y,w,c
 19603  0029A2  6E23               	movwf	fillRect@y,c
 19604  0029A4  C034  F024         	movff	drawChar@size,fillRect@w
 19605  0029A8  C034  F025         	movff	drawChar@size,fillRect@h
 19606  0029AC  C032  F026         	movff	drawChar@bg,fillRect@color
 19607  0029B0  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 19608  0029B4  5038               	movf	drawChar@i,w,c
 19609  0029B6  0234               	mulwf	drawChar@size,c
 19610  0029B8  50F3               	movf	prodl,w,c
 19611  0029BA  2436               	addwf	drawChar@x,w,c
 19612  0029BC  ECDE  F024         	call	_fillRect
 19613  0029C0  D000               	goto	l9170
 19614  0029C2                     l9170:
 19615  0029C2  2A37               	incf	drawChar@j,f,c
 19616  0029C4  90D8               	bcf	status,0,c
 19617  0029C6  3235               	rrcf	drawChar@line,f,c
 19618  0029C8  D7A9               	goto	l9152
 19619  0029CA                     l9176:
 19620  0029CA  2A38               	incf	drawChar@i,f,c
 19621  0029CC  D76F               	goto	l9140
 19622  0029CE                     l1288:
 19623  0029CE  0012               	return		;funcret
 19624  0029D0                     __end_of_drawChar:
 19625                           	opt stack 0
 19626                           tblptru	equ	0xFF8
 19627                           tblptrh	equ	0xFF7
 19628                           tblptrl	equ	0xFF6
 19629                           tablat	equ	0xFF5
 19630                           prodh	equ	0xFF4
 19631                           prodl	equ	0xFF3
 19632                           intcon	equ	0xFF2
 19633                           intcon2	equ	0xFF1
 19634                           postinc0	equ	0xFEE
 19635                           wreg	equ	0xFE8
 19636                           postdec1	equ	0xFE5
 19637                           fsr1l	equ	0xFE1
 19638                           indf2	equ	0xFDF
 19639                           postinc2	equ	0xFDE
 19640                           postdec2	equ	0xFDD
 19641                           fsr2h	equ	0xFDA
 19642                           fsr2l	equ	0xFD9
 19643                           status	equ	0xFD8
 19644                           
 19645 ;; *************** function _fillRect *****************
 19646 ;; Defined at:
 19647 ;;		line 437 in file "ST7735_TFT.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;  x               1    wreg     unsigned char 
 19650 ;;  y               1   34[COMRAM] unsigned char 
 19651 ;;  w               1   35[COMRAM] unsigned char 
 19652 ;;  h               1   36[COMRAM] unsigned char 
 19653 ;;  color           2   37[COMRAM] unsigned int 
 19654 ;; Auto vars:     Size  Location     Type
 19655 ;;  x               1   42[COMRAM] unsigned char 
 19656 ;;  i               2   43[COMRAM] int 
 19657 ;; Return value:  Size  Location     Type
 19658 ;;		None               void
 19659 ;; Registers used:
 19660 ;;		wreg, status,2, status,0, cstack
 19661 ;; Tracked objects:
 19662 ;;		On entry : 0/0
 19663 ;;		On exit  : 0/0
 19664 ;;		Unchanged: 0/0
 19665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19666 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19667 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19669 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19670 ;;Total ram usage:       11 bytes
 19671 ;; Hardware stack levels used:    1
 19672 ;; Hardware stack levels required when called:    7
 19673 ;; This function calls:
 19674 ;;		_drawFastVLine
 19675 ;; This function is called by:
 19676 ;;		_Initialize_Setup_Alarm_Time_Screen
 19677 ;;		_Initialize_Setup_Time_Screen
 19678 ;;		_Update_Setup_Screen_Cursor_Forward
 19679 ;;		_Update_Setup_Screen_Cursor_Backward
 19680 ;;		_drawChar
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           	psect	text96
 19685  0049BC                     __ptext96:
 19686                           	opt stack 0
 19687  0049BC                     _fillRect:
 19688                           	opt stack 20
 19689                           
 19690                           ;incstack = 0
 19691                           ;fillRect@x stored from wreg
 19692  0049BC  6E2B               	movwf	fillRect@x,c
 19693                           
 19694                           ;ST7735_TFT.c: 439: signed int i;
 19695                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 19696  0049BE  C02B  F02C         	movff	fillRect@x,fillRect@i
 19697  0049C2  6A2D               	clrf	fillRect@i+1,c
 19698  0049C4  D00E               	goto	l5622
 19699  0049C6                     l5618:
 19700                           
 19701                           ;ST7735_TFT.c: 442: {
 19702                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 19703  0049C6  C023  F018         	movff	fillRect@y,drawFastVLine@y
 19704  0049CA  C025  F019         	movff	fillRect@h,drawFastVLine@h
 19705  0049CE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 19706  0049D2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 19707  0049D6  502C               	movf	fillRect@i,w,c
 19708  0049D8  ECE5  F020         	call	_drawFastVLine
 19709  0049DC  4A2C               	infsnz	fillRect@i,f,c
 19710  0049DE  2A2D               	incf	fillRect@i+1,f,c
 19711  0049E0  D000               	goto	l5622
 19712  0049E2                     l5622:
 19713  0049E2  5024               	movf	fillRect@w,w,c
 19714  0049E4  C02B  F028         	movff	fillRect@x,??_fillRect
 19715  0049E8  6A29               	clrf	(??_fillRect+1)& (0+255),c
 19716  0049EA  2628               	addwf	??_fillRect,f,c
 19717  0049EC  0E00               	movlw	0
 19718  0049EE  2229               	addwfc	??_fillRect+1,f,c
 19719  0049F0  5028               	movf	??_fillRect,w,c
 19720  0049F2  5C2C               	subwf	fillRect@i,w,c
 19721  0049F4  502D               	movf	fillRect@i+1,w,c
 19722  0049F6  0A80               	xorlw	128
 19723  0049F8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 19724  0049FA  5029               	movf	??_fillRect+1,w,c
 19725  0049FC  0A80               	xorlw	128
 19726  0049FE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 19727  004A00  A0D8               	btfss	status,0,c
 19728  004A02  D7E1               	goto	l5618
 19729  004A04  0012               	return		;funcret
 19730  004A06                     __end_of_fillRect:
 19731                           	opt stack 0
 19732                           tblptru	equ	0xFF8
 19733                           tblptrh	equ	0xFF7
 19734                           tblptrl	equ	0xFF6
 19735                           tablat	equ	0xFF5
 19736                           prodh	equ	0xFF4
 19737                           prodl	equ	0xFF3
 19738                           intcon	equ	0xFF2
 19739                           intcon2	equ	0xFF1
 19740                           postinc0	equ	0xFEE
 19741                           wreg	equ	0xFE8
 19742                           postdec1	equ	0xFE5
 19743                           fsr1l	equ	0xFE1
 19744                           indf2	equ	0xFDF
 19745                           postinc2	equ	0xFDE
 19746                           postdec2	equ	0xFDD
 19747                           fsr2h	equ	0xFDA
 19748                           fsr2l	equ	0xFD9
 19749                           status	equ	0xFD8
 19750                           
 19751 ;; *************** function _drawFastVLine *****************
 19752 ;; Defined at:
 19753 ;;		line 416 in file "ST7735_TFT.c"
 19754 ;; Parameters:    Size  Location     Type
 19755 ;;  x               1    wreg     unsigned char 
 19756 ;;  y               1   23[COMRAM] unsigned char 
 19757 ;;  h               1   24[COMRAM] unsigned char 
 19758 ;;  color           2   25[COMRAM] unsigned int 
 19759 ;; Auto vars:     Size  Location     Type
 19760 ;;  x               1   33[COMRAM] unsigned char 
 19761 ;;  lo              1   32[COMRAM] unsigned char 
 19762 ;;  hi              1   31[COMRAM] unsigned char 
 19763 ;; Return value:  Size  Location     Type
 19764 ;;		None               void
 19765 ;; Registers used:
 19766 ;;		wreg, status,2, status,0, cstack
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19773 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;Total ram usage:       11 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:    6
 19779 ;; This function calls:
 19780 ;;		_setAddrWindow
 19781 ;;		_spiwrite
 19782 ;; This function is called by:
 19783 ;;		_fillRect
 19784 ;;		_fillCircleHelper
 19785 ;;		_fillCircle
 19786 ;;		_drawRect
 19787 ;; This function uses a non-reentrant model
 19788 ;;
 19789                           
 19790                           	psect	text97
 19791  0041CA                     __ptext97:
 19792                           	opt stack 0
 19793  0041CA                     _drawFastVLine:
 19794                           	opt stack 20
 19795                           
 19796                           ;incstack = 0
 19797                           ;drawFastVLine@x stored from wreg
 19798  0041CA  6E22               	movwf	drawFastVLine@x,c
 19799                           
 19800                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 19801                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 19802  0041CC  0E80               	movlw	128
 19803  0041CE  6022               	cpfslt	drawFastVLine@x,c
 19804  0041D0  D03F               	goto	l1272
 19805  0041D2  0E9F               	movlw	159
 19806  0041D4  6418               	cpfsgt	drawFastVLine@y,c
 19807  0041D6  D001               	goto	l5544
 19808                           
 19809                           ;ST7735_TFT.c: 420: return;
 19810  0041D8  D03B               	goto	l1272
 19811  0041DA                     l5544:
 19812                           
 19813                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 19814  0041DA  0EFF               	movlw	255
 19815  0041DC  6E1C               	movwf	??_drawFastVLine& (0+255),c
 19816  0041DE  0EFF               	movlw	255
 19817  0041E0  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 19818  0041E2  5019               	movf	drawFastVLine@h,w,c
 19819  0041E4  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 19820  0041E8  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 19821  0041EA  261E               	addwf	??_drawFastVLine+2,f,c
 19822  0041EC  0E00               	movlw	0
 19823  0041EE  221F               	addwfc	??_drawFastVLine+3,f,c
 19824  0041F0  501C               	movf	??_drawFastVLine,w,c
 19825  0041F2  261E               	addwf	??_drawFastVLine+2,f,c
 19826  0041F4  501D               	movf	??_drawFastVLine+1,w,c
 19827  0041F6  221F               	addwfc	??_drawFastVLine+3,f,c
 19828  0041F8  BE1F               	btfsc	??_drawFastVLine+3,7,c
 19829  0041FA  D00B               	goto	l5548
 19830  0041FC  501F               	movf	??_drawFastVLine+3,w,c
 19831  0041FE  E104               	bnz	u3450
 19832  004200  0EA0               	movlw	160
 19833  004202  5C1E               	subwf	??_drawFastVLine+2,w,c
 19834  004204  A0D8               	btfss	status,0,c
 19835  004206  D005               	goto	l5548
 19836  004208                     u3450:
 19837                           
 19838                           ;ST7735_TFT.c: 422: h = 160 - y;
 19839  004208  5018               	movf	drawFastVLine@y,w,c
 19840  00420A  0800               	sublw	0
 19841  00420C  0FA0               	addlw	160
 19842  00420E  6E19               	movwf	drawFastVLine@h,c
 19843  004210  D000               	goto	l5548
 19844  004212                     l5548:
 19845                           
 19846                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 19847  004212  501B               	movf	drawFastVLine@color+1,w,c
 19848  004214  6E20               	movwf	drawFastVLine@hi,c
 19849  004216  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 19850                           
 19851                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 19852  00421A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 19853  00421E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 19854  004222  5018               	movf	drawFastVLine@y,w,c
 19855  004224  2419               	addwf	drawFastVLine@h,w,c
 19856  004226  6E1C               	movwf	??_drawFastVLine& (0+255),c
 19857  004228  041C               	decf	??_drawFastVLine,w,c
 19858  00422A  6E16               	movwf	setAddrWindow@y1,c
 19859  00422C  5022               	movf	drawFastVLine@x,w,c
 19860  00422E  EC11  F024         	call	_setAddrWindow
 19861                           
 19862                           ;ST7735_TFT.c: 425: PORTEbits.RE0 = 1;
 19863  004232  8084               	bsf	3972,0,c	;volatile
 19864                           
 19865                           ;ST7735_TFT.c: 426: PORTCbits.RC4 = 0;
 19866  004234  9882               	bcf	3970,4,c	;volatile
 19867                           
 19868                           ;ST7735_TFT.c: 428: while (h--) {
 19869  004236  D007               	goto	l5560
 19870  004238                     l5558:
 19871                           
 19872                           ;ST7735_TFT.c: 429: spiwrite(hi);
 19873  004238  5020               	movf	drawFastVLine@hi,w,c
 19874  00423A  EC41  F028         	call	_spiwrite
 19875                           
 19876                           ;ST7735_TFT.c: 430: spiwrite(lo);
 19877  00423E  5021               	movf	drawFastVLine@lo,w,c
 19878  004240  EC41  F028         	call	_spiwrite
 19879  004244  D000               	goto	l5560
 19880  004246                     l5560:
 19881  004246  0619               	decf	drawFastVLine@h,f,c
 19882  004248  2819               	incf	drawFastVLine@h,w,c
 19883  00424A  A4D8               	btfss	status,2,c
 19884  00424C  D7F5               	goto	l5558
 19885                           
 19886                           ;ST7735_TFT.c: 431: }
 19887                           ;ST7735_TFT.c: 432: PORTCbits.RC4 = 1;
 19888  00424E  8882               	bsf	3970,4,c	;volatile
 19889  004250                     l1272:
 19890  004250  0012               	return		;funcret
 19891  004252                     __end_of_drawFastVLine:
 19892                           	opt stack 0
 19893                           tblptru	equ	0xFF8
 19894                           tblptrh	equ	0xFF7
 19895                           tblptrl	equ	0xFF6
 19896                           tablat	equ	0xFF5
 19897                           prodh	equ	0xFF4
 19898                           prodl	equ	0xFF3
 19899                           intcon	equ	0xFF2
 19900                           intcon2	equ	0xFF1
 19901                           postinc0	equ	0xFEE
 19902                           wreg	equ	0xFE8
 19903                           postdec1	equ	0xFE5
 19904                           fsr1l	equ	0xFE1
 19905                           indf2	equ	0xFDF
 19906                           postinc2	equ	0xFDE
 19907                           postdec2	equ	0xFDD
 19908                           fsr2h	equ	0xFDA
 19909                           fsr2l	equ	0xFD9
 19910                           status	equ	0xFD8
 19911                           
 19912 ;; *************** function _drawPixel *****************
 19913 ;; Defined at:
 19914 ;;		line 407 in file "ST7735_TFT.c"
 19915 ;; Parameters:    Size  Location     Type
 19916 ;;  x               1    wreg     unsigned char 
 19917 ;;  y               1   23[COMRAM] unsigned char 
 19918 ;;  color           2   24[COMRAM] unsigned int 
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;  x               1   26[COMRAM] unsigned char 
 19921 ;; Return value:  Size  Location     Type
 19922 ;;		None               void
 19923 ;; Registers used:
 19924 ;;		wreg, status,2, status,0, cstack
 19925 ;; Tracked objects:
 19926 ;;		On entry : 0/0
 19927 ;;		On exit  : 0/0
 19928 ;;		Unchanged: 0/0
 19929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19930 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19934 ;;Total ram usage:        4 bytes
 19935 ;; Hardware stack levels used:    1
 19936 ;; Hardware stack levels required when called:    6
 19937 ;; This function calls:
 19938 ;;		_setAddrWindow
 19939 ;;		_write_data
 19940 ;; This function is called by:
 19941 ;;		_drawChar
 19942 ;;		_drawCircle
 19943 ;;		_drawCircleHelper
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           	psect	text98
 19948  004CD4                     __ptext98:
 19949                           	opt stack 0
 19950  004CD4                     _drawPixel:
 19951                           	opt stack 21
 19952                           
 19953                           ;incstack = 0
 19954                           ;drawPixel@x stored from wreg
 19955  004CD4  6E1B               	movwf	drawPixel@x,c
 19956                           
 19957                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 19958  004CD6  0E80               	movlw	128
 19959  004CD8  601B               	cpfslt	drawPixel@x,c
 19960  004CDA  D013               	goto	l1266
 19961  004CDC  0E9F               	movlw	159
 19962  004CDE  6418               	cpfsgt	drawPixel@y,c
 19963  004CE0  D001               	goto	l5642
 19964                           
 19965                           ;ST7735_TFT.c: 410: return;
 19966  004CE2  D00F               	goto	l1266
 19967  004CE4                     l5642:
 19968                           
 19969                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 19970  004CE4  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 19971  004CE8  281B               	incf	drawPixel@x,w,c
 19972  004CEA  6E15               	movwf	setAddrWindow@x1,c
 19973  004CEC  2818               	incf	drawPixel@y,w,c
 19974  004CEE  6E16               	movwf	setAddrWindow@y1,c
 19975  004CF0  501B               	movf	drawPixel@x,w,c
 19976  004CF2  EC11  F024         	call	_setAddrWindow
 19977                           
 19978                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 19979  004CF6  501A               	movf	drawPixel@color+1,w,c
 19980  004CF8  ECB5  F028         	call	_write_data
 19981                           
 19982                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 19983  004CFC  5019               	movf	drawPixel@color,w,c
 19984  004CFE  ECB5  F028         	call	_write_data
 19985  004D02                     l1266:
 19986  004D02  0012               	return		;funcret
 19987  004D04                     __end_of_drawPixel:
 19988                           	opt stack 0
 19989                           tblptru	equ	0xFF8
 19990                           tblptrh	equ	0xFF7
 19991                           tblptrl	equ	0xFF6
 19992                           tablat	equ	0xFF5
 19993                           prodh	equ	0xFF4
 19994                           prodl	equ	0xFF3
 19995                           intcon	equ	0xFF2
 19996                           intcon2	equ	0xFF1
 19997                           postinc0	equ	0xFEE
 19998                           wreg	equ	0xFE8
 19999                           postdec1	equ	0xFE5
 20000                           fsr1l	equ	0xFE1
 20001                           indf2	equ	0xFDF
 20002                           postinc2	equ	0xFDE
 20003                           postdec2	equ	0xFDD
 20004                           fsr2h	equ	0xFDA
 20005                           fsr2l	equ	0xFD9
 20006                           status	equ	0xFD8
 20007                           
 20008 ;; *************** function _setAddrWindow *****************
 20009 ;; Defined at:
 20010 ;;		line 392 in file "ST7735_TFT.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;  x0              1    wreg     unsigned char 
 20013 ;;  y0              1   19[COMRAM] unsigned char 
 20014 ;;  x1              1   20[COMRAM] unsigned char 
 20015 ;;  y1              1   21[COMRAM] unsigned char 
 20016 ;; Auto vars:     Size  Location     Type
 20017 ;;  x0              1   22[COMRAM] unsigned char 
 20018 ;; Return value:  Size  Location     Type
 20019 ;;		None               void
 20020 ;; Registers used:
 20021 ;;		wreg, status,2, status,0, cstack
 20022 ;; Tracked objects:
 20023 ;;		On entry : 0/0
 20024 ;;		On exit  : 0/0
 20025 ;;		Unchanged: 0/0
 20026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20030 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20031 ;;Total ram usage:        4 bytes
 20032 ;; Hardware stack levels used:    1
 20033 ;; Hardware stack levels required when called:    5
 20034 ;; This function calls:
 20035 ;;		_write_command
 20036 ;;		_write_data
 20037 ;; This function is called by:
 20038 ;;		_drawPixel
 20039 ;;		_drawFastVLine
 20040 ;;		_fillRectangle
 20041 ;;		_drawFastHLine
 20042 ;; This function uses a non-reentrant model
 20043 ;;
 20044                           
 20045                           	psect	text99
 20046  004822                     __ptext99:
 20047                           	opt stack 0
 20048  004822                     _setAddrWindow:
 20049                           	opt stack 20
 20050                           
 20051                           ;incstack = 0
 20052                           ;setAddrWindow@x0 stored from wreg
 20053  004822  6E17               	movwf	setAddrWindow@x0,c
 20054                           
 20055                           ;ST7735_TFT.c: 394: write_command(0x2A);
 20056  004824  0E2A               	movlw	42
 20057  004826  ECBD  F028         	call	_write_command
 20058                           
 20059                           ;ST7735_TFT.c: 395: write_data(0);
 20060  00482A  0E00               	movlw	0
 20061  00482C  ECB5  F028         	call	_write_data
 20062                           
 20063                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 20064  004830  5017               	movf	setAddrWindow@x0,w,c
 20065  004832  0100               	movlb	0	; () banked
 20066  004834  25AB               	addwf	_colstart& (0+255),w,b
 20067  004836  ECB5  F028         	call	_write_data
 20068                           
 20069                           ;ST7735_TFT.c: 397: write_data(0);
 20070  00483A  0E00               	movlw	0
 20071  00483C  ECB5  F028         	call	_write_data
 20072                           
 20073                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 20074  004840  5015               	movf	setAddrWindow@x1,w,c
 20075  004842  0100               	movlb	0	; () banked
 20076  004844  25AB               	addwf	_colstart& (0+255),w,b
 20077  004846  ECB5  F028         	call	_write_data
 20078                           
 20079                           ;ST7735_TFT.c: 399: write_command(0x2B);
 20080  00484A  0E2B               	movlw	43
 20081  00484C  ECBD  F028         	call	_write_command
 20082                           
 20083                           ;ST7735_TFT.c: 400: write_data(0);
 20084  004850  0E00               	movlw	0
 20085  004852  ECB5  F028         	call	_write_data
 20086                           
 20087                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 20088  004856  5014               	movf	setAddrWindow@y0,w,c
 20089  004858  0100               	movlb	0	; () banked
 20090  00485A  25AD               	addwf	_rowstart& (0+255),w,b
 20091  00485C  ECB5  F028         	call	_write_data
 20092                           
 20093                           ;ST7735_TFT.c: 402: write_data(0);
 20094  004860  0E00               	movlw	0
 20095  004862  ECB5  F028         	call	_write_data
 20096                           
 20097                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 20098  004866  5016               	movf	setAddrWindow@y1,w,c
 20099  004868  0100               	movlb	0	; () banked
 20100  00486A  25AD               	addwf	_rowstart& (0+255),w,b
 20101  00486C  ECB5  F028         	call	_write_data
 20102                           
 20103                           ;ST7735_TFT.c: 404: write_command(0x2C);
 20104  004870  0E2C               	movlw	44
 20105  004872  ECBD  F028         	call	_write_command
 20106  004876  0012               	return		;funcret
 20107  004878                     __end_of_setAddrWindow:
 20108                           	opt stack 0
 20109                           tblptru	equ	0xFF8
 20110                           tblptrh	equ	0xFF7
 20111                           tblptrl	equ	0xFF6
 20112                           tablat	equ	0xFF5
 20113                           prodh	equ	0xFF4
 20114                           prodl	equ	0xFF3
 20115                           intcon	equ	0xFF2
 20116                           intcon2	equ	0xFF1
 20117                           postinc0	equ	0xFEE
 20118                           wreg	equ	0xFE8
 20119                           postdec1	equ	0xFE5
 20120                           fsr1l	equ	0xFE1
 20121                           indf2	equ	0xFDF
 20122                           postinc2	equ	0xFDE
 20123                           postdec2	equ	0xFDD
 20124                           fsr2h	equ	0xFDA
 20125                           fsr2l	equ	0xFD9
 20126                           status	equ	0xFD8
 20127                           
 20128 ;; *************** function _write_data *****************
 20129 ;; Defined at:
 20130 ;;		line 209 in file "ST7735_TFT.c"
 20131 ;; Parameters:    Size  Location     Type
 20132 ;;  data_           1    wreg     unsigned char 
 20133 ;; Auto vars:     Size  Location     Type
 20134 ;;  data_           1   18[COMRAM] unsigned char 
 20135 ;; Return value:  Size  Location     Type
 20136 ;;		None               void
 20137 ;; Registers used:
 20138 ;;		wreg, status,2, cstack
 20139 ;; Tracked objects:
 20140 ;;		On entry : 0/0
 20141 ;;		On exit  : 0/0
 20142 ;;		Unchanged: 0/0
 20143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20148 ;;Total ram usage:        1 bytes
 20149 ;; Hardware stack levels used:    1
 20150 ;; Hardware stack levels required when called:    4
 20151 ;; This function calls:
 20152 ;;		_spiwrite
 20153 ;; This function is called by:
 20154 ;;		_Rcmd1
 20155 ;;		_Rcmd2red
 20156 ;;		_Rcmd3
 20157 ;;		_setAddrWindow
 20158 ;;		_drawPixel
 20159 ;;		_TFT_GreenTab_Initialize
 20160 ;;		_Bcmd
 20161 ;;		_setScrollDefinition
 20162 ;;		_Rcmd2green
 20163 ;;		_VerticalScroll
 20164 ;; This function uses a non-reentrant model
 20165 ;;
 20166                           
 20167                           	psect	text100
 20168  00516A                     __ptext100:
 20169                           	opt stack 0
 20170  00516A                     _write_data:
 20171                           	opt stack 20
 20172                           
 20173                           ;incstack = 0
 20174                           ;write_data@data_ stored from wreg
 20175  00516A  6E13               	movwf	write_data@data_,c
 20176                           
 20177                           ;ST7735_TFT.c: 211: PORTCbits.RC4 = 0;
 20178  00516C  9882               	bcf	3970,4,c	;volatile
 20179                           
 20180                           ;ST7735_TFT.c: 212: PORTEbits.RE0 = 1;
 20181  00516E  8084               	bsf	3972,0,c	;volatile
 20182                           
 20183                           ;ST7735_TFT.c: 213: spiwrite(data_);
 20184  005170  5013               	movf	write_data@data_,w,c
 20185  005172  EC41  F028         	call	_spiwrite
 20186                           
 20187                           ;ST7735_TFT.c: 214: PORTCbits.RC4 = 1;
 20188  005176  8882               	bsf	3970,4,c	;volatile
 20189  005178  0012               	return		;funcret
 20190  00517A                     __end_of_write_data:
 20191                           	opt stack 0
 20192                           tblptru	equ	0xFF8
 20193                           tblptrh	equ	0xFF7
 20194                           tblptrl	equ	0xFF6
 20195                           tablat	equ	0xFF5
 20196                           prodh	equ	0xFF4
 20197                           prodl	equ	0xFF3
 20198                           intcon	equ	0xFF2
 20199                           intcon2	equ	0xFF1
 20200                           postinc0	equ	0xFEE
 20201                           wreg	equ	0xFE8
 20202                           postdec1	equ	0xFE5
 20203                           fsr1l	equ	0xFE1
 20204                           indf2	equ	0xFDF
 20205                           postinc2	equ	0xFDE
 20206                           postdec2	equ	0xFDD
 20207                           fsr2h	equ	0xFDA
 20208                           fsr2l	equ	0xFD9
 20209                           status	equ	0xFD8
 20210                           
 20211 ;; *************** function _write_command *****************
 20212 ;; Defined at:
 20213 ;;		line 198 in file "ST7735_TFT.c"
 20214 ;; Parameters:    Size  Location     Type
 20215 ;;  cmd_            1    wreg     unsigned char 
 20216 ;; Auto vars:     Size  Location     Type
 20217 ;;  cmd_            1   18[COMRAM] unsigned char 
 20218 ;; Return value:  Size  Location     Type
 20219 ;;		None               void
 20220 ;; Registers used:
 20221 ;;		wreg, status,2, cstack
 20222 ;; Tracked objects:
 20223 ;;		On entry : 0/0
 20224 ;;		On exit  : 0/0
 20225 ;;		Unchanged: 0/0
 20226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20231 ;;Total ram usage:        1 bytes
 20232 ;; Hardware stack levels used:    1
 20233 ;; Hardware stack levels required when called:    4
 20234 ;; This function calls:
 20235 ;;		_spiwrite
 20236 ;; This function is called by:
 20237 ;;		_Rcmd1
 20238 ;;		_Rcmd2red
 20239 ;;		_Rcmd3
 20240 ;;		_setAddrWindow
 20241 ;;		_TFT_GreenTab_Initialize
 20242 ;;		_Bcmd
 20243 ;;		_setScrollDefinition
 20244 ;;		_Rcmd2green
 20245 ;;		_VerticalScroll
 20246 ;; This function uses a non-reentrant model
 20247 ;;
 20248                           
 20249                           	psect	text101
 20250  00517A                     __ptext101:
 20251                           	opt stack 0
 20252  00517A                     _write_command:
 20253                           	opt stack 20
 20254                           
 20255                           ;incstack = 0
 20256                           ;write_command@cmd_ stored from wreg
 20257  00517A  6E13               	movwf	write_command@cmd_,c
 20258                           
 20259                           ;ST7735_TFT.c: 200: PORTCbits.RC4 = 0;
 20260  00517C  9882               	bcf	3970,4,c	;volatile
 20261                           
 20262                           ;ST7735_TFT.c: 202: PORTEbits.RE0 = 0;
 20263  00517E  9084               	bcf	3972,0,c	;volatile
 20264                           
 20265                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 20266  005180  5013               	movf	write_command@cmd_,w,c
 20267  005182  EC41  F028         	call	_spiwrite
 20268                           
 20269                           ;ST7735_TFT.c: 205: PORTCbits.RC4 = 1;
 20270  005186  8882               	bsf	3970,4,c	;volatile
 20271  005188  0012               	return		;funcret
 20272  00518A                     __end_of_write_command:
 20273                           	opt stack 0
 20274                           tblptru	equ	0xFF8
 20275                           tblptrh	equ	0xFF7
 20276                           tblptrl	equ	0xFF6
 20277                           tablat	equ	0xFF5
 20278                           prodh	equ	0xFF4
 20279                           prodl	equ	0xFF3
 20280                           intcon	equ	0xFF2
 20281                           intcon2	equ	0xFF1
 20282                           postinc0	equ	0xFEE
 20283                           wreg	equ	0xFE8
 20284                           postdec1	equ	0xFE5
 20285                           fsr1l	equ	0xFE1
 20286                           indf2	equ	0xFDF
 20287                           postinc2	equ	0xFDE
 20288                           postdec2	equ	0xFDD
 20289                           fsr2h	equ	0xFDA
 20290                           fsr2l	equ	0xFD9
 20291                           status	equ	0xFD8
 20292                           
 20293 ;; *************** function _spiwrite *****************
 20294 ;; Defined at:
 20295 ;;		line 189 in file "ST7735_TFT.c"
 20296 ;; Parameters:    Size  Location     Type
 20297 ;;  spidata         1    wreg     unsigned char 
 20298 ;; Auto vars:     Size  Location     Type
 20299 ;;  spidata         1   17[COMRAM] unsigned char 
 20300 ;;  x               1   16[COMRAM] unsigned char 
 20301 ;; Return value:  Size  Location     Type
 20302 ;;		None               void
 20303 ;; Registers used:
 20304 ;;		wreg
 20305 ;; Tracked objects:
 20306 ;;		On entry : 0/0
 20307 ;;		On exit  : 0/0
 20308 ;;		Unchanged: 0/0
 20309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20314 ;;Total ram usage:        2 bytes
 20315 ;; Hardware stack levels used:    1
 20316 ;; Hardware stack levels required when called:    3
 20317 ;; This function calls:
 20318 ;;		Nothing
 20319 ;; This function is called by:
 20320 ;;		_write_command
 20321 ;;		_write_data
 20322 ;;		_drawFastVLine
 20323 ;;		_fillRectangle
 20324 ;;		_drawFastHLine
 20325 ;; This function uses a non-reentrant model
 20326 ;;
 20327                           
 20328                           	psect	text102
 20329  005082                     __ptext102:
 20330                           	opt stack 0
 20331  005082                     _spiwrite:
 20332                           	opt stack 22
 20333                           
 20334                           ;incstack = 0
 20335                           ;spiwrite@spidata stored from wreg
 20336  005082  6E12               	movwf	spiwrite@spidata,c
 20337                           
 20338                           ;ST7735_TFT.c: 191: char x;
 20339                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 20340  005084  969E               	bcf	3998,3,c	;volatile
 20341                           
 20342                           ;ST7735_TFT.c: 193: x = SSPBUF;
 20343  005086  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 20344                           
 20345                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 20346  00508A  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 20347                           
 20348                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 20349  00508E  D000               	goto	l1222
 20350  005090                     l1222:
 20351  005090  A0C7               	btfss	4039,0,c	;volatile
 20352  005092  D7FE               	goto	l1222
 20353  005094  0012               	return		;funcret
 20354  005096                     __end_of_spiwrite:
 20355                           	opt stack 0
 20356                           tblptru	equ	0xFF8
 20357                           tblptrh	equ	0xFF7
 20358                           tblptrl	equ	0xFF6
 20359                           tablat	equ	0xFF5
 20360                           prodh	equ	0xFF4
 20361                           prodl	equ	0xFF3
 20362                           intcon	equ	0xFF2
 20363                           intcon2	equ	0xFF1
 20364                           postinc0	equ	0xFEE
 20365                           wreg	equ	0xFE8
 20366                           postdec1	equ	0xFE5
 20367                           fsr1l	equ	0xFE1
 20368                           indf2	equ	0xFDF
 20369                           postinc2	equ	0xFDE
 20370                           postdec2	equ	0xFDD
 20371                           fsr2h	equ	0xFDA
 20372                           fsr2l	equ	0xFD9
 20373                           status	equ	0xFD8
 20374                           
 20375 ;; *************** function ___wmul *****************
 20376 ;; Defined at:
 20377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 20378 ;; Parameters:    Size  Location     Type
 20379 ;;  multiplier      2   16[COMRAM] unsigned int 
 20380 ;;  multiplicand    2   18[COMRAM] unsigned int 
 20381 ;; Auto vars:     Size  Location     Type
 20382 ;;  product         2   20[COMRAM] unsigned int 
 20383 ;; Return value:  Size  Location     Type
 20384 ;;                  2   16[COMRAM] unsigned int 
 20385 ;; Registers used:
 20386 ;;		wreg, status,2, status,0, prodl, prodh
 20387 ;; Tracked objects:
 20388 ;;		On entry : 0/0
 20389 ;;		On exit  : 0/0
 20390 ;;		Unchanged: 0/0
 20391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20396 ;;Total ram usage:        6 bytes
 20397 ;; Hardware stack levels used:    1
 20398 ;; Hardware stack levels required when called:    3
 20399 ;; This function calls:
 20400 ;;		Nothing
 20401 ;; This function is called by:
 20402 ;;		_get_RPM
 20403 ;;		_main
 20404 ;;		_delay_ms
 20405 ;;		_drawChar
 20406 ;;		_fround
 20407 ;;		_scale
 20408 ;;		_printf
 20409 ;; This function uses a non-reentrant model
 20410 ;;
 20411                           
 20412                           	psect	text103
 20413  004D88                     __ptext103:
 20414                           	opt stack 0
 20415  004D88                     ___wmul:
 20416                           	opt stack 25
 20417                           
 20418                           ;incstack = 0
 20419  004D88  5011               	movf	___wmul@multiplier,w,c
 20420  004D8A  0213               	mulwf	___wmul@multiplicand,c
 20421  004D8C  CFF3 F015          	movff	prodl,___wmul@product
 20422  004D90  CFF4 F016          	movff	prodh,___wmul@product+1
 20423  004D94  5011               	movf	___wmul@multiplier,w,c
 20424  004D96  0214               	mulwf	___wmul@multiplicand+1,c
 20425  004D98  50F3               	movf	prodl,w,c
 20426  004D9A  2616               	addwf	___wmul@product+1,f,c
 20427  004D9C  5012               	movf	___wmul@multiplier+1,w,c
 20428  004D9E  0213               	mulwf	___wmul@multiplicand,c
 20429  004DA0  50F3               	movf	prodl,w,c
 20430  004DA2  2616               	addwf	___wmul@product+1,f,c
 20431  004DA4  C015  F011         	movff	___wmul@product,?___wmul
 20432  004DA8  C016  F012         	movff	___wmul@product+1,?___wmul+1
 20433  004DAC  D000               	goto	l1564
 20434  004DAE                     l1564:
 20435  004DAE  0012               	return		;funcret
 20436  004DB0                     __end_of___wmul:
 20437                           	opt stack 0
 20438                           tblptru	equ	0xFF8
 20439                           tblptrh	equ	0xFF7
 20440                           tblptrl	equ	0xFF6
 20441                           tablat	equ	0xFF5
 20442                           prodh	equ	0xFF4
 20443                           prodl	equ	0xFF3
 20444                           intcon	equ	0xFF2
 20445                           intcon2	equ	0xFF1
 20446                           postinc0	equ	0xFEE
 20447                           wreg	equ	0xFE8
 20448                           postdec1	equ	0xFE5
 20449                           fsr1l	equ	0xFE1
 20450                           indf2	equ	0xFDF
 20451                           postinc2	equ	0xFDE
 20452                           postdec2	equ	0xFDD
 20453                           fsr2h	equ	0xFDA
 20454                           fsr2l	equ	0xFD9
 20455                           status	equ	0xFD8
 20456                           
 20457 ;; *************** function _Do_Init *****************
 20458 ;; Defined at:
 20459 ;;		line 93 in file "Main.c"
 20460 ;; Parameters:    Size  Location     Type
 20461 ;;		None
 20462 ;; Auto vars:     Size  Location     Type
 20463 ;;		None
 20464 ;; Return value:  Size  Location     Type
 20465 ;;		None               void
 20466 ;; Registers used:
 20467 ;;		wreg, status,2, status,0, cstack
 20468 ;; Tracked objects:
 20469 ;;		On entry : 0/0
 20470 ;;		On exit  : 0/0
 20471 ;;		Unchanged: 0/0
 20472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20477 ;;Total ram usage:        0 bytes
 20478 ;; Hardware stack levels used:    1
 20479 ;; Hardware stack levels required when called:    7
 20480 ;; This function calls:
 20481 ;;		_DS1621_Init
 20482 ;;		_I2C_Init
 20483 ;;		_Init_ADC
 20484 ;;		_Init_Interrupt
 20485 ;;		_Turn_Off_Fan
 20486 ;;		_init_UART
 20487 ;; This function is called by:
 20488 ;;		_main
 20489 ;; This function uses a non-reentrant model
 20490 ;;
 20491                           
 20492                           	psect	text104
 20493  0046B2                     __ptext104:
 20494                           	opt stack 0
 20495  0046B2                     _Do_Init:
 20496                           	opt stack 23
 20497                           
 20498                           ;Main.c: 95: init_UART();
 20499                           
 20500                           ;incstack = 0
 20501  0046B2  EC4B  F028         	call	_init_UART	;wreg free
 20502                           
 20503                           ;Main.c: 96: Init_ADC();
 20504  0046B6  ECCC  F028         	call	_Init_ADC	;wreg free
 20505                           
 20506                           ;Main.c: 97: OSCCON=0x70;
 20507  0046BA  0E70               	movlw	112
 20508  0046BC  6ED3               	movwf	4051,c	;volatile
 20509                           
 20510                           ;Main.c: 99: ADCON1=0x0D;
 20511  0046BE  0E0D               	movlw	13
 20512  0046C0  6EC1               	movwf	4033,c	;volatile
 20513                           
 20514                           ;Main.c: 100: TRISA = 0x02;
 20515  0046C2  0E02               	movlw	2
 20516  0046C4  6E92               	movwf	3986,c	;volatile
 20517                           
 20518                           ;Main.c: 101: TRISB = 0x07;
 20519  0046C6  0E07               	movlw	7
 20520  0046C8  6E93               	movwf	3987,c	;volatile
 20521                           
 20522                           ;Main.c: 102: TRISC = 0x01;
 20523  0046CA  0E01               	movlw	1
 20524  0046CC  6E94               	movwf	3988,c	;volatile
 20525                           
 20526                           ;Main.c: 103: TRISD = 0x00;
 20527  0046CE  0E00               	movlw	0
 20528  0046D0  6E95               	movwf	3989,c	;volatile
 20529                           
 20530                           ;Main.c: 104: TRISE = 0x00;
 20531  0046D2  0E00               	movlw	0
 20532  0046D4  6E96               	movwf	3990,c	;volatile
 20533                           
 20534                           ;Main.c: 105: PORTE = 0x00;
 20535  0046D6  0E00               	movlw	0
 20536  0046D8  6E84               	movwf	3972,c	;volatile
 20537                           
 20538                           ;Main.c: 107: HEATER = 0;
 20539  0046DA  0E00               	movlw	0
 20540  0046DC  0100               	movlb	0	; () banked
 20541  0046DE  6F9D               	movwf	_HEATER& (0+255),b
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;Main.c: 108: RBPU=0;
 20545  0046E0  9EF1               	bcf	intcon2,7,c	;volatile
 20546                           
 20547                           ; BSR set to: 0
 20548                           ;Main.c: 110: TMR3L = 0x00;
 20549  0046E2  0E00               	movlw	0
 20550  0046E4  6EB2               	movwf	4018,c	;volatile
 20551                           
 20552                           ; BSR set to: 0
 20553                           ;Main.c: 111: T3CON = 0x03;
 20554  0046E6  0E03               	movlw	3
 20555  0046E8  6EB1               	movwf	4017,c	;volatile
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;Main.c: 112: I2C_Init(100000);
 20559  0046EA  0EA0               	movlw	160
 20560  0046EC  6E11               	movwf	I2C_Init@c,c
 20561  0046EE  0E86               	movlw	134
 20562  0046F0  6E12               	movwf	I2C_Init@c+1,c
 20563  0046F2  0E01               	movlw	1
 20564  0046F4  6E13               	movwf	I2C_Init@c+2,c
 20565  0046F6  0E00               	movlw	0
 20566  0046F8  6E14               	movwf	I2C_Init@c+3,c
 20567  0046FA  ECE6  F028         	call	_I2C_Init	;wreg free
 20568                           
 20569                           ;Main.c: 114: DS1621_Init();
 20570  0046FE  ECA5  F027         	call	_DS1621_Init	;wreg free
 20571                           
 20572                           ;Main.c: 115: Init_Interrupt();
 20573  004702  EC10  F027         	call	_Init_Interrupt	;wreg free
 20574                           
 20575                           ;Main.c: 116: Turn_Off_Fan();
 20576  004706  ECDA  F028         	call	_Turn_Off_Fan	;wreg free
 20577                           
 20578                           ;Main.c: 117: heater_set_temp = 75;
 20579  00470A  0E4B               	movlw	75
 20580  00470C  0100               	movlb	0	; () banked
 20581  00470E  6FB7               	movwf	_heater_set_temp& (0+255),b
 20582                           
 20583                           ; BSR set to: 0
 20584  004710  0012               	return		;funcret
 20585  004712                     __end_of_Do_Init:
 20586                           	opt stack 0
 20587                           tblptru	equ	0xFF8
 20588                           tblptrh	equ	0xFF7
 20589                           tblptrl	equ	0xFF6
 20590                           tablat	equ	0xFF5
 20591                           prodh	equ	0xFF4
 20592                           prodl	equ	0xFF3
 20593                           intcon	equ	0xFF2
 20594                           intcon2	equ	0xFF1
 20595                           postinc0	equ	0xFEE
 20596                           wreg	equ	0xFE8
 20597                           postdec1	equ	0xFE5
 20598                           fsr1l	equ	0xFE1
 20599                           indf2	equ	0xFDF
 20600                           postinc2	equ	0xFDE
 20601                           postdec2	equ	0xFDD
 20602                           fsr2h	equ	0xFDA
 20603                           fsr2l	equ	0xFD9
 20604                           status	equ	0xFD8
 20605                           
 20606 ;; *************** function _init_UART *****************
 20607 ;; Defined at:
 20608 ;;		line 85 in file "Main.c"
 20609 ;; Parameters:    Size  Location     Type
 20610 ;;		None
 20611 ;; Auto vars:     Size  Location     Type
 20612 ;;		None
 20613 ;; Return value:  Size  Location     Type
 20614 ;;		None               void
 20615 ;; Registers used:
 20616 ;;		wreg, status,2, cstack
 20617 ;; Tracked objects:
 20618 ;;		On entry : 0/0
 20619 ;;		On exit  : 0/0
 20620 ;;		Unchanged: 0/0
 20621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20626 ;;Total ram usage:        0 bytes
 20627 ;; Hardware stack levels used:    1
 20628 ;; Hardware stack levels required when called:    4
 20629 ;; This function calls:
 20630 ;;		_OpenUSART
 20631 ;; This function is called by:
 20632 ;;		_Do_Init
 20633 ;; This function uses a non-reentrant model
 20634 ;;
 20635                           
 20636                           	psect	text105
 20637  005096                     __ptext105:
 20638                           	opt stack 0
 20639  005096                     _init_UART:
 20640                           	opt stack 25
 20641                           
 20642                           ;Main.c: 87: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 20643                           
 20644                           ; BSR set to: 0
 20645                           ;incstack = 0
 20646  005096  0E00               	movlw	0
 20647  005098  6E12               	movwf	OpenUSART@spbrg+1,c
 20648  00509A  0E19               	movlw	25
 20649  00509C  6E11               	movwf	OpenUSART@spbrg,c
 20650  00509E  0E3C               	movlw	60
 20651  0050A0  EC5C  F022         	call	_OpenUSART
 20652                           
 20653                           ;Main.c: 88: OSCCON = 0x70;
 20654  0050A4  0E70               	movlw	112
 20655  0050A6  6ED3               	movwf	4051,c	;volatile
 20656  0050A8  0012               	return		;funcret
 20657  0050AA                     __end_of_init_UART:
 20658                           	opt stack 0
 20659                           tblptru	equ	0xFF8
 20660                           tblptrh	equ	0xFF7
 20661                           tblptrl	equ	0xFF6
 20662                           tablat	equ	0xFF5
 20663                           prodh	equ	0xFF4
 20664                           prodl	equ	0xFF3
 20665                           intcon	equ	0xFF2
 20666                           intcon2	equ	0xFF1
 20667                           postinc0	equ	0xFEE
 20668                           wreg	equ	0xFE8
 20669                           postdec1	equ	0xFE5
 20670                           fsr1l	equ	0xFE1
 20671                           indf2	equ	0xFDF
 20672                           postinc2	equ	0xFDE
 20673                           postdec2	equ	0xFDD
 20674                           fsr2h	equ	0xFDA
 20675                           fsr2l	equ	0xFD9
 20676                           status	equ	0xFD8
 20677                           
 20678 ;; *************** function _OpenUSART *****************
 20679 ;; Defined at:
 20680 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 20681 ;; Parameters:    Size  Location     Type
 20682 ;;  config          1    wreg     unsigned char 
 20683 ;;  spbrg           2   16[COMRAM] unsigned int 
 20684 ;; Auto vars:     Size  Location     Type
 20685 ;;  config          1   18[COMRAM] unsigned char 
 20686 ;; Return value:  Size  Location     Type
 20687 ;;		None               void
 20688 ;; Registers used:
 20689 ;;		wreg, status,2
 20690 ;; Tracked objects:
 20691 ;;		On entry : 0/0
 20692 ;;		On exit  : 0/0
 20693 ;;		Unchanged: 0/0
 20694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;Total ram usage:        3 bytes
 20700 ;; Hardware stack levels used:    1
 20701 ;; Hardware stack levels required when called:    3
 20702 ;; This function calls:
 20703 ;;		Nothing
 20704 ;; This function is called by:
 20705 ;;		_init_UART
 20706 ;; This function uses a non-reentrant model
 20707 ;;
 20708                           
 20709                           	psect	text106
 20710  0044B8                     __ptext106:
 20711                           	opt stack 0
 20712  0044B8                     _OpenUSART:
 20713                           	opt stack 25
 20714                           
 20715                           ;incstack = 0
 20716                           ;OpenUSART@config stored from wreg
 20717  0044B8  6E13               	movwf	OpenUSART@config,c
 20718  0044BA  0E00               	movlw	0
 20719  0044BC  6EAC               	movwf	4012,c	;volatile
 20720  0044BE  0E00               	movlw	0
 20721  0044C0  6EAB               	movwf	4011,c	;volatile
 20722  0044C2  A013               	btfss	OpenUSART@config,0,c
 20723  0044C4  D002               	goto	l7122
 20724  0044C6  88AC               	bsf	4012,4,c	;volatile
 20725  0044C8  D000               	goto	l7122
 20726  0044CA                     l7122:
 20727  0044CA  A213               	btfss	OpenUSART@config,1,c
 20728  0044CC  D003               	goto	l7126
 20729  0044CE  8CAC               	bsf	4012,6,c	;volatile
 20730  0044D0  8CAB               	bsf	4011,6,c	;volatile
 20731  0044D2  D000               	goto	l7126
 20732  0044D4                     l7126:
 20733  0044D4  A413               	btfss	OpenUSART@config,2,c
 20734  0044D6  D002               	goto	l7130
 20735  0044D8  8EAC               	bsf	4012,7,c	;volatile
 20736  0044DA  D000               	goto	l7130
 20737  0044DC                     l7130:
 20738  0044DC  A613               	btfss	OpenUSART@config,3,c
 20739  0044DE  D002               	goto	l1552
 20740  0044E0  88AB               	bsf	4011,4,c	;volatile
 20741  0044E2  D002               	goto	l7134
 20742  0044E4                     l1552:
 20743  0044E4  8AAB               	bsf	4011,5,c	;volatile
 20744  0044E6  D000               	goto	l7134
 20745  0044E8                     l7134:
 20746  0044E8  B813               	btfsc	OpenUSART@config,4,c
 20747  0044EA  84AC               	bsf	4012,2,c	;volatile
 20748  0044EC  989E               	bcf	3998,4,c	;volatile
 20749  0044EE  AA13               	btfss	OpenUSART@config,5,c
 20750  0044F0  D002               	goto	l7142
 20751  0044F2  86AB               	bsf	4011,3,c	;volatile
 20752  0044F4  D000               	goto	l7142
 20753  0044F6                     l7142:
 20754  0044F6  AC13               	btfss	OpenUSART@config,6,c
 20755  0044F8  D002               	goto	l1556
 20756  0044FA  8A9D               	bsf	3997,5,c	;volatile
 20757  0044FC  D001               	goto	l1557
 20758  0044FE                     l1556:
 20759  0044FE  9A9D               	bcf	3997,5,c	;volatile
 20760  004500                     l1557:
 20761  004500  9A9E               	bcf	3998,5,c	;volatile
 20762  004502  AE13               	btfss	OpenUSART@config,7,c
 20763  004504  D002               	goto	l1558
 20764  004506  889D               	bsf	3997,4,c	;volatile
 20765  004508  D001               	goto	l1559
 20766  00450A                     l1558:
 20767  00450A  989D               	bcf	3997,4,c	;volatile
 20768  00450C                     l1559:
 20769  00450C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 20770  004510  5012               	movf	OpenUSART@spbrg+1,w,c
 20771  004512  6EB0               	movwf	4016,c	;volatile
 20772  004514  8AAC               	bsf	4012,5,c	;volatile
 20773  004516  8EAB               	bsf	4011,7,c	;volatile
 20774  004518  9C94               	bcf	3988,6,c	;volatile
 20775  00451A  8E94               	bsf	3988,7,c	;volatile
 20776  00451C  B8AC               	btfsc	4012,4,c	;volatile
 20777  00451E  BEAC               	btfsc	4012,7,c	;volatile
 20778  004520  D002               	goto	l1561
 20779  004522  8C94               	bsf	3988,6,c	;volatile
 20780  004524  D000               	goto	l1561
 20781  004526                     l1561:
 20782  004526  0012               	return		;funcret
 20783  004528                     __end_of_OpenUSART:
 20784                           	opt stack 0
 20785                           tblptru	equ	0xFF8
 20786                           tblptrh	equ	0xFF7
 20787                           tblptrl	equ	0xFF6
 20788                           tablat	equ	0xFF5
 20789                           prodh	equ	0xFF4
 20790                           prodl	equ	0xFF3
 20791                           intcon	equ	0xFF2
 20792                           intcon2	equ	0xFF1
 20793                           postinc0	equ	0xFEE
 20794                           wreg	equ	0xFE8
 20795                           postdec1	equ	0xFE5
 20796                           fsr1l	equ	0xFE1
 20797                           indf2	equ	0xFDF
 20798                           postinc2	equ	0xFDE
 20799                           postdec2	equ	0xFDD
 20800                           fsr2h	equ	0xFDA
 20801                           fsr2l	equ	0xFD9
 20802                           status	equ	0xFD8
 20803                           
 20804 ;; *************** function _Turn_Off_Fan *****************
 20805 ;; Defined at:
 20806 ;;		line 54 in file "Fan_Support.c"
 20807 ;; Parameters:    Size  Location     Type
 20808 ;;		None
 20809 ;; Auto vars:     Size  Location     Type
 20810 ;;		None
 20811 ;; Return value:  Size  Location     Type
 20812 ;;		None               void
 20813 ;; Registers used:
 20814 ;;		wreg, status,2
 20815 ;; Tracked objects:
 20816 ;;		On entry : 0/0
 20817 ;;		On exit  : 0/0
 20818 ;;		Unchanged: 0/0
 20819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20824 ;;Total ram usage:        0 bytes
 20825 ;; Hardware stack levels used:    1
 20826 ;; Hardware stack levels required when called:    3
 20827 ;; This function calls:
 20828 ;;		Nothing
 20829 ;; This function is called by:
 20830 ;;		_Toggle_Heater
 20831 ;;		_Do_Init
 20832 ;; This function uses a non-reentrant model
 20833 ;;
 20834                           
 20835                           	psect	text107
 20836  0051B4                     __ptext107:
 20837                           	opt stack 0
 20838  0051B4                     _Turn_Off_Fan:
 20839                           	opt stack 26
 20840                           
 20841                           ;Fan_Support.c: 56: HEATER = 0;
 20842                           
 20843                           ;incstack = 0
 20844  0051B4  0E00               	movlw	0
 20845  0051B6  0100               	movlb	0	; () banked
 20846  0051B8  6F9D               	movwf	_HEATER& (0+255),b
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;Fan_Support.c: 57: PORTEbits.RE1 = 0;
 20850  0051BA  9284               	bcf	3972,1,c	;volatile
 20851                           
 20852                           ; BSR set to: 0
 20853                           ;Fan_Support.c: 58: PORTEbits.RE2 = 0;
 20854  0051BC  9484               	bcf	3972,2,c	;volatile
 20855                           
 20856                           ; BSR set to: 0
 20857  0051BE  0012               	return		;funcret
 20858  0051C0                     __end_of_Turn_Off_Fan:
 20859                           	opt stack 0
 20860                           tblptru	equ	0xFF8
 20861                           tblptrh	equ	0xFF7
 20862                           tblptrl	equ	0xFF6
 20863                           tablat	equ	0xFF5
 20864                           prodh	equ	0xFF4
 20865                           prodl	equ	0xFF3
 20866                           intcon	equ	0xFF2
 20867                           intcon2	equ	0xFF1
 20868                           postinc0	equ	0xFEE
 20869                           wreg	equ	0xFE8
 20870                           postdec1	equ	0xFE5
 20871                           fsr1l	equ	0xFE1
 20872                           indf2	equ	0xFDF
 20873                           postinc2	equ	0xFDE
 20874                           postdec2	equ	0xFDD
 20875                           fsr2h	equ	0xFDA
 20876                           fsr2l	equ	0xFD9
 20877                           status	equ	0xFD8
 20878                           
 20879 ;; *************** function _Init_Interrupt *****************
 20880 ;; Defined at:
 20881 ;;		line 17 in file "Interrupt.c"
 20882 ;; Parameters:    Size  Location     Type
 20883 ;;		None
 20884 ;; Auto vars:     Size  Location     Type
 20885 ;;		None
 20886 ;; Return value:  Size  Location     Type
 20887 ;;		None               void
 20888 ;; Registers used:
 20889 ;;		wreg, status,2
 20890 ;; Tracked objects:
 20891 ;;		On entry : 0/0
 20892 ;;		On exit  : 0/0
 20893 ;;		Unchanged: 0/0
 20894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20899 ;;Total ram usage:        0 bytes
 20900 ;; Hardware stack levels used:    1
 20901 ;; Hardware stack levels required when called:    3
 20902 ;; This function calls:
 20903 ;;		Nothing
 20904 ;; This function is called by:
 20905 ;;		_Do_Init
 20906 ;; This function uses a non-reentrant model
 20907 ;;
 20908                           
 20909                           	psect	text108
 20910  004E20                     __ptext108:
 20911                           	opt stack 0
 20912  004E20                     _Init_Interrupt:
 20913                           	opt stack 26
 20914                           
 20915                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 20916                           
 20917                           ; BSR set to: 0
 20918                           ;incstack = 0
 20919  004E20  92F2               	bcf	intcon,1,c	;volatile
 20920                           
 20921                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 20922  004E22  90F0               	bcf	intcon3,0,c	;volatile
 20923                           
 20924                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 20925  004E24  92F0               	bcf	intcon3,1,c	;volatile
 20926                           
 20927                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 20928  004E26  88F2               	bsf	intcon,4,c	;volatile
 20929                           
 20930                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 20931  004E28  86F0               	bsf	intcon3,3,c	;volatile
 20932                           
 20933                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 20934  004E2A  88F0               	bsf	intcon3,4,c	;volatile
 20935                           
 20936                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 20937  004E2C  9CF1               	bcf	intcon2,6,c	;volatile
 20938                           
 20939                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 20940  004E2E  9AF1               	bcf	intcon2,5,c	;volatile
 20941                           
 20942                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 20943  004E30  98F1               	bcf	intcon2,4,c	;volatile
 20944                           
 20945                           ;Interrupt.c: 29: TMR1H = 0;
 20946  004E32  0E00               	movlw	0
 20947  004E34  6ECF               	movwf	4047,c	;volatile
 20948                           
 20949                           ;Interrupt.c: 30: TMR1L = 0;
 20950  004E36  0E00               	movlw	0
 20951  004E38  6ECE               	movwf	4046,c	;volatile
 20952                           
 20953                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 20954  004E3A  909E               	bcf	3998,0,c	;volatile
 20955                           
 20956                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 20957  004E3C  809D               	bsf	3997,0,c	;volatile
 20958                           
 20959                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 20960  004E3E  8CF2               	bsf	intcon,6,c	;volatile
 20961                           
 20962                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 20963  004E40  8EF2               	bsf	intcon,7,c	;volatile
 20964  004E42  0012               	return		;funcret
 20965  004E44                     __end_of_Init_Interrupt:
 20966                           	opt stack 0
 20967                           tblptru	equ	0xFF8
 20968                           tblptrh	equ	0xFF7
 20969                           tblptrl	equ	0xFF6
 20970                           tablat	equ	0xFF5
 20971                           prodh	equ	0xFF4
 20972                           prodl	equ	0xFF3
 20973                           intcon	equ	0xFF2
 20974                           intcon2	equ	0xFF1
 20975                           intcon3	equ	0xFF0
 20976                           postinc0	equ	0xFEE
 20977                           wreg	equ	0xFE8
 20978                           postdec1	equ	0xFE5
 20979                           fsr1l	equ	0xFE1
 20980                           indf2	equ	0xFDF
 20981                           postinc2	equ	0xFDE
 20982                           postdec2	equ	0xFDD
 20983                           fsr2h	equ	0xFDA
 20984                           fsr2l	equ	0xFD9
 20985                           status	equ	0xFD8
 20986                           
 20987 ;; *************** function _Init_ADC *****************
 20988 ;; Defined at:
 20989 ;;		line 185 in file "utils.c"
 20990 ;; Parameters:    Size  Location     Type
 20991 ;;		None
 20992 ;; Auto vars:     Size  Location     Type
 20993 ;;		None
 20994 ;; Return value:  Size  Location     Type
 20995 ;;		None               void
 20996 ;; Registers used:
 20997 ;;		wreg, status,2
 20998 ;; Tracked objects:
 20999 ;;		On entry : 0/0
 21000 ;;		On exit  : 0/0
 21001 ;;		Unchanged: 0/0
 21002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21007 ;;Total ram usage:        0 bytes
 21008 ;; Hardware stack levels used:    1
 21009 ;; Hardware stack levels required when called:    3
 21010 ;; This function calls:
 21011 ;;		Nothing
 21012 ;; This function is called by:
 21013 ;;		_Do_Init
 21014 ;; This function uses a non-reentrant model
 21015 ;;
 21016                           
 21017                           	psect	text109
 21018  005198                     __ptext109:
 21019                           	opt stack 0
 21020  005198                     _Init_ADC:
 21021                           	opt stack 26
 21022                           
 21023                           ;utils.c: 187: ADCON0 = 0x05;
 21024                           
 21025                           ;incstack = 0
 21026  005198  0E05               	movlw	5
 21027  00519A  6EC2               	movwf	4034,c	;volatile
 21028                           
 21029                           ;utils.c: 188: ADCON1 = 0x0D;
 21030  00519C  0E0D               	movlw	13
 21031  00519E  6EC1               	movwf	4033,c	;volatile
 21032                           
 21033                           ;utils.c: 189: ADCON2 = 0xA9;
 21034  0051A0  0EA9               	movlw	169
 21035  0051A2  6EC0               	movwf	4032,c	;volatile
 21036  0051A4  0012               	return		;funcret
 21037  0051A6                     __end_of_Init_ADC:
 21038                           	opt stack 0
 21039                           tblptru	equ	0xFF8
 21040                           tblptrh	equ	0xFF7
 21041                           tblptrl	equ	0xFF6
 21042                           tablat	equ	0xFF5
 21043                           prodh	equ	0xFF4
 21044                           prodl	equ	0xFF3
 21045                           intcon	equ	0xFF2
 21046                           intcon2	equ	0xFF1
 21047                           intcon3	equ	0xFF0
 21048                           postinc0	equ	0xFEE
 21049                           wreg	equ	0xFE8
 21050                           postdec1	equ	0xFE5
 21051                           fsr1l	equ	0xFE1
 21052                           indf2	equ	0xFDF
 21053                           postinc2	equ	0xFDE
 21054                           postdec2	equ	0xFDD
 21055                           fsr2h	equ	0xFDA
 21056                           fsr2l	equ	0xFD9
 21057                           status	equ	0xFD8
 21058                           
 21059 ;; *************** function _I2C_Init *****************
 21060 ;; Defined at:
 21061 ;;		line 10 in file "I2C_Soft.c"
 21062 ;; Parameters:    Size  Location     Type
 21063 ;;  c               4   16[COMRAM] unsigned long 
 21064 ;; Auto vars:     Size  Location     Type
 21065 ;;		None
 21066 ;; Return value:  Size  Location     Type
 21067 ;;		None               void
 21068 ;; Registers used:
 21069 ;;		wreg, cstack
 21070 ;; Tracked objects:
 21071 ;;		On entry : 0/0
 21072 ;;		On exit  : 0/0
 21073 ;;		Unchanged: 0/0
 21074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21075 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21078 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;Total ram usage:        4 bytes
 21080 ;; Hardware stack levels used:    1
 21081 ;; Hardware stack levels required when called:    4
 21082 ;; This function calls:
 21083 ;;		_i2cHighScl
 21084 ;;		_i2cHighSda
 21085 ;; This function is called by:
 21086 ;;		_Do_Init
 21087 ;; This function uses a non-reentrant model
 21088 ;;
 21089                           
 21090                           	psect	text110
 21091  0051CC                     __ptext110:
 21092                           	opt stack 0
 21093  0051CC                     _I2C_Init:
 21094                           	opt stack 25
 21095                           
 21096                           ;I2C_Soft.c: 12: i2cHighScl();
 21097                           
 21098                           ;incstack = 0
 21099  0051CC  ECE0  F028         	call	_i2cHighScl	;wreg free
 21100                           
 21101                           ;I2C_Soft.c: 13: i2cHighSda();
 21102  0051D0  EC0C  F029         	call	_i2cHighSda	;wreg free
 21103  0051D4  0012               	return		;funcret
 21104  0051D6                     __end_of_I2C_Init:
 21105                           	opt stack 0
 21106                           tblptru	equ	0xFF8
 21107                           tblptrh	equ	0xFF7
 21108                           tblptrl	equ	0xFF6
 21109                           tablat	equ	0xFF5
 21110                           prodh	equ	0xFF4
 21111                           prodl	equ	0xFF3
 21112                           intcon	equ	0xFF2
 21113                           intcon2	equ	0xFF1
 21114                           intcon3	equ	0xFF0
 21115                           postinc0	equ	0xFEE
 21116                           wreg	equ	0xFE8
 21117                           postdec1	equ	0xFE5
 21118                           fsr1l	equ	0xFE1
 21119                           indf2	equ	0xFDF
 21120                           postinc2	equ	0xFDE
 21121                           postdec2	equ	0xFDD
 21122                           fsr2h	equ	0xFDA
 21123                           fsr2l	equ	0xFD9
 21124                           status	equ	0xFD8
 21125                           
 21126 ;; *************** function _DS1621_Init *****************
 21127 ;; Defined at:
 21128 ;;		line 22 in file "I2C_Support.c"
 21129 ;; Parameters:    Size  Location     Type
 21130 ;;		None
 21131 ;; Auto vars:     Size  Location     Type
 21132 ;;  Device          1   21[COMRAM] unsigned char 
 21133 ;; Return value:  Size  Location     Type
 21134 ;;		None               void
 21135 ;; Registers used:
 21136 ;;		wreg, status,2, status,0, cstack
 21137 ;; Tracked objects:
 21138 ;;		On entry : 0/0
 21139 ;;		On exit  : 0/0
 21140 ;;		Unchanged: 0/0
 21141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;Total ram usage:        1 bytes
 21147 ;; Hardware stack levels used:    1
 21148 ;; Hardware stack levels required when called:    6
 21149 ;; This function calls:
 21150 ;;		_I2C_Write_Cmd_Only
 21151 ;;		_I2C_Write_Cmd_Write_Data
 21152 ;; This function is called by:
 21153 ;;		_Do_Init
 21154 ;; This function uses a non-reentrant model
 21155 ;;
 21156                           
 21157                           	psect	text111
 21158  004F4A                     __ptext111:
 21159                           	opt stack 0
 21160  004F4A                     _DS1621_Init:
 21161                           	opt stack 23
 21162                           
 21163                           ;I2C_Support.c: 24: char Device = 0x48;
 21164                           
 21165                           ;incstack = 0
 21166  004F4A  0E48               	movlw	72
 21167  004F4C  6E16               	movwf	DS1621_Init@Device,c
 21168                           
 21169                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 21170  004F4E  0EAC               	movlw	172
 21171  004F50  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 21172  004F52  0E02               	movlw	2
 21173  004F54  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 21174  004F56  5016               	movf	DS1621_Init@Device,w,c
 21175  004F58  EC95  F027         	call	_I2C_Write_Cmd_Write_Data
 21176                           
 21177                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 21178  004F5C  0EEE               	movlw	238
 21179  004F5E  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 21180  004F60  5016               	movf	DS1621_Init@Device,w,c
 21181  004F62  ECEA  F027         	call	_I2C_Write_Cmd_Only
 21182  004F66  0012               	return		;funcret
 21183  004F68                     __end_of_DS1621_Init:
 21184                           	opt stack 0
 21185                           tblptru	equ	0xFF8
 21186                           tblptrh	equ	0xFF7
 21187                           tblptrl	equ	0xFF6
 21188                           tablat	equ	0xFF5
 21189                           prodh	equ	0xFF4
 21190                           prodl	equ	0xFF3
 21191                           intcon	equ	0xFF2
 21192                           intcon2	equ	0xFF1
 21193                           intcon3	equ	0xFF0
 21194                           postinc0	equ	0xFEE
 21195                           wreg	equ	0xFE8
 21196                           postdec1	equ	0xFE5
 21197                           fsr1l	equ	0xFE1
 21198                           indf2	equ	0xFDF
 21199                           postinc2	equ	0xFDE
 21200                           postdec2	equ	0xFDD
 21201                           fsr2h	equ	0xFDA
 21202                           fsr2l	equ	0xFD9
 21203                           status	equ	0xFD8
 21204                           
 21205 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 21206 ;; Defined at:
 21207 ;;		line 148 in file "I2C_Soft.c"
 21208 ;; Parameters:    Size  Location     Type
 21209 ;;  Device          1    wreg     unsigned char 
 21210 ;;  Cmd             1   18[COMRAM] unsigned char 
 21211 ;;  Data_Out        1   19[COMRAM] unsigned char 
 21212 ;; Auto vars:     Size  Location     Type
 21213 ;;  Device          1   20[COMRAM] unsigned char 
 21214 ;; Return value:  Size  Location     Type
 21215 ;;		None               void
 21216 ;; Registers used:
 21217 ;;		wreg, status,2, status,0, cstack
 21218 ;; Tracked objects:
 21219 ;;		On entry : 0/0
 21220 ;;		On exit  : 0/0
 21221 ;;		Unchanged: 0/0
 21222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21226 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21227 ;;Total ram usage:        3 bytes
 21228 ;; Hardware stack levels used:    1
 21229 ;; Hardware stack levels required when called:    5
 21230 ;; This function calls:
 21231 ;;		_I2C_Start
 21232 ;;		_I2C_Stop
 21233 ;;		_I2C_Write
 21234 ;; This function is called by:
 21235 ;;		_DS1621_Init
 21236 ;; This function uses a non-reentrant model
 21237 ;;
 21238                           
 21239                           	psect	text112
 21240  004F2A                     __ptext112:
 21241                           	opt stack 0
 21242  004F2A                     _I2C_Write_Cmd_Write_Data:
 21243                           	opt stack 23
 21244                           
 21245                           ;incstack = 0
 21246                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 21247  004F2A  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 21248                           
 21249                           ;I2C_Soft.c: 150: I2C_Start();
 21250  004F2C  EC8B  F028         	call	_I2C_Start	;wreg free
 21251                           
 21252                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 21253  004F30  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 21254  004F32  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 21255  004F34  ECA6  F025         	call	_I2C_Write
 21256                           
 21257                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 21258  004F38  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 21259  004F3A  ECA6  F025         	call	_I2C_Write
 21260                           
 21261                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 21262  004F3E  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 21263  004F40  ECA6  F025         	call	_I2C_Write
 21264                           
 21265                           ;I2C_Soft.c: 154: I2C_Stop();
 21266  004F44  EC82  F028         	call	_I2C_Stop	;wreg free
 21267  004F48  0012               	return		;funcret
 21268  004F4A                     __end_of_I2C_Write_Cmd_Write_Data:
 21269                           	opt stack 0
 21270                           tblptru	equ	0xFF8
 21271                           tblptrh	equ	0xFF7
 21272                           tblptrl	equ	0xFF6
 21273                           tablat	equ	0xFF5
 21274                           prodh	equ	0xFF4
 21275                           prodl	equ	0xFF3
 21276                           intcon	equ	0xFF2
 21277                           intcon2	equ	0xFF1
 21278                           intcon3	equ	0xFF0
 21279                           postinc0	equ	0xFEE
 21280                           wreg	equ	0xFE8
 21281                           postdec1	equ	0xFE5
 21282                           fsr1l	equ	0xFE1
 21283                           indf2	equ	0xFDF
 21284                           postinc2	equ	0xFDE
 21285                           postdec2	equ	0xFDD
 21286                           fsr2h	equ	0xFDA
 21287                           fsr2l	equ	0xFD9
 21288                           status	equ	0xFD8
 21289                           
 21290 ;; *************** function _I2C_Write_Cmd_Only *****************
 21291 ;; Defined at:
 21292 ;;		line 140 in file "I2C_Soft.c"
 21293 ;; Parameters:    Size  Location     Type
 21294 ;;  Device          1    wreg     unsigned char 
 21295 ;;  Cmd             1   18[COMRAM] unsigned char 
 21296 ;; Auto vars:     Size  Location     Type
 21297 ;;  Device          1   19[COMRAM] unsigned char 
 21298 ;; Return value:  Size  Location     Type
 21299 ;;		None               void
 21300 ;; Registers used:
 21301 ;;		wreg, status,2, status,0, cstack
 21302 ;; Tracked objects:
 21303 ;;		On entry : 0/0
 21304 ;;		On exit  : 0/0
 21305 ;;		Unchanged: 0/0
 21306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21307 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21311 ;;Total ram usage:        2 bytes
 21312 ;; Hardware stack levels used:    1
 21313 ;; Hardware stack levels required when called:    5
 21314 ;; This function calls:
 21315 ;;		_I2C_Start
 21316 ;;		_I2C_Stop
 21317 ;;		_I2C_Write
 21318 ;; This function is called by:
 21319 ;;		_DS1621_Init
 21320 ;; This function uses a non-reentrant model
 21321 ;;
 21322                           
 21323                           	psect	text113
 21324  004FD4                     __ptext113:
 21325                           	opt stack 0
 21326  004FD4                     _I2C_Write_Cmd_Only:
 21327                           	opt stack 23
 21328                           
 21329                           ;incstack = 0
 21330                           ;I2C_Write_Cmd_Only@Device stored from wreg
 21331  004FD4  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 21332                           
 21333                           ;I2C_Soft.c: 142: I2C_Start();
 21334  004FD6  EC8B  F028         	call	_I2C_Start	;wreg free
 21335                           
 21336                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 21337  004FDA  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 21338  004FDC  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 21339  004FDE  ECA6  F025         	call	_I2C_Write
 21340                           
 21341                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 21342  004FE2  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 21343  004FE4  ECA6  F025         	call	_I2C_Write
 21344                           
 21345                           ;I2C_Soft.c: 145: I2C_Stop();
 21346  004FE8  EC82  F028         	call	_I2C_Stop	;wreg free
 21347  004FEC  0012               	return		;funcret
 21348  004FEE                     __end_of_I2C_Write_Cmd_Only:
 21349                           	opt stack 0
 21350                           tblptru	equ	0xFF8
 21351                           tblptrh	equ	0xFF7
 21352                           tblptrl	equ	0xFF6
 21353                           tablat	equ	0xFF5
 21354                           prodh	equ	0xFF4
 21355                           prodl	equ	0xFF3
 21356                           intcon	equ	0xFF2
 21357                           intcon2	equ	0xFF1
 21358                           intcon3	equ	0xFF0
 21359                           postinc0	equ	0xFEE
 21360                           wreg	equ	0xFE8
 21361                           postdec1	equ	0xFE5
 21362                           fsr1l	equ	0xFE1
 21363                           indf2	equ	0xFDF
 21364                           postinc2	equ	0xFDE
 21365                           postdec2	equ	0xFDD
 21366                           fsr2h	equ	0xFDA
 21367                           fsr2l	equ	0xFD9
 21368                           status	equ	0xFD8
 21369                           
 21370 ;; *************** function _DS1621_Read_Temp *****************
 21371 ;; Defined at:
 21372 ;;		line 29 in file "I2C_Support.c"
 21373 ;; Parameters:    Size  Location     Type
 21374 ;;		None
 21375 ;; Auto vars:     Size  Location     Type
 21376 ;;  Device          1   23[COMRAM] unsigned char 
 21377 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 21378 ;;  Cmd             1   21[COMRAM] unsigned char 
 21379 ;; Return value:  Size  Location     Type
 21380 ;;                  2   19[COMRAM] int 
 21381 ;; Registers used:
 21382 ;;		wreg, status,2, status,0, cstack
 21383 ;; Tracked objects:
 21384 ;;		On entry : 0/0
 21385 ;;		On exit  : 0/0
 21386 ;;		Unchanged: 0/0
 21387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21388 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21389 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21392 ;;Total ram usage:        5 bytes
 21393 ;; Hardware stack levels used:    1
 21394 ;; Hardware stack levels required when called:    6
 21395 ;; This function calls:
 21396 ;;		_I2C_ReStart
 21397 ;;		_I2C_Read
 21398 ;;		_I2C_Start
 21399 ;;		_I2C_Stop
 21400 ;;		_I2C_Write
 21401 ;; This function is called by:
 21402 ;;		_main
 21403 ;; This function uses a non-reentrant model
 21404 ;;
 21405                           
 21406                           	psect	text114
 21407  004BC6                     __ptext114:
 21408                           	opt stack 0
 21409  004BC6                     _DS1621_Read_Temp:
 21410                           	opt stack 24
 21411                           
 21412                           ;I2C_Support.c: 32: char Device = 0x48;
 21413                           
 21414                           ;incstack = 0
 21415  004BC6  0E48               	movlw	72
 21416  004BC8  6E18               	movwf	DS1621_Read_Temp@Device,c
 21417                           
 21418                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 21419  004BCA  0EAA               	movlw	170
 21420  004BCC  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 21421                           
 21422                           ;I2C_Support.c: 34: char Data_Ret;
 21423                           ;I2C_Support.c: 35: I2C_Start();
 21424  004BCE  EC8B  F028         	call	_I2C_Start	;wreg free
 21425                           
 21426                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 21427  004BD2  5018               	movf	DS1621_Read_Temp@Device,w,c
 21428  004BD4  2418               	addwf	DS1621_Read_Temp@Device,w,c
 21429  004BD6  ECA6  F025         	call	_I2C_Write
 21430                           
 21431                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 21432  004BDA  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 21433  004BDC  ECA6  F025         	call	_I2C_Write
 21434                           
 21435                           ;I2C_Support.c: 38: I2C_ReStart();
 21436  004BE0  EC0E  F028         	call	_I2C_ReStart	;wreg free
 21437                           
 21438                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 21439  004BE4  80D8               	bsf	status,0,c
 21440  004BE6  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 21441  004BE8  ECA6  F025         	call	_I2C_Write
 21442                           
 21443                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 21444  004BEC  0E00               	movlw	0
 21445  004BEE  EC03  F025         	call	_I2C_Read
 21446  004BF2  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 21447                           
 21448                           ;I2C_Support.c: 41: I2C_Stop();
 21449  004BF4  EC82  F028         	call	_I2C_Stop	;wreg free
 21450                           
 21451                           ;I2C_Support.c: 42: return Data_Ret;
 21452  004BF8  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 21453  004BFC  6A15               	clrf	?_DS1621_Read_Temp+1,c
 21454  004BFE  D000               	goto	l195
 21455  004C00                     l195:
 21456  004C00  0012               	return		;funcret
 21457  004C02                     __end_of_DS1621_Read_Temp:
 21458                           	opt stack 0
 21459                           tblptru	equ	0xFF8
 21460                           tblptrh	equ	0xFF7
 21461                           tblptrl	equ	0xFF6
 21462                           tablat	equ	0xFF5
 21463                           prodh	equ	0xFF4
 21464                           prodl	equ	0xFF3
 21465                           intcon	equ	0xFF2
 21466                           intcon2	equ	0xFF1
 21467                           intcon3	equ	0xFF0
 21468                           postinc0	equ	0xFEE
 21469                           wreg	equ	0xFE8
 21470                           postdec1	equ	0xFE5
 21471                           fsr1l	equ	0xFE1
 21472                           indf2	equ	0xFDF
 21473                           postinc2	equ	0xFDE
 21474                           postdec2	equ	0xFDD
 21475                           fsr2h	equ	0xFDA
 21476                           fsr2l	equ	0xFD9
 21477                           status	equ	0xFD8
 21478                           
 21479 ;; *************** function _I2C_Write *****************
 21480 ;; Defined at:
 21481 ;;		line 37 in file "I2C_Soft.c"
 21482 ;; Parameters:    Size  Location     Type
 21483 ;;  outByte         1    wreg     unsigned char 
 21484 ;; Auto vars:     Size  Location     Type
 21485 ;;  outByte         1   16[COMRAM] unsigned char 
 21486 ;;  n               1   17[COMRAM] unsigned char 
 21487 ;; Return value:  Size  Location     Type
 21488 ;;		None               void
 21489 ;; Registers used:
 21490 ;;		wreg, status,2, status,0, cstack
 21491 ;; Tracked objects:
 21492 ;;		On entry : 0/0
 21493 ;;		On exit  : 0/0
 21494 ;;		Unchanged: 0/0
 21495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21499 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21500 ;;Total ram usage:        2 bytes
 21501 ;; Hardware stack levels used:    1
 21502 ;; Hardware stack levels required when called:    4
 21503 ;; This function calls:
 21504 ;;		_i2cHighScl
 21505 ;;		_i2cHighSda
 21506 ;;		_i2cLowScl
 21507 ;;		_i2cLowSda
 21508 ;; This function is called by:
 21509 ;;		_I2C_Write_Address_Read_One_Byte
 21510 ;;		_I2C_Write_Address_Write_One_Byte
 21511 ;;		_I2C_Write_Cmd_Only
 21512 ;;		_I2C_Write_Cmd_Write_Data
 21513 ;;		_DS1621_Read_Temp
 21514 ;;		_DS3231_Read_Time
 21515 ;;		_DS3231_Write_Time
 21516 ;;		_DS3231_Read_Alarm_Time
 21517 ;;		_DS3231_Init
 21518 ;;		_DS3231_Write_Alarm_Time
 21519 ;;		_I2C_Write_Cmd_Read_One_Byte
 21520 ;;		_DS3231_Setup_Time
 21521 ;; This function uses a non-reentrant model
 21522 ;;
 21523                           
 21524                           	psect	text115
 21525  004B4C                     __ptext115:
 21526                           	opt stack 0
 21527  004B4C                     _I2C_Write:
 21528                           	opt stack 23
 21529                           
 21530                           ;incstack = 0
 21531                           ;I2C_Write@outByte stored from wreg
 21532  004B4C  6E11               	movwf	I2C_Write@outByte,c
 21533                           
 21534                           ;I2C_Soft.c: 39: unsigned char n;
 21535                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 21536  004B4E  0E00               	movlw	0
 21537  004B50  6E12               	movwf	I2C_Write@n,c
 21538  004B52                     l5880:
 21539  004B52  0E07               	movlw	7
 21540  004B54  6412               	cpfsgt	I2C_Write@n,c
 21541  004B56  D001               	goto	l83
 21542  004B58  D011               	goto	l5898
 21543  004B5A                     l83:
 21544                           
 21545                           ;I2C_Soft.c: 41: {
 21546                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 21547  004B5A  AE11               	btfss	I2C_Write@outByte,7,c
 21548  004B5C  D003               	goto	l5886
 21549  004B5E  EC0C  F029         	call	_i2cHighSda	;wreg free
 21550  004B62  D003               	goto	l5888
 21551  004B64                     l5886:
 21552                           
 21553                           ;I2C_Soft.c: 43: else i2cLowSda();
 21554  004B64  ECF0  F028         	call	_i2cLowSda	;wreg free
 21555  004B68  D000               	goto	l5888
 21556  004B6A                     l5888:
 21557                           
 21558                           ;I2C_Soft.c: 44: i2cHighScl();
 21559  004B6A  ECE0  F028         	call	_i2cHighScl	;wreg free
 21560                           
 21561                           ;I2C_Soft.c: 45: i2cLowScl();
 21562  004B6E  EC08  F029         	call	_i2cLowScl	;wreg free
 21563                           
 21564                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 21565  004B72  5011               	movf	I2C_Write@outByte,w,c
 21566  004B74  2411               	addwf	I2C_Write@outByte,w,c
 21567  004B76  6E11               	movwf	I2C_Write@outByte,c
 21568  004B78  2A12               	incf	I2C_Write@n,f,c
 21569  004B7A  D7EB               	goto	l5880
 21570  004B7C                     l5898:
 21571                           
 21572                           ;I2C_Soft.c: 47: }
 21573                           ;I2C_Soft.c: 48: i2cHighSda();
 21574  004B7C  EC0C  F029         	call	_i2cHighSda	;wreg free
 21575                           
 21576                           ;I2C_Soft.c: 49: i2cHighScl();
 21577  004B80  ECE0  F028         	call	_i2cHighScl	;wreg free
 21578                           
 21579                           ;I2C_Soft.c: 50: i2cLowScl();
 21580  004B84  EC08  F029         	call	_i2cLowScl	;wreg free
 21581  004B88  0012               	return		;funcret
 21582  004B8A                     __end_of_I2C_Write:
 21583                           	opt stack 0
 21584                           tblptru	equ	0xFF8
 21585                           tblptrh	equ	0xFF7
 21586                           tblptrl	equ	0xFF6
 21587                           tablat	equ	0xFF5
 21588                           prodh	equ	0xFF4
 21589                           prodl	equ	0xFF3
 21590                           intcon	equ	0xFF2
 21591                           intcon2	equ	0xFF1
 21592                           intcon3	equ	0xFF0
 21593                           postinc0	equ	0xFEE
 21594                           wreg	equ	0xFE8
 21595                           postdec1	equ	0xFE5
 21596                           fsr1l	equ	0xFE1
 21597                           indf2	equ	0xFDF
 21598                           postinc2	equ	0xFDE
 21599                           postdec2	equ	0xFDD
 21600                           fsr2h	equ	0xFDA
 21601                           fsr2l	equ	0xFD9
 21602                           status	equ	0xFD8
 21603                           
 21604 ;; *************** function _I2C_Stop *****************
 21605 ;; Defined at:
 21606 ;;		line 84 in file "I2C_Soft.c"
 21607 ;; Parameters:    Size  Location     Type
 21608 ;;		None
 21609 ;; Auto vars:     Size  Location     Type
 21610 ;;		None
 21611 ;; Return value:  Size  Location     Type
 21612 ;;		None               void
 21613 ;; Registers used:
 21614 ;;		wreg, cstack
 21615 ;; Tracked objects:
 21616 ;;		On entry : 0/0
 21617 ;;		On exit  : 0/0
 21618 ;;		Unchanged: 0/0
 21619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21624 ;;Total ram usage:        0 bytes
 21625 ;; Hardware stack levels used:    1
 21626 ;; Hardware stack levels required when called:    4
 21627 ;; This function calls:
 21628 ;;		_i2cHighScl
 21629 ;;		_i2cHighSda
 21630 ;;		_i2cLowScl
 21631 ;;		_i2cLowSda
 21632 ;; This function is called by:
 21633 ;;		_I2C_Write_Address_Read_One_Byte
 21634 ;;		_I2C_Write_Address_Write_One_Byte
 21635 ;;		_I2C_Write_Cmd_Only
 21636 ;;		_I2C_Write_Cmd_Write_Data
 21637 ;;		_DS1621_Read_Temp
 21638 ;;		_DS3231_Read_Time
 21639 ;;		_DS3231_Write_Time
 21640 ;;		_DS3231_Read_Alarm_Time
 21641 ;;		_DS3231_Init
 21642 ;;		_DS3231_Write_Alarm_Time
 21643 ;;		_I2C_Write_Cmd_Read_One_Byte
 21644 ;;		_DS3231_Setup_Time
 21645 ;; This function uses a non-reentrant model
 21646 ;;
 21647                           
 21648                           	psect	text116
 21649  005104                     __ptext116:
 21650                           	opt stack 0
 21651  005104                     _I2C_Stop:
 21652                           	opt stack 23
 21653                           
 21654                           ;I2C_Soft.c: 86: i2cLowScl();
 21655                           
 21656                           ;incstack = 0
 21657  005104  EC08  F029         	call	_i2cLowScl	;wreg free
 21658                           
 21659                           ;I2C_Soft.c: 87: i2cLowSda();
 21660  005108  ECF0  F028         	call	_i2cLowSda	;wreg free
 21661                           
 21662                           ;I2C_Soft.c: 88: i2cHighScl();
 21663  00510C  ECE0  F028         	call	_i2cHighScl	;wreg free
 21664                           
 21665                           ;I2C_Soft.c: 89: i2cHighSda();
 21666  005110  EC0C  F029         	call	_i2cHighSda	;wreg free
 21667  005114  0012               	return		;funcret
 21668  005116                     __end_of_I2C_Stop:
 21669                           	opt stack 0
 21670                           tblptru	equ	0xFF8
 21671                           tblptrh	equ	0xFF7
 21672                           tblptrl	equ	0xFF6
 21673                           tablat	equ	0xFF5
 21674                           prodh	equ	0xFF4
 21675                           prodl	equ	0xFF3
 21676                           intcon	equ	0xFF2
 21677                           intcon2	equ	0xFF1
 21678                           intcon3	equ	0xFF0
 21679                           postinc0	equ	0xFEE
 21680                           wreg	equ	0xFE8
 21681                           postdec1	equ	0xFE5
 21682                           fsr1l	equ	0xFE1
 21683                           indf2	equ	0xFDF
 21684                           postinc2	equ	0xFDE
 21685                           postdec2	equ	0xFDD
 21686                           fsr2h	equ	0xFDA
 21687                           fsr2l	equ	0xFD9
 21688                           status	equ	0xFD8
 21689                           
 21690 ;; *************** function _I2C_Start *****************
 21691 ;; Defined at:
 21692 ;;		line 67 in file "I2C_Soft.c"
 21693 ;; Parameters:    Size  Location     Type
 21694 ;;		None
 21695 ;; Auto vars:     Size  Location     Type
 21696 ;;		None
 21697 ;; Return value:  Size  Location     Type
 21698 ;;		None               void
 21699 ;; Registers used:
 21700 ;;		wreg, cstack
 21701 ;; Tracked objects:
 21702 ;;		On entry : 0/0
 21703 ;;		On exit  : 0/0
 21704 ;;		Unchanged: 0/0
 21705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21710 ;;Total ram usage:        0 bytes
 21711 ;; Hardware stack levels used:    1
 21712 ;; Hardware stack levels required when called:    4
 21713 ;; This function calls:
 21714 ;;		_i2cHighScl
 21715 ;;		_i2cHighSda
 21716 ;;		_i2cLowScl
 21717 ;;		_i2cLowSda
 21718 ;; This function is called by:
 21719 ;;		_I2C_Write_Address_Read_One_Byte
 21720 ;;		_I2C_Write_Address_Write_One_Byte
 21721 ;;		_I2C_Write_Cmd_Only
 21722 ;;		_I2C_Write_Cmd_Write_Data
 21723 ;;		_DS1621_Read_Temp
 21724 ;;		_DS3231_Read_Time
 21725 ;;		_DS3231_Write_Time
 21726 ;;		_DS3231_Read_Alarm_Time
 21727 ;;		_DS3231_Init
 21728 ;;		_DS3231_Write_Alarm_Time
 21729 ;;		_I2C_Write_Cmd_Read_One_Byte
 21730 ;;		_DS3231_Setup_Time
 21731 ;; This function uses a non-reentrant model
 21732 ;;
 21733                           
 21734                           	psect	text117
 21735  005116                     __ptext117:
 21736                           	opt stack 0
 21737  005116                     _I2C_Start:
 21738                           	opt stack 23
 21739                           
 21740                           ;I2C_Soft.c: 69: i2cHighSda();
 21741                           
 21742                           ;incstack = 0
 21743  005116  EC0C  F029         	call	_i2cHighSda	;wreg free
 21744                           
 21745                           ;I2C_Soft.c: 70: i2cHighScl();
 21746  00511A  ECE0  F028         	call	_i2cHighScl	;wreg free
 21747                           
 21748                           ;I2C_Soft.c: 71: i2cLowSda();
 21749  00511E  ECF0  F028         	call	_i2cLowSda	;wreg free
 21750                           
 21751                           ;I2C_Soft.c: 72: i2cLowScl();
 21752  005122  EC08  F029         	call	_i2cLowScl	;wreg free
 21753  005126  0012               	return		;funcret
 21754  005128                     __end_of_I2C_Start:
 21755                           	opt stack 0
 21756                           tblptru	equ	0xFF8
 21757                           tblptrh	equ	0xFF7
 21758                           tblptrl	equ	0xFF6
 21759                           tablat	equ	0xFF5
 21760                           prodh	equ	0xFF4
 21761                           prodl	equ	0xFF3
 21762                           intcon	equ	0xFF2
 21763                           intcon2	equ	0xFF1
 21764                           intcon3	equ	0xFF0
 21765                           postinc0	equ	0xFEE
 21766                           wreg	equ	0xFE8
 21767                           postdec1	equ	0xFE5
 21768                           fsr1l	equ	0xFE1
 21769                           indf2	equ	0xFDF
 21770                           postinc2	equ	0xFDE
 21771                           postdec2	equ	0xFDD
 21772                           fsr2h	equ	0xFDA
 21773                           fsr2l	equ	0xFD9
 21774                           status	equ	0xFD8
 21775                           
 21776 ;; *************** function _I2C_Read *****************
 21777 ;; Defined at:
 21778 ;;		line 16 in file "I2C_Soft.c"
 21779 ;; Parameters:    Size  Location     Type
 21780 ;;  ack             1    wreg     unsigned char 
 21781 ;; Auto vars:     Size  Location     Type
 21782 ;;  ack             1   16[COMRAM] unsigned char 
 21783 ;;  inByte          1   18[COMRAM] unsigned char 
 21784 ;;  n               1   17[COMRAM] unsigned char 
 21785 ;; Return value:  Size  Location     Type
 21786 ;;                  1    wreg      unsigned char 
 21787 ;; Registers used:
 21788 ;;		wreg, status,2, status,0, cstack
 21789 ;; Tracked objects:
 21790 ;;		On entry : 0/0
 21791 ;;		On exit  : 0/0
 21792 ;;		Unchanged: 0/0
 21793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21795 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21797 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21798 ;;Total ram usage:        3 bytes
 21799 ;; Hardware stack levels used:    1
 21800 ;; Hardware stack levels required when called:    5
 21801 ;; This function calls:
 21802 ;;		_i2cAck
 21803 ;;		_i2cHighScl
 21804 ;;		_i2cHighSda
 21805 ;;		_i2cLowScl
 21806 ;;		_i2cNack
 21807 ;; This function is called by:
 21808 ;;		_I2C_Write_Address_Read_One_Byte
 21809 ;;		_DS1621_Read_Temp
 21810 ;;		_DS3231_Read_Time
 21811 ;;		_DS3231_Read_Alarm_Time
 21812 ;;		_DS3231_Init
 21813 ;;		_I2C_Write_Cmd_Read_One_Byte
 21814 ;; This function uses a non-reentrant model
 21815 ;;
 21816                           
 21817                           	psect	text118
 21818  004A06                     __ptext118:
 21819                           	opt stack 0
 21820  004A06                     _I2C_Read:
 21821                           	opt stack 22
 21822                           
 21823                           ;incstack = 0
 21824                           ;I2C_Read@ack stored from wreg
 21825  004A06  6E11               	movwf	I2C_Read@ack,c
 21826                           
 21827                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 21828                           ;I2C_Soft.c: 19: i2cHighSda();
 21829  004A08  EC0C  F029         	call	_i2cHighSda	;wreg free
 21830                           
 21831                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 21832  004A0C  0E00               	movlw	0
 21833  004A0E  6E12               	movwf	I2C_Read@n,c
 21834  004A10                     l5850:
 21835  004A10  0E07               	movlw	7
 21836  004A12  6412               	cpfsgt	I2C_Read@n,c
 21837  004A14  D001               	goto	l5854
 21838  004A16  D00F               	goto	l5868
 21839  004A18                     l5854:
 21840                           
 21841                           ;I2C_Soft.c: 21: {
 21842                           ;I2C_Soft.c: 22: i2cHighScl();
 21843  004A18  ECE0  F028         	call	_i2cHighScl	;wreg free
 21844                           
 21845                           ;I2C_Soft.c: 24: if (PORTBbits.RB5)
 21846  004A1C  AA81               	btfss	3969,5,c	;volatile
 21847  004A1E  D003               	goto	l5860
 21848                           
 21849                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 21850  004A20  80D8               	bsf	status,0,c
 21851  004A22  3613               	rlcf	I2C_Read@inByte,f,c
 21852  004A24  D004               	goto	l5862
 21853  004A26                     l5860:
 21854                           
 21855                           ;I2C_Soft.c: 26: else
 21856                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 21857  004A26  5013               	movf	I2C_Read@inByte,w,c
 21858  004A28  2413               	addwf	I2C_Read@inByte,w,c
 21859  004A2A  6E13               	movwf	I2C_Read@inByte,c
 21860  004A2C  D000               	goto	l5862
 21861  004A2E                     l5862:
 21862                           
 21863                           ;I2C_Soft.c: 28: i2cLowScl();
 21864  004A2E  EC08  F029         	call	_i2cLowScl	;wreg free
 21865  004A32  2A12               	incf	I2C_Read@n,f,c
 21866  004A34  D7ED               	goto	l5850
 21867  004A36                     l5868:
 21868                           
 21869                           ;I2C_Soft.c: 29: }
 21870                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 21871  004A36  5011               	movf	I2C_Read@ack,w,c
 21872  004A38  B4D8               	btfsc	status,2,c
 21873  004A3A  D003               	goto	l5872
 21874  004A3C  EC94  F028         	call	_i2cAck	;wreg free
 21875  004A40  D003               	goto	l5874
 21876  004A42                     l5872:
 21877                           
 21878                           ;I2C_Soft.c: 31: else i2cNack();
 21879  004A42  ECEB  F028         	call	_i2cNack	;wreg free
 21880  004A46  D000               	goto	l5874
 21881  004A48                     l5874:
 21882                           
 21883                           ;I2C_Soft.c: 34: return(inByte);
 21884  004A48  5013               	movf	I2C_Read@inByte,w,c
 21885  004A4A  D000               	goto	l80
 21886  004A4C                     l80:
 21887  004A4C  0012               	return		;funcret
 21888  004A4E                     __end_of_I2C_Read:
 21889                           	opt stack 0
 21890                           tblptru	equ	0xFF8
 21891                           tblptrh	equ	0xFF7
 21892                           tblptrl	equ	0xFF6
 21893                           tablat	equ	0xFF5
 21894                           prodh	equ	0xFF4
 21895                           prodl	equ	0xFF3
 21896                           intcon	equ	0xFF2
 21897                           intcon2	equ	0xFF1
 21898                           intcon3	equ	0xFF0
 21899                           postinc0	equ	0xFEE
 21900                           wreg	equ	0xFE8
 21901                           postdec1	equ	0xFE5
 21902                           fsr1l	equ	0xFE1
 21903                           indf2	equ	0xFDF
 21904                           postinc2	equ	0xFDE
 21905                           postdec2	equ	0xFDD
 21906                           fsr2h	equ	0xFDA
 21907                           fsr2l	equ	0xFD9
 21908                           status	equ	0xFD8
 21909                           
 21910 ;; *************** function _i2cNack *****************
 21911 ;; Defined at:
 21912 ;;		line 53 in file "I2C_Soft.c"
 21913 ;; Parameters:    Size  Location     Type
 21914 ;;		None
 21915 ;; Auto vars:     Size  Location     Type
 21916 ;;		None
 21917 ;; Return value:  Size  Location     Type
 21918 ;;		None               void
 21919 ;; Registers used:
 21920 ;;		wreg, cstack
 21921 ;; Tracked objects:
 21922 ;;		On entry : 0/0
 21923 ;;		On exit  : 0/0
 21924 ;;		Unchanged: 0/0
 21925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21930 ;;Total ram usage:        0 bytes
 21931 ;; Hardware stack levels used:    1
 21932 ;; Hardware stack levels required when called:    4
 21933 ;; This function calls:
 21934 ;;		_i2cHighScl
 21935 ;;		_i2cLowScl
 21936 ;; This function is called by:
 21937 ;;		_I2C_Read
 21938 ;; This function uses a non-reentrant model
 21939 ;;
 21940                           
 21941                           	psect	text119
 21942  0051D6                     __ptext119:
 21943                           	opt stack 0
 21944  0051D6                     _i2cNack:
 21945                           	opt stack 22
 21946                           
 21947                           ;I2C_Soft.c: 55: i2cHighScl();
 21948                           
 21949                           ;incstack = 0
 21950  0051D6  ECE0  F028         	call	_i2cHighScl	;wreg free
 21951                           
 21952                           ;I2C_Soft.c: 56: i2cLowScl();
 21953  0051DA  EC08  F029         	call	_i2cLowScl	;wreg free
 21954  0051DE  0012               	return		;funcret
 21955  0051E0                     __end_of_i2cNack:
 21956                           	opt stack 0
 21957                           tblptru	equ	0xFF8
 21958                           tblptrh	equ	0xFF7
 21959                           tblptrl	equ	0xFF6
 21960                           tablat	equ	0xFF5
 21961                           prodh	equ	0xFF4
 21962                           prodl	equ	0xFF3
 21963                           intcon	equ	0xFF2
 21964                           intcon2	equ	0xFF1
 21965                           intcon3	equ	0xFF0
 21966                           postinc0	equ	0xFEE
 21967                           wreg	equ	0xFE8
 21968                           postdec1	equ	0xFE5
 21969                           fsr1l	equ	0xFE1
 21970                           indf2	equ	0xFDF
 21971                           postinc2	equ	0xFDE
 21972                           postdec2	equ	0xFDD
 21973                           fsr2h	equ	0xFDA
 21974                           fsr2l	equ	0xFD9
 21975                           status	equ	0xFD8
 21976                           
 21977 ;; *************** function _i2cAck *****************
 21978 ;; Defined at:
 21979 ;;		line 59 in file "I2C_Soft.c"
 21980 ;; Parameters:    Size  Location     Type
 21981 ;;		None
 21982 ;; Auto vars:     Size  Location     Type
 21983 ;;		None
 21984 ;; Return value:  Size  Location     Type
 21985 ;;		None               void
 21986 ;; Registers used:
 21987 ;;		wreg, cstack
 21988 ;; Tracked objects:
 21989 ;;		On entry : 0/0
 21990 ;;		On exit  : 0/0
 21991 ;;		Unchanged: 0/0
 21992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21997 ;;Total ram usage:        0 bytes
 21998 ;; Hardware stack levels used:    1
 21999 ;; Hardware stack levels required when called:    4
 22000 ;; This function calls:
 22001 ;;		_i2cHighScl
 22002 ;;		_i2cHighSda
 22003 ;;		_i2cLowScl
 22004 ;;		_i2cLowSda
 22005 ;; This function is called by:
 22006 ;;		_I2C_Read
 22007 ;; This function uses a non-reentrant model
 22008 ;;
 22009                           
 22010                           	psect	text120
 22011  005128                     __ptext120:
 22012                           	opt stack 0
 22013  005128                     _i2cAck:
 22014                           	opt stack 22
 22015                           
 22016                           ;I2C_Soft.c: 61: i2cLowSda();
 22017                           
 22018                           ;incstack = 0
 22019  005128  ECF0  F028         	call	_i2cLowSda	;wreg free
 22020                           
 22021                           ;I2C_Soft.c: 62: i2cHighScl();
 22022  00512C  ECE0  F028         	call	_i2cHighScl	;wreg free
 22023                           
 22024                           ;I2C_Soft.c: 63: i2cLowScl();
 22025  005130  EC08  F029         	call	_i2cLowScl	;wreg free
 22026                           
 22027                           ;I2C_Soft.c: 64: i2cHighSda();
 22028  005134  EC0C  F029         	call	_i2cHighSda	;wreg free
 22029  005138  0012               	return		;funcret
 22030  00513A                     __end_of_i2cAck:
 22031                           	opt stack 0
 22032                           tblptru	equ	0xFF8
 22033                           tblptrh	equ	0xFF7
 22034                           tblptrl	equ	0xFF6
 22035                           tablat	equ	0xFF5
 22036                           prodh	equ	0xFF4
 22037                           prodl	equ	0xFF3
 22038                           intcon	equ	0xFF2
 22039                           intcon2	equ	0xFF1
 22040                           intcon3	equ	0xFF0
 22041                           postinc0	equ	0xFEE
 22042                           wreg	equ	0xFE8
 22043                           postdec1	equ	0xFE5
 22044                           fsr1l	equ	0xFE1
 22045                           indf2	equ	0xFDF
 22046                           postinc2	equ	0xFDE
 22047                           postdec2	equ	0xFDD
 22048                           fsr2h	equ	0xFDA
 22049                           fsr2l	equ	0xFD9
 22050                           status	equ	0xFD8
 22051                           
 22052 ;; *************** function _I2C_ReStart *****************
 22053 ;; Defined at:
 22054 ;;		line 75 in file "I2C_Soft.c"
 22055 ;; Parameters:    Size  Location     Type
 22056 ;;		None
 22057 ;; Auto vars:     Size  Location     Type
 22058 ;;		None
 22059 ;; Return value:  Size  Location     Type
 22060 ;;		None               void
 22061 ;; Registers used:
 22062 ;;		wreg, cstack
 22063 ;; Tracked objects:
 22064 ;;		On entry : 0/0
 22065 ;;		On exit  : 0/0
 22066 ;;		Unchanged: 0/0
 22067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22072 ;;Total ram usage:        0 bytes
 22073 ;; Hardware stack levels used:    1
 22074 ;; Hardware stack levels required when called:    4
 22075 ;; This function calls:
 22076 ;;		_i2cHighScl
 22077 ;;		_i2cHighSda
 22078 ;;		_i2cLowScl
 22079 ;;		_i2cLowSda
 22080 ;; This function is called by:
 22081 ;;		_I2C_Write_Address_Read_One_Byte
 22082 ;;		_DS1621_Read_Temp
 22083 ;;		_DS3231_Read_Time
 22084 ;;		_DS3231_Read_Alarm_Time
 22085 ;;		_DS3231_Init
 22086 ;;		_I2C_Write_Cmd_Read_One_Byte
 22087 ;; This function uses a non-reentrant model
 22088 ;;
 22089                           
 22090                           	psect	text121
 22091  00501C                     __ptext121:
 22092                           	opt stack 0
 22093  00501C                     _I2C_ReStart:
 22094                           	opt stack 23
 22095                           
 22096                           ;I2C_Soft.c: 77: i2cLowScl();
 22097                           
 22098                           ;incstack = 0
 22099  00501C  EC08  F029         	call	_i2cLowScl	;wreg free
 22100                           
 22101                           ;I2C_Soft.c: 78: i2cHighSda();
 22102  005020  EC0C  F029         	call	_i2cHighSda	;wreg free
 22103                           
 22104                           ;I2C_Soft.c: 79: i2cHighScl();
 22105  005024  ECE0  F028         	call	_i2cHighScl	;wreg free
 22106                           
 22107                           ;I2C_Soft.c: 80: i2cLowSda();
 22108  005028  ECF0  F028         	call	_i2cLowSda	;wreg free
 22109                           
 22110                           ;I2C_Soft.c: 81: i2cLowScl();
 22111  00502C  EC08  F029         	call	_i2cLowScl	;wreg free
 22112  005030  0012               	return		;funcret
 22113  005032                     __end_of_I2C_ReStart:
 22114                           	opt stack 0
 22115                           tblptru	equ	0xFF8
 22116                           tblptrh	equ	0xFF7
 22117                           tblptrl	equ	0xFF6
 22118                           tablat	equ	0xFF5
 22119                           prodh	equ	0xFF4
 22120                           prodl	equ	0xFF3
 22121                           intcon	equ	0xFF2
 22122                           intcon2	equ	0xFF1
 22123                           intcon3	equ	0xFF0
 22124                           postinc0	equ	0xFEE
 22125                           wreg	equ	0xFE8
 22126                           postdec1	equ	0xFE5
 22127                           fsr1l	equ	0xFE1
 22128                           indf2	equ	0xFDF
 22129                           postinc2	equ	0xFDE
 22130                           postdec2	equ	0xFDD
 22131                           fsr2h	equ	0xFDA
 22132                           fsr2l	equ	0xFD9
 22133                           status	equ	0xFD8
 22134                           
 22135 ;; *************** function _i2cLowSda *****************
 22136 ;; Defined at:
 22137 ;;		line 98 in file "I2C_Soft.c"
 22138 ;; Parameters:    Size  Location     Type
 22139 ;;		None
 22140 ;; Auto vars:     Size  Location     Type
 22141 ;;		None
 22142 ;; Return value:  Size  Location     Type
 22143 ;;		None               void
 22144 ;; Registers used:
 22145 ;;		None
 22146 ;; Tracked objects:
 22147 ;;		On entry : 0/0
 22148 ;;		On exit  : 0/0
 22149 ;;		Unchanged: 0/0
 22150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22155 ;;Total ram usage:        0 bytes
 22156 ;; Hardware stack levels used:    1
 22157 ;; Hardware stack levels required when called:    3
 22158 ;; This function calls:
 22159 ;;		Nothing
 22160 ;; This function is called by:
 22161 ;;		_I2C_Write
 22162 ;;		_i2cAck
 22163 ;;		_I2C_Start
 22164 ;;		_I2C_ReStart
 22165 ;;		_I2C_Stop
 22166 ;; This function uses a non-reentrant model
 22167 ;;
 22168                           
 22169                           	psect	text122
 22170  0051E0                     __ptext122:
 22171                           	opt stack 0
 22172  0051E0                     _i2cLowSda:
 22173                           	opt stack 23
 22174                           
 22175                           ;I2C_Soft.c: 100: PORTBbits.RB5 = 0;
 22176                           
 22177                           ;incstack = 0
 22178  0051E0  9A81               	bcf	3969,5,c	;volatile
 22179                           
 22180                           ;I2C_Soft.c: 101: TRISBbits.RB5 = 0;
 22181  0051E2  9A93               	bcf	3987,5,c	;volatile
 22182                           
 22183                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 22184  0051E4  D000               	nop2		;2 cycle nop
 22185  0051E6  D000               	nop2		;2 cycle nop
 22186  0051E8  0012               	return		;funcret
 22187  0051EA                     __end_of_i2cLowSda:
 22188                           	opt stack 0
 22189                           tblptru	equ	0xFF8
 22190                           tblptrh	equ	0xFF7
 22191                           tblptrl	equ	0xFF6
 22192                           tablat	equ	0xFF5
 22193                           prodh	equ	0xFF4
 22194                           prodl	equ	0xFF3
 22195                           intcon	equ	0xFF2
 22196                           intcon2	equ	0xFF1
 22197                           intcon3	equ	0xFF0
 22198                           postinc0	equ	0xFEE
 22199                           wreg	equ	0xFE8
 22200                           postdec1	equ	0xFE5
 22201                           fsr1l	equ	0xFE1
 22202                           indf2	equ	0xFDF
 22203                           postinc2	equ	0xFDE
 22204                           postdec2	equ	0xFDD
 22205                           fsr2h	equ	0xFDA
 22206                           fsr2l	equ	0xFD9
 22207                           status	equ	0xFD8
 22208                           
 22209 ;; *************** function _i2cLowScl *****************
 22210 ;; Defined at:
 22211 ;;		line 111 in file "I2C_Soft.c"
 22212 ;; Parameters:    Size  Location     Type
 22213 ;;		None
 22214 ;; Auto vars:     Size  Location     Type
 22215 ;;		None
 22216 ;; Return value:  Size  Location     Type
 22217 ;;		None               void
 22218 ;; Registers used:
 22219 ;;		None
 22220 ;; Tracked objects:
 22221 ;;		On entry : 0/0
 22222 ;;		On exit  : 0/0
 22223 ;;		Unchanged: 0/0
 22224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22229 ;;Total ram usage:        0 bytes
 22230 ;; Hardware stack levels used:    1
 22231 ;; Hardware stack levels required when called:    3
 22232 ;; This function calls:
 22233 ;;		Nothing
 22234 ;; This function is called by:
 22235 ;;		_I2C_Read
 22236 ;;		_I2C_Write
 22237 ;;		_i2cNack
 22238 ;;		_i2cAck
 22239 ;;		_I2C_Start
 22240 ;;		_I2C_ReStart
 22241 ;;		_I2C_Stop
 22242 ;; This function uses a non-reentrant model
 22243 ;;
 22244                           
 22245                           	psect	text123
 22246  005210                     __ptext123:
 22247                           	opt stack 0
 22248  005210                     _i2cLowScl:
 22249                           	opt stack 23
 22250                           
 22251                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 22252                           
 22253                           ;incstack = 0
 22254  005210  9881               	bcf	3969,4,c	;volatile
 22255                           
 22256                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 22257  005212  9893               	bcf	3987,4,c	;volatile
 22258                           
 22259                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 22260  005214  D000               	nop2		;2 cycle nop
 22261  005216  0012               	return		;funcret
 22262  005218                     __end_of_i2cLowScl:
 22263                           	opt stack 0
 22264                           tblptru	equ	0xFF8
 22265                           tblptrh	equ	0xFF7
 22266                           tblptrl	equ	0xFF6
 22267                           tablat	equ	0xFF5
 22268                           prodh	equ	0xFF4
 22269                           prodl	equ	0xFF3
 22270                           intcon	equ	0xFF2
 22271                           intcon2	equ	0xFF1
 22272                           intcon3	equ	0xFF0
 22273                           postinc0	equ	0xFEE
 22274                           wreg	equ	0xFE8
 22275                           postdec1	equ	0xFE5
 22276                           fsr1l	equ	0xFE1
 22277                           indf2	equ	0xFDF
 22278                           postinc2	equ	0xFDE
 22279                           postdec2	equ	0xFDD
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function _i2cHighSda *****************
 22285 ;; Defined at:
 22286 ;;		line 92 in file "I2C_Soft.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;		None
 22289 ;; Auto vars:     Size  Location     Type
 22290 ;;		None
 22291 ;; Return value:  Size  Location     Type
 22292 ;;		None               void
 22293 ;; Registers used:
 22294 ;;		None
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:        0 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    3
 22307 ;; This function calls:
 22308 ;;		Nothing
 22309 ;; This function is called by:
 22310 ;;		_I2C_Init
 22311 ;;		_I2C_Read
 22312 ;;		_I2C_Write
 22313 ;;		_i2cAck
 22314 ;;		_I2C_Start
 22315 ;;		_I2C_ReStart
 22316 ;;		_I2C_Stop
 22317 ;; This function uses a non-reentrant model
 22318 ;;
 22319                           
 22320                           	psect	text124
 22321  005218                     __ptext124:
 22322                           	opt stack 0
 22323  005218                     _i2cHighSda:
 22324                           	opt stack 23
 22325                           
 22326                           ;I2C_Soft.c: 94: TRISBbits.RB5 = 1;
 22327                           
 22328                           ;incstack = 0
 22329  005218  8A93               	bsf	3987,5,c	;volatile
 22330                           
 22331                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 22332  00521A  D000               	nop2		;2 cycle nop
 22333  00521C  D000               	nop2		;2 cycle nop
 22334  00521E  0012               	return		;funcret
 22335  005220                     __end_of_i2cHighSda:
 22336                           	opt stack 0
 22337                           tblptru	equ	0xFF8
 22338                           tblptrh	equ	0xFF7
 22339                           tblptrl	equ	0xFF6
 22340                           tablat	equ	0xFF5
 22341                           prodh	equ	0xFF4
 22342                           prodl	equ	0xFF3
 22343                           intcon	equ	0xFF2
 22344                           intcon2	equ	0xFF1
 22345                           intcon3	equ	0xFF0
 22346                           postinc0	equ	0xFEE
 22347                           wreg	equ	0xFE8
 22348                           postdec1	equ	0xFE5
 22349                           fsr1l	equ	0xFE1
 22350                           indf2	equ	0xFDF
 22351                           postinc2	equ	0xFDE
 22352                           postdec2	equ	0xFDD
 22353                           fsr2h	equ	0xFDA
 22354                           fsr2l	equ	0xFD9
 22355                           status	equ	0xFD8
 22356                           
 22357 ;; *************** function _i2cHighScl *****************
 22358 ;; Defined at:
 22359 ;;		line 105 in file "I2C_Soft.c"
 22360 ;; Parameters:    Size  Location     Type
 22361 ;;		None
 22362 ;; Auto vars:     Size  Location     Type
 22363 ;;		None
 22364 ;; Return value:  Size  Location     Type
 22365 ;;		None               void
 22366 ;; Registers used:
 22367 ;;		wreg
 22368 ;; Tracked objects:
 22369 ;;		On entry : 0/0
 22370 ;;		On exit  : 0/0
 22371 ;;		Unchanged: 0/0
 22372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22377 ;;Total ram usage:        0 bytes
 22378 ;; Hardware stack levels used:    1
 22379 ;; Hardware stack levels required when called:    3
 22380 ;; This function calls:
 22381 ;;		Nothing
 22382 ;; This function is called by:
 22383 ;;		_I2C_Init
 22384 ;;		_I2C_Read
 22385 ;;		_I2C_Write
 22386 ;;		_i2cNack
 22387 ;;		_i2cAck
 22388 ;;		_I2C_Start
 22389 ;;		_I2C_ReStart
 22390 ;;		_I2C_Stop
 22391 ;; This function uses a non-reentrant model
 22392 ;;
 22393                           
 22394                           	psect	text125
 22395  0051C0                     __ptext125:
 22396                           	opt stack 0
 22397  0051C0                     _i2cHighScl:
 22398                           	opt stack 23
 22399                           
 22400                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 22401                           
 22402                           ;incstack = 0
 22403  0051C0  8893               	bsf	3987,4,c	;volatile
 22404                           
 22405                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 22406  0051C2  0E06               	movlw	6
 22407  0051C4                     u9437:
 22408  0051C4  2EE8               	decfsz	wreg,f,c
 22409  0051C6  D7FE               	goto	u9437
 22410  0051C8  D000               	nop2		;nop
 22411  0051CA  0012               	return		;funcret
 22412  0051CC                     __end_of_i2cHighScl:
 22413                           	opt stack 0
 22414                           tblptru	equ	0xFF8
 22415                           tblptrh	equ	0xFF7
 22416                           tblptrl	equ	0xFF6
 22417                           tablat	equ	0xFF5
 22418                           prodh	equ	0xFF4
 22419                           prodl	equ	0xFF3
 22420                           intcon	equ	0xFF2
 22421                           intcon2	equ	0xFF1
 22422                           intcon3	equ	0xFF0
 22423                           postinc0	equ	0xFEE
 22424                           wreg	equ	0xFE8
 22425                           postdec1	equ	0xFE5
 22426                           fsr1l	equ	0xFE1
 22427                           indf2	equ	0xFDF
 22428                           postinc2	equ	0xFDE
 22429                           postdec2	equ	0xFDD
 22430                           fsr2h	equ	0xFDA
 22431                           fsr2l	equ	0xFD9
 22432                           status	equ	0xFD8
 22433                           
 22434 ;; *************** function _chkisr *****************
 22435 ;; Defined at:
 22436 ;;		line 37 in file "Interrupt.c"
 22437 ;; Parameters:    Size  Location     Type
 22438 ;;		None
 22439 ;; Auto vars:     Size  Location     Type
 22440 ;;		None
 22441 ;; Return value:  Size  Location     Type
 22442 ;;		None               void
 22443 ;; Registers used:
 22444 ;;		wreg, status,2, status,0, cstack
 22445 ;; Tracked objects:
 22446 ;;		On entry : 0/0
 22447 ;;		On exit  : 0/0
 22448 ;;		Unchanged: 0/0
 22449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22452 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22453 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22454 ;;Total ram usage:       14 bytes
 22455 ;; Hardware stack levels used:    1
 22456 ;; Hardware stack levels required when called:    2
 22457 ;; This function calls:
 22458 ;;		_INT0_isr
 22459 ;;		_INT1_isr
 22460 ;;		_INT2_isr
 22461 ;;		_TIMER1_isr
 22462 ;; This function is called by:
 22463 ;;		Interrupt level 2
 22464 ;; This function uses a non-reentrant model
 22465 ;;
 22466                           
 22467                           	psect	intcode
 22468  000008                     __pintcode:
 22469                           	opt stack 0
 22470  000008                     _chkisr:
 22471                           	opt stack 18
 22472                           
 22473                           ;incstack = 0
 22474  000008  CFFA F003          	movff	pclath,??_chkisr
 22475  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 22476  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 22477  000014  ED57  F020         	call	int_func,f	;refresh shadow registers
 22478                           pclatu	equ	0xFFB
 22479                           pclath	equ	0xFFA
 22480                           tblptru	equ	0xFF8
 22481                           tblptrh	equ	0xFF7
 22482                           tblptrl	equ	0xFF6
 22483                           tablat	equ	0xFF5
 22484                           prodh	equ	0xFF4
 22485                           prodl	equ	0xFF3
 22486                           intcon	equ	0xFF2
 22487                           intcon2	equ	0xFF1
 22488                           intcon3	equ	0xFF0
 22489                           postinc0	equ	0xFEE
 22490                           fsr0l	equ	0xFE9
 22491                           wreg	equ	0xFE8
 22492                           postdec1	equ	0xFE5
 22493                           fsr1l	equ	0xFE1
 22494                           indf2	equ	0xFDF
 22495                           postinc2	equ	0xFDE
 22496                           postdec2	equ	0xFDD
 22497                           fsr2h	equ	0xFDA
 22498                           fsr2l	equ	0xFD9
 22499                           status	equ	0xFD8
 22500                           
 22501                           	psect	intcode_body
 22502  0040AE                     __pintcode_body:
 22503                           	opt stack 18
 22504  0040AE                     int_func:
 22505                           	opt stack 18
 22506  0040AE  0006               	pop		; remove dummy address from shadow register refresh
 22507  0040B0  CFEA F006          	movff	fsr0h,??_chkisr+3
 22508  0040B4  CFE1 F007          	movff	fsr1l,??_chkisr+4
 22509  0040B8  CFE2 F008          	movff	fsr1h,??_chkisr+5
 22510  0040BC  CFD9 F009          	movff	fsr2l,??_chkisr+6
 22511  0040C0  CFDA F00A          	movff	fsr2h,??_chkisr+7
 22512  0040C4  CFF3 F00B          	movff	prodl,??_chkisr+8
 22513  0040C8  CFF4 F00C          	movff	prodh,??_chkisr+9
 22514  0040CC  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 22515  0040D0  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 22516  0040D4  CFF8 F00F          	movff	tblptru,??_chkisr+12
 22517  0040D8  CFF5 F010          	movff	tablat,??_chkisr+13
 22518                           
 22519                           ;Interrupt.c: 39: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 22520  0040DC  A09E               	btfss	3998,0,c	;volatile
 22521  0040DE  D003               	goto	i2l8428
 22522  0040E0  ECD3  F028         	call	_TIMER1_isr	;wreg free
 22523  0040E4  D000               	goto	i2l8428
 22524  0040E6                     i2l8428:
 22525                           
 22526                           ;Interrupt.c: 40: if (INTCONbits.INT0IF == 1) INT0_isr();
 22527  0040E6  A2F2               	btfss	intcon,1,c	;volatile
 22528  0040E8  D003               	goto	i2l8432
 22529  0040EA  EC7D  F013         	call	_INT0_isr	;wreg free
 22530  0040EE  D000               	goto	i2l8432
 22531  0040F0                     i2l8432:
 22532                           
 22533                           ;Interrupt.c: 41: if (INTCON3bits.INT1IF == 1) INT1_isr();
 22534  0040F0  A0F0               	btfss	intcon3,0,c	;volatile
 22535  0040F2  D003               	goto	i2l8436
 22536  0040F4  ECFA  F028         	call	_INT1_isr	;wreg free
 22537  0040F8  D000               	goto	i2l8436
 22538  0040FA                     i2l8436:
 22539                           
 22540                           ;Interrupt.c: 42: if (INTCON3bits.INT2IF == 1) INT2_isr();
 22541  0040FA  A2F0               	btfss	intcon3,1,c	;volatile
 22542  0040FC  D003               	goto	i2l271
 22543  0040FE  ECF5  F028         	call	_INT2_isr	;wreg free
 22544  004102  D000               	goto	i2l271
 22545  004104                     i2l271:
 22546  004104  C010  FFF5         	movff	??_chkisr+13,tablat
 22547  004108  C00F  FFF8         	movff	??_chkisr+12,tblptru
 22548  00410C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 22549  004110  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 22550  004114  C00C  FFF4         	movff	??_chkisr+9,prodh
 22551  004118  C00B  FFF3         	movff	??_chkisr+8,prodl
 22552  00411C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 22553  004120  C009  FFD9         	movff	??_chkisr+6,fsr2l
 22554  004124  C008  FFE2         	movff	??_chkisr+5,fsr1h
 22555  004128  C007  FFE1         	movff	??_chkisr+4,fsr1l
 22556  00412C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 22557  004130  C005  FFE9         	movff	??_chkisr+2,fsr0l
 22558  004134  C004  FFFB         	movff	??_chkisr+1,pclatu
 22559  004138  C003  FFFA         	movff	??_chkisr,pclath
 22560  00413C  0011               	retfie		f
 22561  00413E                     __end_of_chkisr:
 22562                           	opt stack 0
 22563                           pclatu	equ	0xFFB
 22564                           pclath	equ	0xFFA
 22565                           tblptru	equ	0xFF8
 22566                           tblptrh	equ	0xFF7
 22567                           tblptrl	equ	0xFF6
 22568                           tablat	equ	0xFF5
 22569                           prodh	equ	0xFF4
 22570                           prodl	equ	0xFF3
 22571                           intcon	equ	0xFF2
 22572                           intcon2	equ	0xFF1
 22573                           intcon3	equ	0xFF0
 22574                           postinc0	equ	0xFEE
 22575                           fsr0h	equ	0xFEA
 22576                           fsr0l	equ	0xFE9
 22577                           wreg	equ	0xFE8
 22578                           postdec1	equ	0xFE5
 22579                           fsr1h	equ	0xFE2
 22580                           fsr1l	equ	0xFE1
 22581                           indf2	equ	0xFDF
 22582                           postinc2	equ	0xFDE
 22583                           postdec2	equ	0xFDD
 22584                           fsr2h	equ	0xFDA
 22585                           fsr2l	equ	0xFD9
 22586                           status	equ	0xFD8
 22587                           
 22588 ;; *************** function _TIMER1_isr *****************
 22589 ;; Defined at:
 22590 ;;		line 45 in file "Interrupt.c"
 22591 ;; Parameters:    Size  Location     Type
 22592 ;;		None
 22593 ;; Auto vars:     Size  Location     Type
 22594 ;;		None
 22595 ;; Return value:  Size  Location     Type
 22596 ;;		None               void
 22597 ;; Registers used:
 22598 ;;		wreg, status,2
 22599 ;; Tracked objects:
 22600 ;;		On entry : 0/0
 22601 ;;		On exit  : 0/0
 22602 ;;		Unchanged: 0/0
 22603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22608 ;;Total ram usage:        0 bytes
 22609 ;; Hardware stack levels used:    1
 22610 ;; This function calls:
 22611 ;;		Nothing
 22612 ;; This function is called by:
 22613 ;;		_chkisr
 22614 ;; This function uses a non-reentrant model
 22615 ;;
 22616                           
 22617                           	psect	text127
 22618  0051A6                     __ptext127:
 22619                           	opt stack 0
 22620  0051A6                     _TIMER1_isr:
 22621                           	opt stack 19
 22622                           
 22623                           ;Interrupt.c: 47: Nec_state = 0;
 22624                           
 22625                           ;incstack = 0
 22626  0051A6  0E00               	movlw	0
 22627  0051A8  0100               	movlb	0	; () banked
 22628  0051AA  6FA4               	movwf	_Nec_state& (0+255),b
 22629                           
 22630                           ; BSR set to: 0
 22631                           ;Interrupt.c: 48: INTCON2bits.INTEDG0 = 0;
 22632  0051AC  9CF1               	bcf	intcon2,6,c	;volatile
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;Interrupt.c: 49: T1CONbits.TMR1ON = 0;
 22636  0051AE  90CD               	bcf	4045,0,c	;volatile
 22637                           
 22638                           ; BSR set to: 0
 22639                           ;Interrupt.c: 50: PIR1bits.TMR1IF = 0;
 22640  0051B0  909E               	bcf	3998,0,c	;volatile
 22641                           
 22642                           ; BSR set to: 0
 22643  0051B2  0012               	return		;funcret
 22644  0051B4                     __end_of_TIMER1_isr:
 22645                           	opt stack 0
 22646                           pclatu	equ	0xFFB
 22647                           pclath	equ	0xFFA
 22648                           tblptru	equ	0xFF8
 22649                           tblptrh	equ	0xFF7
 22650                           tblptrl	equ	0xFF6
 22651                           tablat	equ	0xFF5
 22652                           prodh	equ	0xFF4
 22653                           prodl	equ	0xFF3
 22654                           intcon	equ	0xFF2
 22655                           intcon2	equ	0xFF1
 22656                           intcon3	equ	0xFF0
 22657                           postinc0	equ	0xFEE
 22658                           fsr0h	equ	0xFEA
 22659                           fsr0l	equ	0xFE9
 22660                           wreg	equ	0xFE8
 22661                           postdec1	equ	0xFE5
 22662                           fsr1h	equ	0xFE2
 22663                           fsr1l	equ	0xFE1
 22664                           indf2	equ	0xFDF
 22665                           postinc2	equ	0xFDE
 22666                           postdec2	equ	0xFDD
 22667                           fsr2h	equ	0xFDA
 22668                           fsr2l	equ	0xFD9
 22669                           status	equ	0xFD8
 22670                           
 22671 ;; *************** function _INT2_isr *****************
 22672 ;; Defined at:
 22673 ;;		line 142 in file "Interrupt.c"
 22674 ;; Parameters:    Size  Location     Type
 22675 ;;		None
 22676 ;; Auto vars:     Size  Location     Type
 22677 ;;		None
 22678 ;; Return value:  Size  Location     Type
 22679 ;;		None               void
 22680 ;; Registers used:
 22681 ;;		wreg, status,2
 22682 ;; Tracked objects:
 22683 ;;		On entry : 0/0
 22684 ;;		On exit  : 0/0
 22685 ;;		Unchanged: 0/0
 22686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22691 ;;Total ram usage:        0 bytes
 22692 ;; Hardware stack levels used:    1
 22693 ;; This function calls:
 22694 ;;		Nothing
 22695 ;; This function is called by:
 22696 ;;		_chkisr
 22697 ;; This function uses a non-reentrant model
 22698 ;;
 22699                           
 22700                           	psect	text128
 22701  0051EA                     __ptext128:
 22702                           	opt stack 0
 22703  0051EA                     _INT2_isr:
 22704                           	opt stack 19
 22705                           
 22706                           ;Interrupt.c: 144: INTCON3bits.INT2IF=0;
 22707                           
 22708                           ; BSR set to: 0
 22709                           ;incstack = 0
 22710  0051EA  92F0               	bcf	intcon3,1,c	;volatile
 22711                           
 22712                           ;Interrupt.c: 145: INT2_flag = 1;
 22713  0051EC  0E01               	movlw	1
 22714  0051EE  0100               	movlb	0	; () banked
 22715  0051F0  6F9F               	movwf	_INT2_flag& (0+255),b
 22716                           
 22717                           ; BSR set to: 0
 22718  0051F2  0012               	return		;funcret
 22719  0051F4                     __end_of_INT2_isr:
 22720                           	opt stack 0
 22721                           pclatu	equ	0xFFB
 22722                           pclath	equ	0xFFA
 22723                           tblptru	equ	0xFF8
 22724                           tblptrh	equ	0xFF7
 22725                           tblptrl	equ	0xFF6
 22726                           tablat	equ	0xFF5
 22727                           prodh	equ	0xFF4
 22728                           prodl	equ	0xFF3
 22729                           intcon	equ	0xFF2
 22730                           intcon2	equ	0xFF1
 22731                           intcon3	equ	0xFF0
 22732                           postinc0	equ	0xFEE
 22733                           fsr0h	equ	0xFEA
 22734                           fsr0l	equ	0xFE9
 22735                           wreg	equ	0xFE8
 22736                           postdec1	equ	0xFE5
 22737                           fsr1h	equ	0xFE2
 22738                           fsr1l	equ	0xFE1
 22739                           indf2	equ	0xFDF
 22740                           postinc2	equ	0xFDE
 22741                           postdec2	equ	0xFDD
 22742                           fsr2h	equ	0xFDA
 22743                           fsr2l	equ	0xFD9
 22744                           status	equ	0xFD8
 22745                           
 22746 ;; *************** function _INT1_isr *****************
 22747 ;; Defined at:
 22748 ;;		line 136 in file "Interrupt.c"
 22749 ;; Parameters:    Size  Location     Type
 22750 ;;		None
 22751 ;; Auto vars:     Size  Location     Type
 22752 ;;		None
 22753 ;; Return value:  Size  Location     Type
 22754 ;;		None               void
 22755 ;; Registers used:
 22756 ;;		wreg, status,2
 22757 ;; Tracked objects:
 22758 ;;		On entry : 0/0
 22759 ;;		On exit  : 0/0
 22760 ;;		Unchanged: 0/0
 22761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22766 ;;Total ram usage:        0 bytes
 22767 ;; Hardware stack levels used:    1
 22768 ;; This function calls:
 22769 ;;		Nothing
 22770 ;; This function is called by:
 22771 ;;		_chkisr
 22772 ;; This function uses a non-reentrant model
 22773 ;;
 22774                           
 22775                           	psect	text129
 22776  0051F4                     __ptext129:
 22777                           	opt stack 0
 22778  0051F4                     _INT1_isr:
 22779                           	opt stack 19
 22780                           
 22781                           ;Interrupt.c: 138: INTCON3bits.INT1IF=0;
 22782                           
 22783                           ; BSR set to: 0
 22784                           ;incstack = 0
 22785  0051F4  90F0               	bcf	intcon3,0,c	;volatile
 22786                           
 22787                           ;Interrupt.c: 139: INT1_flag = 1;
 22788  0051F6  0E01               	movlw	1
 22789  0051F8  0100               	movlb	0	; () banked
 22790  0051FA  6F9E               	movwf	_INT1_flag& (0+255),b
 22791                           
 22792                           ; BSR set to: 0
 22793  0051FC  0012               	return		;funcret
 22794  0051FE                     __end_of_INT1_isr:
 22795                           	opt stack 0
 22796                           pclatu	equ	0xFFB
 22797                           pclath	equ	0xFFA
 22798                           tblptru	equ	0xFF8
 22799                           tblptrh	equ	0xFF7
 22800                           tblptrl	equ	0xFF6
 22801                           tablat	equ	0xFF5
 22802                           prodh	equ	0xFF4
 22803                           prodl	equ	0xFF3
 22804                           intcon	equ	0xFF2
 22805                           intcon2	equ	0xFF1
 22806                           intcon3	equ	0xFF0
 22807                           postinc0	equ	0xFEE
 22808                           fsr0h	equ	0xFEA
 22809                           fsr0l	equ	0xFE9
 22810                           wreg	equ	0xFE8
 22811                           postdec1	equ	0xFE5
 22812                           fsr1h	equ	0xFE2
 22813                           fsr1l	equ	0xFE1
 22814                           indf2	equ	0xFDF
 22815                           postinc2	equ	0xFDE
 22816                           postdec2	equ	0xFDD
 22817                           fsr2h	equ	0xFDA
 22818                           fsr2l	equ	0xFD9
 22819                           status	equ	0xFD8
 22820                           
 22821 ;; *************** function _INT0_isr *****************
 22822 ;; Defined at:
 22823 ;;		line 59 in file "Interrupt.c"
 22824 ;; Parameters:    Size  Location     Type
 22825 ;;		None
 22826 ;; Auto vars:     Size  Location     Type
 22827 ;;		None
 22828 ;; Return value:  Size  Location     Type
 22829 ;;		None               void
 22830 ;; Registers used:
 22831 ;;		wreg, status,2, status,0, cstack
 22832 ;; Tracked objects:
 22833 ;;		On entry : 0/0
 22834 ;;		On exit  : 0/0
 22835 ;;		Unchanged: 0/0
 22836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22839 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22841 ;;Total ram usage:        2 bytes
 22842 ;; Hardware stack levels used:    1
 22843 ;; Hardware stack levels required when called:    1
 22844 ;; This function calls:
 22845 ;;		_force_nec_state0
 22846 ;; This function is called by:
 22847 ;;		_chkisr
 22848 ;; This function uses a non-reentrant model
 22849 ;;
 22850                           
 22851                           	psect	text130
 22852  0026FA                     __ptext130:
 22853                           	opt stack 0
 22854  0026FA                     _INT0_isr:
 22855                           	opt stack 18
 22856                           
 22857                           ;Interrupt.c: 61: INTCONbits.INT0IF = 0;
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;incstack = 0
 22861  0026FA  92F2               	bcf	intcon,1,c	;volatile
 22862                           
 22863                           ;Interrupt.c: 62: if (Nec_state != 0)
 22864  0026FC  0100               	movlb	0	; () banked
 22865  0026FE  51A4               	movf	_Nec_state& (0+255),w,b
 22866  002700  B4D8               	btfsc	status,2,c
 22867  002702  D0A8               	goto	i2l7922
 22868                           
 22869                           ; BSR set to: 0
 22870                           ;Interrupt.c: 63: {
 22871                           ;Interrupt.c: 64: Time_Elapsed = (TMR1H << 8) | TMR1L;
 22872  002704  50CE               	movf	4046,w,c	;volatile
 22873  002706  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 22874  00270A  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 22875  00270C  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 22876  002710  6A01               	clrf	??_INT0_isr,c
 22877  002712  1001               	iorwf	??_INT0_isr,w,c
 22878  002714  6E60               	movwf	_Time_Elapsed,c
 22879  002716  5002               	movf	??_INT0_isr+1,w,c
 22880  002718  6E61               	movwf	_Time_Elapsed+1,c
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;Interrupt.c: 65: TMR1H = 0;
 22884  00271A  0E00               	movlw	0
 22885  00271C  6ECF               	movwf	4047,c	;volatile
 22886                           
 22887                           ; BSR set to: 0
 22888                           ;Interrupt.c: 66: TMR1L = 0;
 22889  00271E  0E00               	movlw	0
 22890  002720  6ECE               	movwf	4046,c	;volatile
 22891                           
 22892                           ; BSR set to: 0
 22893                           ;Interrupt.c: 67: }
 22894                           ;Interrupt.c: 69: switch(Nec_state)
 22895  002722  D098               	goto	i2l7922
 22896  002724                     i2l7850:
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;Interrupt.c: 72: {
 22900                           ;Interrupt.c: 74: TMR1H = 0;
 22901  002724  0E00               	movlw	0
 22902  002726  6ECF               	movwf	4047,c	;volatile
 22903                           
 22904                           ;Interrupt.c: 75: TMR1L = 0;
 22905  002728  0E00               	movlw	0
 22906  00272A  6ECE               	movwf	4046,c	;volatile
 22907                           
 22908                           ; BSR set to: 0
 22909                           ;Interrupt.c: 76: PIR1bits.TMR1IF = 0;
 22910  00272C  909E               	bcf	3998,0,c	;volatile
 22911                           
 22912                           ;Interrupt.c: 77: T1CON= 0x90;
 22913  00272E  0E90               	movlw	144
 22914  002730  6ECD               	movwf	4045,c	;volatile
 22915                           
 22916                           ; BSR set to: 0
 22917                           ;Interrupt.c: 78: T1CONbits.TMR1ON = 1;
 22918  002732  80CD               	bsf	4045,0,c	;volatile
 22919                           
 22920                           ;Interrupt.c: 79: bit_count = 0;
 22921  002734  0E00               	movlw	0
 22922  002736  0100               	movlb	0	; () banked
 22923  002738  6FAA               	movwf	_bit_count& (0+255),b
 22924                           
 22925                           ;Interrupt.c: 80: Nec_code = 0;
 22926  00273A  0E00               	movlw	0
 22927  00273C  0100               	movlb	0	; () banked
 22928  00273E  6F80               	movwf	_Nec_code& (0+255),b
 22929  002740  0E00               	movlw	0
 22930  002742  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22931  002744  0E00               	movlw	0
 22932  002746  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22933  002748  0E00               	movlw	0
 22934  00274A  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22935                           
 22936                           ;Interrupt.c: 81: Nec_state = 1;
 22937  00274C  0E01               	movlw	1
 22938  00274E  0100               	movlb	0	; () banked
 22939  002750  6FA4               	movwf	_Nec_state& (0+255),b
 22940  002752  D07E               	goto	i2l7916
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;Interrupt.c: 83: return;
 22944                           
 22945                           ; BSR set to: 0
 22946                           ;Interrupt.c: 82: INTCON2bits.INTEDG0 = 1;
 22947  002754  D091               	goto	i2l283
 22948  002756                     i2l7860:
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;Interrupt.c: 87: {
 22952                           ;Interrupt.c: 88: if((Time_Elapsed >= 8500) && (Time_Elapsed <= 9500)) Nec_state = 2;
 22953  002756  0E34               	movlw	52
 22954  002758  5C60               	subwf	_Time_Elapsed,w,c
 22955  00275A  0E21               	movlw	33
 22956  00275C  5861               	subwfb	_Time_Elapsed+1,w,c
 22957  00275E  A0D8               	btfss	status,0,c
 22958  002760  D00A               	goto	i2l7866
 22959                           
 22960                           ; BSR set to: 0
 22961  002762  0E1D               	movlw	29
 22962  002764  5C60               	subwf	_Time_Elapsed,w,c
 22963  002766  0E25               	movlw	37
 22964  002768  5861               	subwfb	_Time_Elapsed+1,w,c
 22965  00276A  B0D8               	btfsc	status,0,c
 22966  00276C  D004               	goto	i2l7866
 22967                           
 22968                           ; BSR set to: 0
 22969  00276E  0E02               	movlw	2
 22970  002770  0100               	movlb	0	; () banked
 22971  002772  6FA4               	movwf	_Nec_state& (0+255),b
 22972  002774  D02B               	goto	i2l7892
 22973  002776                     i2l7866:
 22974                           
 22975                           ; BSR set to: 0
 22976                           ;Interrupt.c: 89: else force_nec_state0();
 22977  002776  ECFF  F028         	call	_force_nec_state0	;wreg free
 22978  00277A  D028               	goto	i2l7892
 22979  00277C  D027               	goto	i2l7892
 22980                           
 22981                           ;Interrupt.c: 91: return;
 22982                           
 22983                           ;Interrupt.c: 90: INTCON2bits.INTEDG0 = 0;
 22984  00277E  D07C               	goto	i2l283
 22985  002780                     i2l7872:
 22986                           
 22987                           ;Interrupt.c: 95: {
 22988                           ;Interrupt.c: 96: if((Time_Elapsed >= 4000) && (Time_Elapsed <= 5000)) Nec_state = 3;
 22989  002780  0EA0               	movlw	160
 22990  002782  5C60               	subwf	_Time_Elapsed,w,c
 22991  002784  0E0F               	movlw	15
 22992  002786  5861               	subwfb	_Time_Elapsed+1,w,c
 22993  002788  A0D8               	btfss	status,0,c
 22994  00278A  D00A               	goto	i2l7878
 22995  00278C  0E89               	movlw	137
 22996  00278E  5C60               	subwf	_Time_Elapsed,w,c
 22997  002790  0E13               	movlw	19
 22998  002792  5861               	subwfb	_Time_Elapsed+1,w,c
 22999  002794  B0D8               	btfsc	status,0,c
 23000  002796  D004               	goto	i2l7878
 23001  002798  0E03               	movlw	3
 23002  00279A  0100               	movlb	0	; () banked
 23003  00279C  6FA4               	movwf	_Nec_state& (0+255),b
 23004  00279E  D058               	goto	i2l7916
 23005  0027A0                     i2l7878:
 23006                           
 23007                           ;Interrupt.c: 97: else force_nec_state0();
 23008  0027A0  ECFF  F028         	call	_force_nec_state0	;wreg free
 23009  0027A4  D055               	goto	i2l7916
 23010  0027A6  D054               	goto	i2l7916
 23011                           
 23012                           ;Interrupt.c: 99: return;
 23013                           
 23014                           ;Interrupt.c: 98: INTCON2bits.INTEDG0 = 1;
 23015  0027A8  D067               	goto	i2l283
 23016  0027AA                     i2l7884:
 23017                           
 23018                           ;Interrupt.c: 103: {
 23019                           ;Interrupt.c: 104: if((Time_Elapsed >= 400) && (Time_Elapsed <= 700)) Nec_state = 4;
 23020  0027AA  0E90               	movlw	144
 23021  0027AC  5C60               	subwf	_Time_Elapsed,w,c
 23022  0027AE  0E01               	movlw	1
 23023  0027B0  5861               	subwfb	_Time_Elapsed+1,w,c
 23024  0027B2  A0D8               	btfss	status,0,c
 23025  0027B4  D008               	goto	i2l7890
 23026  0027B6  0EBD               	movlw	189
 23027  0027B8  5C60               	subwf	_Time_Elapsed,w,c
 23028  0027BA  0E02               	movlw	2
 23029  0027BC  5861               	subwfb	_Time_Elapsed+1,w,c
 23030  0027BE  B0D8               	btfsc	status,0,c
 23031  0027C0  D002               	goto	i2l7890
 23032  0027C2  0E04               	movlw	4
 23033  0027C4  D7D5               	goto	L21
 23034  0027C6                     i2l7890:
 23035                           
 23036                           ;Interrupt.c: 105: else force_nec_state0();
 23037  0027C6  ECFF  F028         	call	_force_nec_state0	;wreg free
 23038  0027CA  D000               	goto	i2l7892
 23039  0027CC                     i2l7892:
 23040                           
 23041                           ;Interrupt.c: 106: INTCON2bits.INTEDG0 = 0;
 23042  0027CC  9CF1               	bcf	intcon2,6,c	;volatile
 23043                           
 23044                           ;Interrupt.c: 107: return;
 23045  0027CE  D054               	goto	i2l283
 23046  0027D0                     i2l7896:
 23047                           
 23048                           ;Interrupt.c: 111: {
 23049                           ;Interrupt.c: 112: if((Time_Elapsed >= 400) && (Time_Elapsed <= 1800))
 23050  0027D0  0E90               	movlw	144
 23051  0027D2  5C60               	subwf	_Time_Elapsed,w,c
 23052  0027D4  0E01               	movlw	1
 23053  0027D6  5861               	subwfb	_Time_Elapsed+1,w,c
 23054  0027D8  A0D8               	btfss	status,0,c
 23055  0027DA  D037               	goto	i2l7914
 23056  0027DC  0E09               	movlw	9
 23057  0027DE  5C60               	subwf	_Time_Elapsed,w,c
 23058  0027E0  0E07               	movlw	7
 23059  0027E2  5861               	subwfb	_Time_Elapsed+1,w,c
 23060  0027E4  B0D8               	btfsc	status,0,c
 23061  0027E6  D031               	goto	i2l7914
 23062                           
 23063                           ;Interrupt.c: 113: {
 23064                           ;Interrupt.c: 114: Nec_code = Nec_code << 1;
 23065  0027E8  90D8               	bcf	status,0,c
 23066  0027EA  0100               	movlb	0	; () banked
 23067  0027EC  3580               	rlcf	_Nec_code& (0+255),w,b
 23068  0027EE  0100               	movlb	0	; () banked
 23069  0027F0  6F80               	movwf	_Nec_code& (0+255),b
 23070  0027F2  0100               	movlb	0	; () banked
 23071  0027F4  3581               	rlcf	(_Nec_code+1)& (0+255),w,b
 23072  0027F6  0100               	movlb	0	; () banked
 23073  0027F8  6F81               	movwf	(_Nec_code+1)& (0+255),b
 23074  0027FA  0100               	movlb	0	; () banked
 23075  0027FC  3582               	rlcf	(_Nec_code+2)& (0+255),w,b
 23076  0027FE  0100               	movlb	0	; () banked
 23077  002800  6F82               	movwf	(_Nec_code+2)& (0+255),b
 23078  002802  0100               	movlb	0	; () banked
 23079  002804  3583               	rlcf	(_Nec_code+3)& (0+255),w,b
 23080  002806  0100               	movlb	0	; () banked
 23081  002808  6F83               	movwf	(_Nec_code+3)& (0+255),b
 23082                           
 23083                           ;Interrupt.c: 115: if(Time_Elapsed >= 1000)
 23084  00280A  0EE8               	movlw	232
 23085  00280C  5C60               	subwf	_Time_Elapsed,w,c
 23086  00280E  0E03               	movlw	3
 23087  002810  5861               	subwfb	_Time_Elapsed+1,w,c
 23088  002812  A0D8               	btfss	status,0,c
 23089  002814  D008               	goto	i2l7904
 23090                           
 23091                           ; BSR set to: 0
 23092                           ;Interrupt.c: 116: {
 23093                           ;Interrupt.c: 117: Nec_code+=1;
 23094  002816  0E01               	movlw	1
 23095  002818  0100               	movlb	0	; () banked
 23096  00281A  2780               	addwf	_Nec_code& (0+255),f,b
 23097  00281C  0E00               	movlw	0
 23098  00281E  2381               	addwfc	(_Nec_code+1)& (0+255),f,b
 23099  002820  2382               	addwfc	(_Nec_code+2)& (0+255),f,b
 23100  002822  2383               	addwfc	(_Nec_code+3)& (0+255),f,b
 23101  002824  D000               	goto	i2l7904
 23102  002826                     i2l7904:
 23103                           
 23104                           ; BSR set to: 0
 23105                           ;Interrupt.c: 118: }
 23106                           ;Interrupt.c: 119: bit_count++;
 23107  002826  0100               	movlb	0	; () banked
 23108  002828  2BAA               	incf	_bit_count& (0+255),f,b
 23109                           
 23110                           ; BSR set to: 0
 23111                           ;Interrupt.c: 120: if(bit_count > 31)
 23112  00282A  0E1F               	movlw	31
 23113  00282C  0100               	movlb	0	; () banked
 23114  00282E  65AA               	cpfsgt	_bit_count& (0+255),b
 23115  002830  D7B3               	goto	L22
 23116                           
 23117                           ; BSR set to: 0
 23118                           ;Interrupt.c: 121: {
 23119                           ;Interrupt.c: 122: nec_ok = 1;
 23120  002832  0E00               	movlw	0
 23121  002834  0100               	movlb	0	; () banked
 23122  002836  6F98               	movwf	(_nec_ok+1)& (0+255),b
 23123  002838  0E01               	movlw	1
 23124  00283A  6F97               	movwf	_nec_ok& (0+255),b
 23125                           
 23126                           ; BSR set to: 0
 23127                           ;Interrupt.c: 123: Nec_code1 = (char) ((Nec_code >> 8));
 23128  00283C  C081  F0A3         	movff	_Nec_code+1,_Nec_code1
 23129                           
 23130                           ; BSR set to: 0
 23131                           ;Interrupt.c: 124: INTCONbits.INT0IE = 0;
 23132  002840  98F2               	bcf	intcon,4,c	;volatile
 23133                           
 23134                           ;Interrupt.c: 125: Nec_state = 0;
 23135  002842  0E00               	movlw	0
 23136  002844  0100               	movlb	0	; () banked
 23137  002846  6FA4               	movwf	_Nec_state& (0+255),b
 23138  002848  D7A7               	goto	L22
 23139  00284A                     i2l7914:
 23140                           
 23141                           ;Interrupt.c: 129: else force_nec_state0();
 23142  00284A  ECFF  F028         	call	_force_nec_state0	;wreg free
 23143  00284E  D000               	goto	i2l7916
 23144  002850                     i2l7916:
 23145                           
 23146                           ;Interrupt.c: 130: INTCON2bits.INTEDG0 = 1;
 23147  002850  8CF1               	bsf	intcon2,6,c	;volatile
 23148                           
 23149                           ;Interrupt.c: 132: }
 23150                           ;Interrupt.c: 133: }
 23151                           
 23152                           ;Interrupt.c: 131: return;
 23153  002852  D012               	goto	i2l283
 23154  002854                     i2l7922:
 23155  002854  0100               	movlb	0	; () banked
 23156  002856  51A4               	movf	_Nec_state& (0+255),w,b
 23157                           
 23158                           ; Switch size 1, requested type "space"
 23159                           ; Number of cases is 5, Range of values is 0 to 4
 23160                           ; switch strategies available:
 23161                           ; Name         Instructions Cycles
 23162                           ; simple_byte           16     9 (average)
 23163                           ;	Chosen strategy is simple_byte
 23164  002858  0A00               	xorlw	0	; case 0
 23165  00285A  B4D8               	btfsc	status,2,c
 23166  00285C  D763               	goto	i2l7850
 23167  00285E  0A01               	xorlw	1	; case 1
 23168  002860  B4D8               	btfsc	status,2,c
 23169  002862  D779               	goto	i2l7860
 23170  002864  0A03               	xorlw	3	; case 2
 23171  002866  B4D8               	btfsc	status,2,c
 23172  002868  D78B               	goto	i2l7872
 23173  00286A  0A01               	xorlw	1	; case 3
 23174  00286C  B4D8               	btfsc	status,2,c
 23175  00286E  D79D               	goto	i2l7884
 23176  002870  0A07               	xorlw	7	; case 4
 23177  002872  B4D8               	btfsc	status,2,c
 23178  002874  D7AD               	goto	i2l7896
 23179  002876  D000               	goto	i2l283
 23180  002878                     i2l283:
 23181  002878  0012               	return		;funcret
 23182  00287A                     __end_of_INT0_isr:
 23183                           	opt stack 0
 23184                           pclatu	equ	0xFFB
 23185                           pclath	equ	0xFFA
 23186                           tblptru	equ	0xFF8
 23187                           tblptrh	equ	0xFF7
 23188                           tblptrl	equ	0xFF6
 23189                           tablat	equ	0xFF5
 23190                           prodh	equ	0xFF4
 23191                           prodl	equ	0xFF3
 23192                           intcon	equ	0xFF2
 23193                           intcon2	equ	0xFF1
 23194                           intcon3	equ	0xFF0
 23195                           postinc0	equ	0xFEE
 23196                           fsr0h	equ	0xFEA
 23197                           fsr0l	equ	0xFE9
 23198                           wreg	equ	0xFE8
 23199                           postdec1	equ	0xFE5
 23200                           fsr1h	equ	0xFE2
 23201                           fsr1l	equ	0xFE1
 23202                           indf2	equ	0xFDF
 23203                           postinc2	equ	0xFDE
 23204                           postdec2	equ	0xFDD
 23205                           fsr2h	equ	0xFDA
 23206                           fsr2l	equ	0xFD9
 23207                           status	equ	0xFD8
 23208                           
 23209 ;; *************** function _force_nec_state0 *****************
 23210 ;; Defined at:
 23211 ;;		line 53 in file "Interrupt.c"
 23212 ;; Parameters:    Size  Location     Type
 23213 ;;		None
 23214 ;; Auto vars:     Size  Location     Type
 23215 ;;		None
 23216 ;; Return value:  Size  Location     Type
 23217 ;;		None               void
 23218 ;; Registers used:
 23219 ;;		wreg, status,2
 23220 ;; Tracked objects:
 23221 ;;		On entry : 0/0
 23222 ;;		On exit  : 0/0
 23223 ;;		Unchanged: 0/0
 23224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23229 ;;Total ram usage:        0 bytes
 23230 ;; Hardware stack levels used:    1
 23231 ;; This function calls:
 23232 ;;		Nothing
 23233 ;; This function is called by:
 23234 ;;		_INT0_isr
 23235 ;; This function uses a non-reentrant model
 23236 ;;
 23237                           
 23238                           	psect	text131
 23239  0051FE                     __ptext131:
 23240                           	opt stack 0
 23241  0051FE                     _force_nec_state0:
 23242                           	opt stack 18
 23243                           
 23244                           ;Interrupt.c: 55: Nec_state=0;
 23245                           
 23246                           ;incstack = 0
 23247  0051FE  0E00               	movlw	0
 23248  005200  0100               	movlb	0	; () banked
 23249  005202  6FA4               	movwf	_Nec_state& (0+255),b
 23250                           
 23251                           ; BSR set to: 0
 23252                           ;Interrupt.c: 56: T1CONbits.TMR1ON = 0;
 23253  005204  90CD               	bcf	4045,0,c	;volatile
 23254                           
 23255                           ; BSR set to: 0
 23256  005206  0012               	return		;funcret
 23257  005208                     __end_of_force_nec_state0:
 23258                           	opt stack 0
 23259                           pclatu	equ	0xFFB
 23260                           pclath	equ	0xFFA
 23261                           tblptru	equ	0xFF8
 23262                           tblptrh	equ	0xFF7
 23263                           tblptrl	equ	0xFF6
 23264                           tablat	equ	0xFF5
 23265                           prodh	equ	0xFF4
 23266                           prodl	equ	0xFF3
 23267                           intcon	equ	0xFF2
 23268                           intcon2	equ	0xFF1
 23269                           intcon3	equ	0xFF0
 23270                           postinc0	equ	0xFEE
 23271                           fsr0h	equ	0xFEA
 23272                           fsr0l	equ	0xFE9
 23273                           wreg	equ	0xFE8
 23274                           postdec1	equ	0xFE5
 23275                           fsr1h	equ	0xFE2
 23276                           fsr1l	equ	0xFE1
 23277                           indf2	equ	0xFDF
 23278                           postinc2	equ	0xFDE
 23279                           postdec2	equ	0xFDD
 23280                           fsr2h	equ	0xFDA
 23281                           fsr2l	equ	0xFD9
 23282                           status	equ	0xFD8
 23283                           pclatu	equ	0xFFB
 23284                           pclath	equ	0xFFA
 23285                           tblptru	equ	0xFF8
 23286                           tblptrh	equ	0xFF7
 23287                           tblptrl	equ	0xFF6
 23288                           tablat	equ	0xFF5
 23289                           prodh	equ	0xFF4
 23290                           prodl	equ	0xFF3
 23291                           intcon	equ	0xFF2
 23292                           intcon2	equ	0xFF1
 23293                           intcon3	equ	0xFF0
 23294                           postinc0	equ	0xFEE
 23295                           fsr0h	equ	0xFEA
 23296                           fsr0l	equ	0xFE9
 23297                           wreg	equ	0xFE8
 23298                           postdec1	equ	0xFE5
 23299                           fsr1h	equ	0xFE2
 23300                           fsr1l	equ	0xFE1
 23301                           indf2	equ	0xFDF
 23302                           postinc2	equ	0xFDE
 23303                           postdec2	equ	0xFDD
 23304                           fsr2h	equ	0xFDA
 23305                           fsr2l	equ	0xFD9
 23306                           status	equ	0xFD8
 23307                           
 23308                           	psect	rparam
 23309  0000                     pclatu	equ	0xFFB
 23310                           pclath	equ	0xFFA
 23311                           tblptru	equ	0xFF8
 23312                           tblptrh	equ	0xFF7
 23313                           tblptrl	equ	0xFF6
 23314                           tablat	equ	0xFF5
 23315                           prodh	equ	0xFF4
 23316                           prodl	equ	0xFF3
 23317                           intcon	equ	0xFF2
 23318                           intcon2	equ	0xFF1
 23319                           intcon3	equ	0xFF0
 23320                           postinc0	equ	0xFEE
 23321                           fsr0h	equ	0xFEA
 23322                           fsr0l	equ	0xFE9
 23323                           wreg	equ	0xFE8
 23324                           postdec1	equ	0xFE5
 23325                           fsr1h	equ	0xFE2
 23326                           fsr1l	equ	0xFE1
 23327                           indf2	equ	0xFDF
 23328                           postinc2	equ	0xFDE
 23329                           postdec2	equ	0xFDD
 23330                           fsr2h	equ	0xFDA
 23331                           fsr2l	equ	0xFD9
 23332                           status	equ	0xFD8


Data Sizes:
    Strings     342
    Constant    625
    Data        159
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     95     111
    BANK0           128     26     116
    BANK1           256     26     150
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_36(CODE[5]), STR_35(CODE[5]), STR_34(CODE[12]), STR_33(CODE[19]), 
		 -> STR_32(CODE[16]), STR_31(CODE[10]), STR_30(CODE[11]), STR_29(CODE[19]), 
		 -> STR_27(CODE[5]), STR_26(CODE[8]), STR_25(CODE[8]), STR_24(CODE[18]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[5]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[7]), STR_14(CODE[13]), STR_13(CODE[9]), STR_12(CODE[11]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[3]), 
		 -> STR_7(CODE[13]), STR_6(CODE[19]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_37(CODE[22]), STR_28(CODE[11]), STR_5(CODE[20]), STR_4(CODE[11]), 
		 -> STR_3(CODE[24]), STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK1[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Test_Alarm->_DS3231_Turn_Off_Alarm
    _Test_Alarm->_DS3231_Turn_On_Alarm
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    _Monitor_Heater->_get_duty_cycle
    _get_duty_cycle->_do_update_pwm
    _Do_Setup_Time->_check_for_button_input
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Heater_Temp->_check_for_button_input
    _Initialize_Setup_Heater_Screen->_drawtext
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _Update_Setup_Heater_Screen->_drawtext
    _Do_Setup_Alarm_Time->_check_for_button_input
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___ftdiv->___ftmul
    _printf->___ftsub
    _scale->___awmod
    _fround->___awmod
    ___ftmul->___awdiv
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Do_Setup_Heater_Temp
    _Do_Setup_Time->_check_for_button_input
    _Do_Setup_Heater_Temp->_check_for_button_input
    _Do_Setup_Alarm_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1749389
                                             24 BANK0      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                      _Set_Alarm_RGB
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                           11     8      3   10575
                                             60 COMRAM    11     8      3
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    8511
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        5     5      0   51308
                                             73 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0   11304
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   11304
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0    7370
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_Alarm_RGB
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _Set_Alarm_RGB                                        2     2      0      44
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    1765
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     687
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     581
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          4     2      2    5543
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           1     1      0    5478
                                             30 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0   28594
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       6     2      4   17290
                                             69 COMRAM     6     2      4
                            ___awdiv
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  404820
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   45807
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   41991
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   55088
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   65581
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10493
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   41991
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   41991
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  366645
                                             22 BANK0      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   36827
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   42093
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   55088
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   55088
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   42093
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   42093
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  617000
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0   70663
                                             94 COMRAM     1     1      0
                                             20 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   45807
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0  112521
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9312
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9334
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   55088
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   66171
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   54793
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3255
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1819
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    5210
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4222
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4222
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4132
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4132
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0   10788
                                             73 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10334
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11350
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11350
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0   11304
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0  112521
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0  112521
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   70530
                                              0 BANK0     20     6     14
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19133
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   18854
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5106
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    4853
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5385
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                             88 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     718
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   31753
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17248
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8980
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3092
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     822
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
       ___awdiv
         ___wmul (ARG)
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Set_Alarm_RGB
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Test_Alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_Alarm_RGB
     ___ftge
   _Toggle_Heater
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
       _isdigit
       _putch
       _scale
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___awdiv
       ___wmul (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 01 18:35:15 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                                           _i 0093                            __size_of_I2C_Start 0012  
                                 _SSPSTATbits 000FC7                            __size_of_I2C_Write 003E  
                                drawCircle@x0 001C                                  drawCircle@y0 001E  
                                          l31 3D28                                            l41 501A  
                                          l34 4D2C                                            l36 4D30  
                                          l44 4ACE                                            l80 4A4C  
                                          l83 4B5A                  __size_of_Do_Setup_Alarm_Time 00C0  
                                ___awdiv@sign 001C                          __size_of_Turn_On_Fan 0012  
                         ___wmul@multiplicand 0013                               ??_Update_Screen 004A  
                                ___ftadd@exp1 0058                                  ___ftadd@exp2 0057  
                                ___ftadd@sign 0056                                           l117 4CA0  
                                         l195 4C00                                           l515 518E  
                                         l550 3334                                           l557 33C4  
                                         _PR2 000FCB                                           _RGB 0134  
                        DS3231_Init@Address_7 0017                          DS3231_Init@Address_E 0018  
                                         _day 0067                             _Deactivate_Buzzer 5208  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 00AC                                           _nbr 0095  
                                         _rpm 0099                         __size_of_Turn_Off_Fan 000C  
                                         _rps 009B                                           _txt 0062  
                                ___awmod@sign 0042                                read_volt@volts 0043  
                                         prod 000FF3                                           wreg 000FE8  
                               _Increase_Time 3A6A                  __size_of_Go_Next_Alarm_Field 0020  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 47CA  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 4D32                                  ___ftdiv@cntr 0037  
                                ___ftdiv@sign 003C                                  __CFG_WDT$OFF 000000  
                                        l1110 4820                                          l1022 2040  
                                        l1103 40AC                                          l1033 23C4  
                                        l2010 4A90                                          l2003 4E12  
                                        l1107 4D86                                          l1124 4F9E  
                                        l1212 4966                                drawFastVLine@h 0019  
                                        l1222 5090                                          l2014 34AA  
                                        l1150 4C3A                                          l1410 1E7A  
                                        l1163 4C6E                                          l1172 4DD4  
                                        l2029 4E88                                          l1325 374A  
                                        l1157 4650                                          l1326 36B6  
                                        l1166 4446                                          l2055 4DFA  
                                        l1272 4250                                          l1336 2488  
                                        l1328 3726                                          l1417 1660  
                                        l1329 3748                                          l1169 4DB4  
                                        l1266 4D02                                          l1290 28A8  
                                        l2058 41B8                                          l2164 4B4A  
                                        l2068 44A6                                drawFastVLine@x 0022  
                              drawFastVLine@y 0018                                          l1446 08A4  
                                        l1552 44E4                                          l1288 29CE  
                                        l2088 46B0                                          l1528 0C5E  
                                        l1561 4526                                          l1297 2924  
                                        l1556 44FE                                          l1564 4DAE  
                                        l1900 38C0                                          l1557 4500  
                                        l1485 071A                                          l1558 450A  
                                        l1559 450C                                          l1930 2204  
                                        l1770 42D2                                          l1933 20B0  
                                        l1757 3EEE                                          l1782 4BC4  
                                        l1944 2172                                          l1848 2F14  
                                        l6112 372A                                          l1953 218E  
                                        l1929 2086                                          l1857 2F04  
                                        l1961 358C                                          l6122 3744  
                                        l1971 2B56                                          l1972 2B7E  
                                        l1964 3558                                          l6116 3734  
                                        l6108 371C                                          l6080 4B1E  
                                        l1889 38E8                                          l1969 2BEE  
                                        l1993 300C                                          l7130 44DC  
                                        l7122 44CA                                          l1978 2BDE  
                                        l6090 3680                                          l1987 3F84  
                                        l7142 44F6                                          l7134 44E8  
                                        l7126 44D4                                          l5622 49E2  
                                        l6078 4B18                                          l7302 4F8C  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5560 4246  
                                        l5544 41DA                                          l6096 36EE  
                                        l7240 1F1E                                          l5642 4CE4  
                                        l5618 49C6                                          l7306 4F98  
                                        l7250 1FD6                                          l7234 1E88  
                                        l5548 4212                                          l9020 42AC  
                                        l9012 4284                                          l9004 4268  
                                        l7244 1F5C                                          l7260 2212  
                                        l5558 4238                                          l9014 428E  
                                        l7238 1EE6                                          l7270 22E0  
                                        l7262 224A                                          l9016 4296  
                                        l9024 42B8                                          l9008 4276  
                                        l7248 1F9A                                          l7256 2018  
                                        l7272 231C                                          l7512 4EFA  
                                        l5850 4A10                                          l9130 288A  
                                        l7522 4F20                                          l7266 2288  
                                        l7282 239C                                          l7514 4F00  
                                        l5860 4A26                                          l9140 28AC  
                                        l9300 2BB6                                          l9028 42C8  
                                        l9212 13AE                                          l6812 4CAC  
                                        l7276 235E                                          l5862 4A2E  
                                        l5854 4A18                                          l9150 2918  
                                        l9134 2896                                          l9230 158A  
                                        l9222 1466                                          l6814 4CB6  
                                        l5872 4A42                                          l5880 4B52  
                                        l9160 2946                                          l9152 291C  
                                        l9144 28B4                                          l9320 2E2C  
                                        l9304 2BCA                                          l5874 4A48  
                                        l9170 29C2                                          l9162 296E  
                                        l9138 28A4                                          l9314 2E1C  
                                        l9306 2BD8                                          l9218 1456  
                                        l5868 4A36                                          l9148 28E4  
                                        l9404 33E4                                          l9236 163C  
                                        l9500 002C                                          l7660 4EC0  
                                        l5886 4B64                                          l9422 343E  
                                        l9342 2EA2                                          l9334 2E70  
                                        l9190 1D76                                          l9510 0066  
                                        l6870 246E                                          l5888 4B6A  
                                        l9168 299A                                          l9176 29CA  
                                        l8800 3888                                          l9440 3498  
                                        l9432 3468                                          l9360 2EDC  
                                        l9264 2B1C                                          l9248 4E80  
                                        l9600 045E                                          l9512 007C  
                                        l9504 0042                                          l5898 4B7C  
                                        l8810 38C8                                          l8802 38A8  
                                        l9434 3476                                          l9426 344E  
                                        l9450 4160                                          l9354 2EC6  
                                        l9346 2EB2                                          l9258 2AFE  
                                        l9610 04DA                                          l9530 012A  
                                        l9506 0058                                          l7658 4EBA  
                                        l9380 3F22                                          l8804 38B4  
                                        l8900 21DE                                          l9372 4A66  
                                        l9428 3454                                          l9436 3480  
                                        l9452 416E                                          l9364 2EF0  
                                        l9700 08F0                                          l9604 04C6  
                                        l9532 0166                                          l9524 0118  
                                        l9516 009C                                          l7668 4EE0  
                                        l9390 3F80                                          l9462 41A8  
                                        l9454 4176                                          l9470 445A  
                                        l9366 2EFE                                          l9358 2ED6  
                                        l9294 2BA0                                          l9286 2B8C  
                                        l8910 2F34                                          l9198 1E3A  
                                        l9710 092E                                          l9622 056C  
                                        l9614 0514                                          l9606 04CC  
                                        l9526 011E                                          l9384 3F54  
                                        l8816 38DA                                          l9472 4468  
                                        l8912 2F4E                                          l9720 0976  
                                        l9704 091A                                          l9632 05C4  
                                        l8842 2094                                          l9474 4470  
                                        l9298 2BB0                                          l8930 2F90  
                                        l9714 0968                                          l9706 0920  
                                        l9642 05FE                                          l9626 0596  
                                        l9618 051A                                          l9570 02DA  
                                        l9562 0272                                          l9546 01C2  
                                        l6898 255E                                          l9484 4658  
                                        l8940 2FBE                                          l8916 2F5C  
                                        l9724 0984                                          l9660 06E8  
                                        l9644 0612                                          l9636 05D4  
                                        l9580 0360                                          l9830 35FE  
                                        l8870 2116                                          l8854 20CA  
                                        l9478 4496                                          l9486 4666  
                                        l8934 2FA2                                          l9742 0A10  
                                        l9718 0970                                          l9734 09C6  
                                        l9662 06FC                                          l9638 05EE  
                                        l9654 06C8                                          l9590 03CC  
                                        l9574 0302                                          l8792 3844  
                                        l8872 2122                                          l8864 20F2  
                                        l8848 20BE                                          l8960 3E70  
                                        l8944 2FD0                                          l9760 0AAC  
                                        l9728 09BE                                          l9736 09DA  
                                        l9672 0746                                          l9656 06D8  
                                        l9648 063A                                          l9592 03D8  
                                        l9576 0318                                          l9842 365C  
                                        l9834 3618                                          l9818 35B6  
                                        l8794 3850                                          l8890 21AC  
                                        l8882 215A                                          l8874 212E  
                                        l8938 2FB8                                          l9762 0AB8  
                                        l9770 0AFE                                          l9754 0A82  
                                        l9746 0A48                                          l9682 0874  
                                        l9666 0720                                          l9586 03A6  
                                        l9578 034A                                          l9906 3C62  
                                        l9844 3662                                          l8796 3870  
                                        l8788 3834                                          l8884 2166  
                                        l8876 2136                                          l8972 3E98  
                                        l8948 2FE6                                          l9772 0B10  
                                        l9780 0C04                                          l9756 0A8E  
                                        l9748 0A54                                          l9684 0884  
                                        l9676 0798                                          l9596 041C  
                                        l9852 34CA                                          l8974 3EA2  
                                        l8966 3E82                                          l9774 0B90  
                                        l9782 0C18                                          l9766 0AD6  
                                        l9598 044A                                          l9854 34E4  
                                        STR_1 FEA8                                          l8992 3EE4  
                                        l8984 3EC8                                          l8976 3EAA  
                                        l9784 0C22                                          l9688 0894  
                                        STR_2 FEF4                                          STR_3 FEC6  
                                        l9786 0C3C                                          l9858 34F2  
                                        STR_4 FFAA                                          STR_5 FF09  
                                        l8988 3ED4                                          STR_6 FF1D  
                                        STR_7 FF63                                          l9878 3532  
                                        STR_8 FFF5                                          STR_9 FFEF  
                                        l9888 3566                                          u4230 36AE  
                                        u4240 36E4                                          u3450 4208  
                                printf@tmpval 0184                                          u7131 2F26  
                                        u7151 2F44                                          u7420 297C  
                __end_of_Activate_Buzzer_2KHz 50F2                                          u8190 0712  
                                        u7551 2AF0                                          u8511 34DA  
                                        u8440 35E2                                          u6921 2052  
                                        u6931 2066                                          u7571 2B0E  
                                        _RBPU 007F8F                  __end_of_Activate_Buzzer_4KHz 50CE  
                                        u7761 33D6                                          u8491 34BC  
                                        u7780 3402                                          u9380 1B1C  
                                        u9437 51C4                                          u7785 33FA  
                                        u7970 0208                                          u9388 1B20  
                                        u7975 01FC                                          u8935 463E  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 004C  
                       _setup_heater_set_temp 00B1                                  _DS1621_tempC 0089  
                                _DS1621_tempF 008B                         _setup_heater_set_text 0177  
                         ??_Deactivate_Buzzer 0011                                          _date 0144  
                                        _main 19D6                                          _font FC37  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 006A  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 51D6  
                            __end_of_I2C_Read 4A4E                                          _time 0168  
                                        _year 006F                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 00B9  
                                        _volt 0084                              __end_of_I2C_Stop 5116  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                                _Monitor_Heater 4D04  
                             __end_of_Do_Init 4712                                   _Do_Beep_Bad 506E  
                             ??_drawFastVLine 001C                                  ___ftmul@cntr 002C  
                             __end_of_i2cNack 51E0                                  ___param_bank 000010  
                                ___ftmul@sign 002D       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003C                     ??_DS3231_Write_Alarm_Time 004A  
                       __size_of_Do_Beep_Good 0014                                  _Turn_Off_Fan 51B4  
                                ___fttol@lval 0038               __size_of_Exit_Setup_Heater_Temp 0010  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 287A  
                            __end_of_INT1_isr 51FE                                         l10102 4040  
                                       l10200 4724                                         l10112 4084  
                            __end_of_INT2_isr 51F4                                         l10106 405A  
                                       l10116 408E                                         l10206 473A  
                                       l10214 4750                                         l10126 40A8  
                                       l10310 3B4E                                         l10302 3B32  
                                       l10062 3CCE                                         l10216 4768  
                                       l10320 3B74                                         l10304 3B38  
                                       l10056 3CA8                                         l10322 3B7A  
                                       l10314 3B5E                                         l10074 3D0E  
                                       l10180 4796                                         l10172 477C  
                                       l10332 3BA0                                         l10316 3B64  
                                       l10308 3B48                                         l10068 3CE4  
                                       l10174 4780                                         l10190 47C4  
                                       l10326 3B8A                                         l10342 3A6C  
                                       l10078 3D1A                                         l10414 5014  
                                       l10510 0CE6                                         l10184 47A6  
                                       l10168 4770                                         l10256 4FCE  
                                       l10264 4FB4                                         l10328 3B90  
                                       l10336 3BA6                                         l10360 3AAE  
                                       l10520 0D48                                         l10504 0CA6  
                                       l10178 4790                                         l10194 4714  
                                       l10338 3BD0                                         l10354 3A98  
                                       l10434 4608                                         l10188 47AC  
                                       l10372 3ADA                                         l10348 3A82  
                                       l10380 3AF0                                         l10444 4C12  
                                       l10710 39E8                                         l10366 3AC4  
                                       l10382 3B1A                                         l10438 4616  
                                       l10526 0D88                                         l10448 4C1E  
                                       l10480 3374                                         l10800 19F2  
                                       l10730 3A2C                                         l10722 3A10  
                                       l10298 3B22                                         l10482 3380  
                                       l10458 3304                                         l10652 37A2  
                                       l10580 0F0A                                         l10742 3A56  
                                       l10734 3A3A                                         l10726 3A1E  
                                       l10478 336C                                         l10566 0E5E  
                                       l10398 4BA0                                         l10744 3A5A  
                                       l10680 3802                                         l10672 37E6  
                                       l10664 37CA                                         l10584 0F12  
                                       l10568 0E74                                         l10816 1A6C  
                                       l10738 3A48                                         l10746 3A60  
                                       l10770 3FDC                                         l10586 0F1A  
                                       l10578 0EF4                                         l10850 1BBC  
                                       l10842 1BA8                                         l10756 3F9A  
                                       l10684 3810                                         l10676 37F4  
                                       l10668 37D8                                         l10860 1BD6  
                                       l10782 4006                                         l10774 3FEA  
                                       l10686 3814                                         l10870 1C18  
                                       l10854 1BC6                                         l10846 1BB2  
                                       l10862 1BF4                                         l10838 1B92  
              __size_of_Activate_Buzzer_500Hz 0012                                         l10784 400A  
                                       l10688 381A                                         l10872 1C24  
                                       l10856 1BD0                                         l10778 3FF8  
                                       l10786 4010                     __end_of_Deactivate_Buzzer 5210  
                             ??_do_update_pwm 003D                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                 __end_of_Activate_Buzzer_500Hz 5104  
                                       ?_main 0001                               __end_of___awdiv 3EF0  
                             __end_of___ftadd 2206                               drawCircle@ddF_x 0026  
                                       STR_10 FFA5                               drawCircle@ddF_y 0028  
                                       STR_11 FFDF                                         STR_20 FFE9  
                                       STR_12 FF9F                                         STR_21 FFED  
                                       STR_13 FFBF                                         STR_22 FFE9  
                                       STR_30 FF89                                         STR_14 FF70  
                                       STR_23 FFED                                         STR_15 FFD8  
                                       STR_31 FFB5                                         STR_16 FFF8  
                                       STR_32 FF53                                         STR_24 FF30  
                                       STR_33 FF1D                                         STR_17 FFFB  
                                       STR_25 FFC8                                         STR_18 FFE4  
                                       STR_26 FFD0                                         STR_34 FF7D  
                                       STR_35 FFA5                                         STR_27 FFA5  
                                       STR_19 FFF1                                         STR_36 FFDF  
                                       STR_28 FF94                               __end_of___awmod 42D4  
                                       STR_29 FF1D                                         STR_37 FEDE  
                                       STR_38 FF42                               __end_of___ftdiv 358E  
                             __end_of___ftneg 4E20                               __end_of___lldiv 41CA  
                             __end_of___ftmul 300E                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___llmod 44B8                               __end_of___ftsub 4A92  
                             __end_of___fttol 34AC                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                                       i2l271 4104                                         i2l283 2878  
                             ___awdiv@counter 001B                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTA 000F80  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 4AD0                                         _Rcmd1 29D0  
                                       _Rcmd3 300E                                  ___lltoft@exp 0021  
    Update_Setup_Screen_Cursor_Backward@field 002E                                    _i2cHighSda 5218  
                                  _i2cHighScl 51C0                                  bcd_2_dec@bcd 0015  
                                bcd_2_dec@dec 0013                                 ___awtoft@sign 001C  
                             __end_of_dpowers FE3A                                         _color 0091  
                                       _font2 FD36                                         _found 0069  
                                       _scale 1282                               __end_of_isdigit 4E8A  
                                       _tempC 00D0                                         _tempF 00D4  
                                       _month 006C                                 ___ftpack@sign 0015  
                                       _putch 518A                             __end_of_I2C_Start 5128  
                           __end_of_I2C_Write 4B8A                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                        __end_of_Monitor_Heater 4D32  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 505A               __size_of_check_for_button_input 0094  
                       __end_of_Go_Next_Field 4EEA                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                               __initialization 458E  
                               ??_Set_RPM_RGB 0021                                  __end_of_main 1C38  
                                __end_of_font FD36                      ?_Do_Save_New_Heater_Temp 0001  
                __end_of_Decrease_Heater_Temp 4FD4                              __end_of_Init_ADC 51A6  
                            __end_of_Rcmd2red 4B0E                            _Select_Alarm_Field 00A5  
                                      ??_main 00F2                                 ___fttol@sign1 0037  
                               __activetblptr 000002                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 50E0                          __size_of__tdiv_to_l_ 0110  
     I2C_Write_Address_Write_One_Byte@Address 0013                                    _Set_DC_RGB 4C02  
                       __end_of_Go_Prev_Field 4ECA                     ??_TFT_GreenTab_Initialize 001D  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 004A  
                              _Init_Interrupt 4E20                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 00A0  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                            ___llmod@dividend 001E                                        ?_scale 0043  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0017                        _Exit_Setup_Heater_Temp 514A  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 4BC6                                        _HEATER 009D  
                                      ?_putch 0001                              __end_of___ftpack 38EA  
                            __end_of___lbtoft 4DFC                              __end_of___lltoft 46B2  
                                      _DC_Txt 00C8                 __size_of_Increase_Heater_Temp 001A  
                                   ??_Do_Init 0017                                        i2l8432 40F0  
                                      i2l8436 40FA                                        i2l8428 40E6  
                                      i2l7904 2826                                        i2l7914 284A  
                                      i2l7850 2724                                        i2l7922 2854  
                                      i2l7916 2850                                        i2l7860 2756  
                                      i2l7872 2780                                        i2l7890 27C6  
                                      i2l7866 2776                                        i2l7892 27CC  
                                      i2l7884 27AA                                        i2l7878 27A0  
                                      i2l7896 27D0                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0018                           __size_of_TIMER1_isr 000E  
                                      _SPBRGH 000FB0                               ?_Monitor_Heater 0001  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00C4                              _force_nec_state0 51FE  
                            __end_of_delay_ms 496E                                        _i2cAck 5128  
            ??_Initialize_Setup_Heater_Screen 004A               ?_Initialize_Setup_Heater_Screen 0001  
                __size_of_Go_Prev_Alarm_Field 0020                              __end_of_fillRect 4A06  
                            __end_of_drawChar 29D0                              __end_of__powers_ FE88  
                          __size_of_OpenUSART 0070                                        ___ftge 3EF0  
                 __end_of_Increase_Alarm_Time 476E                          DS3231_Init@control_E 0019  
                                      ___wmul 4D88                                     ??___awdiv 001B  
                            __end_of_drawtext 3670                                     ??___ftadd 0053  
                                   ??___awmod 0041                                     ??___ftdiv 0034  
                                   ??___ftneg 0014                                    _Test_Alarm 32DC  
                                   ??___lldiv 0019                                     ??___ftmul 0025  
                                   ??___llmod 0026                                     ??___ftsub 005F  
                                   ??___fttol 0032                                        _chkisr 0008  
                                      _array1 011F                                        _buffer 0100  
              __size_of_Exit_Setup_Alarm_Time 0010                                        _nec_ok 0097  
               __end_of_Exit_Setup_Alarm_Time 516A                                        _fround 1C38  
                                      clear_0 4594                                        clear_1 45A0  
                            ___awdiv@quotient 001D                                        _minute 006B  
                                      _second 006D                               ___awmod@divisor 003F  
                        _Activate_Buzzer_2KHz 50E0                             read_volt@num_step 0046  
                        _Activate_Buzzer_4KHz 50BC                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 0041  
                                      _printf 001C                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 4CA2  
                                      _strlen 4B0E                         ___ftmul@f3_as_product 0029  
                      __end_of_Init_Interrupt 4E44                           __end_of_Set_RPM_RGB 4652  
                        __end_of_get_full_ADC 4DD6                        _check_for_button_input 401A  
                            _Do_Save_New_Time 5032                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0048                                     ?_I2C_Stop 0001  
                                __mediumconst FC36                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 4F4A                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                            __end_of_spiwrite 5096                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                           _Do_Setup_Alarm_Time 39AA  
                                  __accesstop 0080                       __end_of__initialization 45E6  
                            ??_get_duty_cycle 004A                                   read_volt@mv 0040  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0058  
                                  ___ftadd@f1 004D                                    ___ftadd@f2 0050  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 00AE  
                          _setup_alarm_second 00AF                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002E               __end_of_Do_Save_New_Heater_Temp 505A  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           _Go_Next_Alarm_Field 4F0A  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0059                                    ___ftsub@f2 005C  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2AE0  
                               __end_of_Rcmd3 3100                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 4E44                                  __pidataBANK1 4354  
                                  ___lltoft@c 0019                                 __end_of_font2 FE12  
                           __end_of_i2cLowSda 51EA                             __end_of_i2cLowScl 5218  
                               __end_of_scale 1662                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 5198                         ?_Activate_Buzzer_2KHz 0001  
                       ?_Activate_Buzzer_4KHz 0001                        _Do_Save_New_Alarm_Time 4FEE  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0047  
                                dec_2_bcd@dec 0049                        __size_of_Decrease_Time 00B6  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  __div_to_l_ 2E0C                        __size_of_Set_Alarm_RGB 0034  
                                  ??_I2C_Init 0015                                   ?_Set_DC_RGB 0001  
                                  ??_I2C_Read 0011                                  _alarm_minute 0065  
                                _alarm_second 0066              ??_Update_Setup_Alarm_Time_Screen 005F  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 48CA  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 4528  
                             __div_to_l_@exp1 001C                               __div_to_l_@cntr 001B  
                                     ??_scale 0046                               __div_to_l_@quot 0017  
                                     ??_putch 0011                          _Decrease_Heater_Temp 4FBA  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 0080  
                            _setup_alarm_hour 006E                                     ?_Init_ADC 0001  
                            _setup_alarm_time 014D          __end_of_Initialize_Setup_Time_Screen 2CFE  
       __size_of_Initialize_Setup_Time_Screen 010E                  _Initialize_Setup_Time_Screen 2BF0  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                         __end_of_Toggle_Heater 501C  
                          __size_of_init_UART 0014                               spiwrite@spidata 0012  
                                  _alarm_date 00A9                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    ??_INT2_isr 0001  
                                  _alarm_mode 008F                                    _alarm_hour 0064  
                                  _alarm_time 013B                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                 __div_to_l_@f1 0011  
                               __div_to_l_@f2 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0078  
                        Set_DC_RGB@duty_cycle 001F                            __CFG_CCP2MX$PORTBE 000000  
                               ??_Turn_On_Fan 0046                                I2C_Read@inByte 0013  
                                     ?___ftge 0011           __size_of_Update_Setup_Heater_Screen 0096  
                  DS3231_Turn_On_Alarm@Device 001F                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 _Set_RPM_RGB 45F0                                   ?_Test_Alarm 0001  
                       ??_Do_Setup_Alarm_Time 0060                                       ?_chkisr 0001  
                             _heater_set_temp 00B7                        __size_of_setAddrWindow 0056  
                           __end_of_bcd_2_dec 4D88                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 00D8                                  ??_TIMER1_isr 0001  
                                     ?_fround 0043                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 0087                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                  I2C_Write@n 0012                                       ?_printf 00DA  
                                   ?___lltoft 0019                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 4822  
                                  _fillScreen 4F68                                       _MATCHED 008D  
                       __end_of_Update_Screen 1282                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 23C6                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00BF                         __end_of_fillRectangle 374C  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 46B2                      _I2C_Write_Cmd_Write_Data 4F2A  
                  __end_of_I2C_Write_Cmd_Only 4FEE                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 401A                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 3B20                                ??_Wait_One_Sec 0011  
                                     _i2cNack 51D6                            __end_of_TIMER1_isr 51B4  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 005C  
                               _write_command 517A                                 _Set_Alarm_RGB 4C3C  
                                   _I2C_Start 5116                                     _I2C_Write 4B4C  
                           ??_Exit_Time_Setup 004A                               __size_of_i2cAck 0012  
                           __end_of__npowers_ FE61                                       __Hparam 0000  
                                  _scale$3340 0046                                       __Lparam 0000  
                         __size_of_Set_DC_RGB 003A                           __end_of_DS1621_Init 4F68  
                         __end_of_DS3231_Init 39AA                             __end_of_drawPixel 4D04  
                       __end_of_drawFastVLine 4252                               __size_of___ftge 0096  
                                     ___awdiv 3E5A                                       ___ftadd 2042  
                                     ___awmod 4252                                       ___ftdiv 34AC  
                                     ___ftneg 4DFC                                       ___lldiv 413E  
                             __size_of___wmul 0028                        ??_Activate_Buzzer_2KHz 0011  
                                     ___ftmul 2F16                                       ___llmod 4448  
                      ??_Activate_Buzzer_4KHz 0011                                       ___ftsub 4A4E  
                                     ___fttol 33C6                         __size_of_get_full_ADC 0026  
                             __size_of_chkisr 4136                                     ?_spiwrite 0001  
                                     __pcinit 458E                                    ??___awtoft 001C  
                                  ??___ftpack 0016                                    ??___lbtoft 001C  
                             __size_of_fround 0244                                       __ramtop 1000  
                                     _get_RPM 4A92                                    ??___lltoft 001D  
                                     __ptext0 19D6                                       __ptext1 43D0  
                                     __ptext2 4DB0                                       __ptext3 4B8A  
                                     __ptext4 4A92                                       __ptext5 0C60  
                   __size_of_DS1621_Read_Temp 003C                                       __ptext6 5006  
                                     __ptext7 50AA                                       __ptext8 32DC  
                                     __ptext9 4C3C                               __size_of_printf 0C44  
                           __end_of_init_UART 50AA                           __end_of_Turn_On_Fan 50BC  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FEA8  
                    __end_of_force_nec_state0 5208                                     _T1CONbits 000FCD  
                                 ?__div_to_l_ 0011                                       _dpowers FE12  
                       __end_of_do_update_pwm 3C8C                                       _isdigit 4E68  
                       _Activate_Buzzer_500Hz 50F2                              ___awmod@dividend 003D  
                                  _duty_cycle 0068                       ?_Exit_Setup_Heater_Temp 0001  
                         _Go_Prev_Alarm_Field 4EEA                             __end_of_read_volt 4448  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 5032  
            __size_of_Do_Save_New_Heater_Temp 0014                                 drawtext@_text 003A  
                               drawtext@color 003C                              ??_Monitor_Heater 004C  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 50CE                             _DS3231_Write_Time 3D2A  
                               _setAddrWindow 4822                                __pintcode_body 40AE  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 45E6                                 _Do_Setup_Time 374C  
                                   _INT1_flag 009E                           __size_of_Test_Alarm 00EA  
                                   _INT2_flag 009F                                    ??_drawtext 0041  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FC36  
                   __size_of_DS3231_Read_Time 0066                                       int_func 40AE  
                              ?_Set_Alarm_RGB 0001                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 004B                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 0021  
                    __end_of_Do_Save_New_Time 5046                                  _get_full_ADC 4DB0  
                             ___lldiv@divisor 0015                           ??_DS3231_Write_Time 004A  
                        ?_Go_Prev_Alarm_Field 0001                               ___lldiv@counter 001D  
                     check_for_button_input@j 00EE                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 00B8                          _DS3231_Turn_On_Alarm 4878  
                                   _RCSTAbits 000FAB                                       printf@c 0195  
                                     printf@f 00DA                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                  __end_of_Increase_Heater_Temp 4FBA  
                              __tdiv_to_l_@f1 0011                                __tdiv_to_l_@f2 0014  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                                 ??__tdiv_to_l_ 0017  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                              drawtext@cursor_x 0049  
                            drawtext@cursor_y 0048                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTEbits 000F84  
                            I2C_Write@outByte 0011        __end_of_Initialize_Setup_Heater_Screen 31F0  
     __size_of_Initialize_Setup_Heater_Screen 00F0                _Initialize_Setup_Heater_Screen 3100  
                                  _setup_date 0156                                   ?_fillScreen 0024  
              __end_of_Exit_Setup_Heater_Temp 515A                                    _setup_hour 00B2  
                                  _setup_time 015F                                    _setup_year 00B6  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004E  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 3DC4  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
                      __size_of_Go_Next_Field 0020        I2C_Write_Address_Read_One_Byte@Address 0014  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                      ??_Decrease_Heater_Temp 004D                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                          _In_Heater_Temp_Setup 00A1  
                            drawtext@textsize 0044                                    drawPixel@x 001B  
                                  drawPixel@y 0018                                   _DS1621_Init 4F4A  
                                 _DS3231_Init 38EA                                   ___ftdiv@exp 003B  
                                 printf@width 0188                                     _TXSTAbits 000FAC  
                       ??_Go_Prev_Alarm_Field 0031             __size_of_Update_Setup_Time_Screen 0186  
                          get_full_ADC@result 0015                           __size_of__div_to_l_ 010A  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 0180                             __size_of_INT1_isr 000A  
                           __size_of_INT2_isr 000A                                __end_of_i2cAck 513A  
                                 ___ftmul@exp 0028                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 004A                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0014                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 50AA                __end_of_check_for_button_input 40AE  
                            ??_Init_Interrupt 0011            Update_Setup_Heater_Screen@dc_char1 004A  
          Update_Setup_Heater_Screen@dc_char2 004B            Update_Setup_Heater_Screen@dc_char3 004C  
                          __end_of_i2cHighSda 5220                                __end_of___ftge 3F86  
                          __end_of_i2cHighScl 51CC                                __end_of___wmul 4DB0  
                               delay_ms@count 001B                                    _write_data 516A  
                              __end_of_chkisr 413E                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 501C                                    drawtext@bg 003E  
                              __end_of_fround 1E7C                         _Exit_Setup_Alarm_Time 515A  
                      ?_Activate_Buzzer_500Hz 0001                                     _Nec_code1 00A3  
                                   _i2cLowSda 51E0                          _Do_Setup_Heater_Temp 3F86  
                                   _i2cLowScl 5210                  __size_of_Increase_Alarm_Time 005C  
                        __end_of_Wait_One_Sec 4FA0                                __end_of_printf 0C60  
                                ??_Set_DC_RGB 001F                         __end_of_Increase_Time 3B20  
                              __end_of_strcpy 4CD4                                __end_of_strlen 4B4C  
                                   _Nec_state 00A4                           start_initialization 458E  
                         __end_of__tdiv_to_l_ 2BF0                        Update_Screen@neg_tempF 004C  
                          get_duty_cycle@diff 004B                               ??_Decrease_Time 004A  
                          get_duty_cycle@temp 0046                               ??_write_command 0013  
                             ??_Set_Alarm_RGB 0011               __end_of_DS3231_Write_Alarm_Time 4354  
                                   _OpenUSART 44B8                __size_of_DS3231_Turn_Off_Alarm 0052  
                DS3231_Read_Alarm_Time@Device 0015                 __end_of_DS3231_Turn_Off_Alarm 491C  
                             ___llmod@divisor 0022                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                             ___llmod@counter 0026                                   ??_I2C_Write 0011  
                      _DS3231_Read_Alarm_Time 496E                                      ??_i2cAck 0011  
                           __size_of_Rcmd2red 003E                           __size_of_fillScreen 001C  
     I2C_Write_Address_Read_One_Byte@Data_Ret 0015                __end_of_Do_Save_New_Alarm_Time 5006  
                         __size_of_drawCircle 01AE                                 _Go_Next_Field 4ECA  
                          __end_of_Set_DC_RGB 4C3C                                      ??___ftge 0017  
                                    ??___wmul 0015                                  ?_Set_RPM_RGB 001F  
                                ??_Test_Alarm 0020                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                            Set_Alarm_RGB@color 0012  
                                 __pdataBANK0 00B7                                   __pdataBANK1 0100  
                                    ??_fround 0046                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 00E8  
                            _DS1621_Read_Temp 4BC6                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 476E                                     _bcd_2_dec 4D5E  
                                  fround@prec 004C                             __size_of___awtoft 003C  
                           __size_of___ftpack 00C6                             __size_of___lbtoft 0026  
                     _Do_Save_New_Heater_Temp 5046                             __size_of___lltoft 0060  
                                 __pbssCOMRAM 0060                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 009A                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00DA                                 __pcstackBANK1 017C  
                               _Go_Prev_Field 4EAA                               ??_Do_Setup_Time 0060  
                                   _dec_2_bcd 47CA                               _Exit_Time_Setup 513A  
                                 ??_LCD_Reset 001D                                  _isdigit$2987 0012  
                           __size_of_delay_ms 0052                                 _Heater_SW_Txt 00CC  
                        _Increase_Heater_Temp 4FA0                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 33C6                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 4528                           _Heater_Set_Temp_Txt 00BA  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 00E2                                 ?_Do_Beep_Good 0001  
                      ??_DS3231_Turn_On_Alarm 001B   __end_of_Update_Setup_Screen_Cursor_Backward 23C6  
__size_of_Update_Setup_Screen_Cursor_Backward 01C0         ??_Update_Setup_Screen_Cursor_Backward 002E  
        ?_Update_Setup_Screen_Cursor_Backward 0001           _Update_Setup_Screen_Cursor_Backward 2206  
                 __end_of_Do_Setup_Alarm_Time 3A6A                                ?_Go_Next_Field 0001  
                                 I2C_Read@ack 0011                                     _bit_count 00AA  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 4D5E  
                              ??_Turn_Off_Fan 0011                                 __pmediumconst FC36  
                                    ?___awdiv 0017                                     __ptext100 516A  
                                   __ptext101 517A                                     __ptext110 51CC  
                                   __ptext102 5082                                     __ptext111 4F4A  
                                   __ptext103 4D88                                     __ptext120 5128  
                                   __ptext112 4F2A                                     __ptext104 46B2  
                                   __ptext121 501C                                     __ptext113 4FD4  
                                   __ptext105 5096                                     __ptext130 26FA  
                                   __ptext122 51E0                                     __ptext114 4BC6  
                                   __ptext106 44B8                                     __ptext131 51FE  
                                   __ptext123 5210                                     __ptext115 4B4C  
                                   __ptext107 51B4                                     __ptext124 5218  
                                   __ptext116 5104                                     __ptext108 4E20  
                                   __ptext125 51C0                                     __ptext117 5116  
                                   __ptext109 5198                                      ?___ftadd 004D  
                                   __ptext118 4A06                                     __ptext127 51A6  
                                   __ptext119 51D6                                     __ptext128 51EA  
                                   __ptext129 51F4                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                                    ?___lldiv 0011                                      ?___ftmul 001F  
                                    ?___llmod 001E                                      ?___ftsub 0059  
                                   __npowers_ FE3A                                      ?___fttol 002E  
                     __size_of_get_duty_cycle 009E                                     __tft_type 00A8  
                          _I2C_Write_Cmd_Only 4FD4                   __end_of_Go_Next_Alarm_Field 4F2A  
              DS3231_Turn_Off_Alarm@control_E 001D                DS3231_Turn_Off_Alarm@control_F 001E  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                      ?_Exit_Setup_Alarm_Time 0001                                     _drawPixel 4CD4  
                                    ?_get_RPM 001F                                   __tdiv_to_l_ 2AE0  
                           __size_of_spiwrite 0014                                  ??__div_to_l_ 0017  
                                  ?_bcd_2_dec 0001                        __size_of_Toggle_Heater 0016  
                         ?_I2C_Write_Cmd_Only 0013                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 51CC  
                                    _I2C_Read 4A06                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 5104                             _Initialize_Screen 1662  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                ??_Update_Setup_Heater_Screen 004A                                     _init_UART 5096  
                                  ?_dec_2_bcd 0043                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE88  
                          ?_Initialize_Screen 0001                                __size_of_scale 03E0  
                              __size_of_putch 000E                                     _read_volt 43D0  
                       ?_Increase_Heater_Temp 0001      __end_of_I2C_Write_Address_Write_One_Byte 4EAA  
   __size_of_I2C_Write_Address_Write_One_Byte 0020            ??_I2C_Write_Address_Write_One_Byte 0015  
           ?_I2C_Write_Address_Write_One_Byte 0013              _I2C_Write_Address_Write_One_Byte 4E8A  
                       ??_Decrease_Alarm_Time 005F                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0046                           ??_Initialize_Screen 004A  
                                _Select_Field 00A6                                      _INT0_isr 26FA  
                                    _INT1_isr 51F4                                      _INT2_isr 51EA  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0622  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 004A  
                                    _PIR1bits 000F9E                            __end_of__div_to_l_ 2F16  
                               _In_Time_Setup 00A2                            ??_Do_Save_New_Time 004C  
                       __size_of_Wait_One_Sec 001C                                     _setup_day 00B0  
                           DS1621_Init@Device 0016                                     fillRect@h 0025  
                                   fillRect@i 002C                                     fillRect@w 0024  
                                   fillRect@x 002B                                     fillRect@y 0023  
                      ??_Do_Setup_Heater_Temp 00F0                                     drawChar@c 002F  
                                   drawChar@i 0038                                     drawChar@j 0037  
                                   drawChar@x 0036                                     drawChar@y 002E  
               __size_of_Activate_Buzzer_2KHz 0012                 __size_of_Activate_Buzzer_4KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                   ??_Do_Save_New_Heater_Temp 004A                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 514A                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 19D6                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 0080  
                                ??_drawCircle 0024                                    printf@flag 0190  
                                  printf@fval 0192                                    printf@prec 0182  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 26FA  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 4CA2  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 4C70  
                                 _INTCON3bits 000FF0                                     copy_data0 45BA  
                                   copy_data1 45DA                                     drawtext@i 0046  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0043  
                                   drawtext@y 0039                                    ?_read_volt 003D  
                                    _Nec_code 0080                                      _Init_ADC 5198  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 2E0C  
 __size_of_Initialize_Setup_Alarm_Time_Screen 010E          ??_Initialize_Setup_Alarm_Time_Screen 004A  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 2CFE  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 4AD0                              __size_of_Do_Init 0060  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                 _Toggle_Heater 5006  
                                _Time_Elapsed 0060                           _Increase_Alarm_Time 4712  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00D8  
                                _Wait_One_Sec 4F84                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                            __end_of_fillScreen 4F84  
                                    __Lrparam 0000                            __end_of_drawCircle 2574  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 0096                              __size_of___ftadd 01C4  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftneg 0024                              __size_of___lldiv 008C  
                            __size_of___ftmul 00F8                              __size_of___llmod 0070  
                            __size_of___ftsub 0044                              __size_of___fttol 00E6  
                                    _Volt_Txt 0171                          __size_of_Set_RPM_RGB 0062  
                                    ___awtoft 4B8A                                      ___ftpack 3824  
                                    ___lbtoft 4DD6                                  ?_I2C_ReStart 0001  
                                 _fround$3338 0049                                   _fround$3339 0046  
                                    ___lltoft 4652                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 003E                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 0C60  
                            __size_of_isdigit 0022                                      _delay_ms 491C  
                                 ??_dec_2_bcd 0045                                      __ptext10 4878  
                                    __ptext11 48CA                                      __ptext20 374C  
                                    __ptext12 38EA                                      __ptext21 2BF0  
                                    __ptext13 4E8A                                      __ptext30 3F86  
                                    __ptext22 3A6A                                      __ptext14 4C70  
                                    __ptext31 3100                                      __ptext23 4EAA  
                                    __ptext15 50BC                                      __ptext40 2CFE  
                                    __ptext32 4FA0                                      __ptext24 4ECA  
                                    __ptext16 45F0                                      __ptext41 4712  
                                    __ptext33 514A                                      __ptext25 513A  
                                    __ptext17 4C02                                      __ptext50 4F68  
                                    __ptext42 4EEA                                      __ptext34 5046  
                                    __ptext26 5032                                      __ptext18 4D04  
                                    __ptext51 3670                                      __ptext43 2206  
                                    __ptext35 4FBA                                      __ptext27 3D2A  
                                    __ptext19 3C8C                                      __ptext60 47CA  
                                    __ptext52 23C6                                      __ptext44 4F0A  
                                    __ptext36 3DC4                                      __ptext28 3B20  
                                    __ptext61 4528                                      __ptext53 4D32  
                                    __ptext45 1E7C                                      __ptext37 39AA  
                                    __ptext29 2574                                      __ptext70 5208  
                                    __ptext62 496E                                      __ptext54 300E  
                                    __ptext46 515A                                      __ptext38 401A  
                                    __ptext71 50F2                                      __ptext63 505A  
                                    __ptext55 4AD0                                      __ptext47 4FEE  
                                    __ptext39 4D5E                                      __ptext80 4252  
                                    __ptext72 476E                                      __ptext64 50E0  
                                    __ptext56 29D0                                      __ptext48 1662  
                                    __ptext81 3E5A                                      __ptext73 31F0  
                                    __ptext65 506E                                      __ptext57 50CE  
                                    __ptext49 4CA2                                      __ptext90 3824  
                                    __ptext82 2AE0                                      __ptext74 001C  
                                    __ptext66 3BD6                                      __ptext58 491C  
                                    __ptext91 4DFC                                      __ptext83 2E0C  
                                    __ptext75 1282                                      __ptext67 4DD6  
                                    __ptext59 42D4                                      __ptext92 3EF0  
                                    __ptext84 4652                                      __ptext76 518A  
                                    __ptext68 34AC                                      __ptext93 358E  
                                    __ptext85 4448                                      __ptext77 4E68  
                                    __ptext69 4F84                                      __ptext94 4B0E  
                                    __ptext86 413E                                      __ptext78 1C38  
                                    __ptext95 287A                                      __ptext87 33C6  
                                    __ptext79 2F16                                      __ptext96 49BC  
                                    __ptext88 4A4E                                      __ptext97 41CA  
                                    __ptext89 2042                                      __ptext98 4CD4  
                                    __ptext99 4822                        ??_Increase_Heater_Temp 004D  
                                    _fillRect 49BC                                      _drawChar 287A  
                                    __powers_ FE61                          __end_of_Turn_Off_Fan 51C0  
            __size_of_TFT_GreenTab_Initialize 002C                 __size_of_Decrease_Heater_Temp 001A  
  __end_of_Update_Setup_Screen_Cursor_Forward 2042   __size_of_Update_Setup_Screen_Cursor_Forward 01C6  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 1E7C                                      _colstart 00AB  
                 __end_of_Go_Prev_Alarm_Field 4F0A                                      _drawtext 358E  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 3670                DS3231_Write_Alarm_Time@Address 004B  
                              ?_Toggle_Heater 0001                      __end_of_DS1621_Read_Temp 4C02  
                               __size_of_main 0262                                 ??_Do_Beep_Bad 0046  
                     __size_of_Monitor_Heater 002E                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                 Update_Screen@neg_DS1621_tempC 004E  
                              _get_duty_cycle 3C8C                                 _drawFastVLine 41CA  
                                   printf@idx 017F                                     printf@exp 018A  
                                    _spiwrite 5082                                     printf@val 018C  
                           DS3231_Init@Device 001A                                   ??_drawPixel 001B  
                                    _rowstart 00AD                      __end_of_DS3231_Read_Time 458E  
                       ??_Increase_Alarm_Time 005F                    __size_of_Initialize_Screen 0374  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 506E  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
          __end_of_Update_Setup_Heater_Screen 3E5A                    _Update_Setup_Heater_Screen 3DC4  
                               _do_update_pwm 3BD6                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
                                    scale@scl 0049                __end_of_DS3231_Read_Alarm_Time 49BC  
                                 ??_read_volt 0040                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                            __tdiv_to_l_@exp1 001F                              __tdiv_to_l_@cntr 001E  
                            __tdiv_to_l_@quot 001A                         __end_of_Decrease_Time 3BD6  
                    _Update_Setup_Time_Screen 2574                         __end_of_write_command 518A  
                       __end_of_Set_Alarm_RGB 4C70                              ___lldiv@dividend 0011  
                             fillScreen@color 0024                         _DS3231_Turn_Off_Alarm 48CA  
               DS3231_Write_Alarm_Time@Device 004A                       do_update_pwm@duty_cycle 0043  
                      __end_of_get_duty_cycle 3D2A                        __size_of_Increase_Time 00B6  
                    _Select_Heater_Temp_Field 00A7                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 004A  
                              ?_drawFastVLine 0018                                      printf@ap 0180  
                    ??_Exit_Setup_Heater_Temp 004A                           __end_of_Do_Beep_Bad 5082  
                                ??_write_data 0013                                    _TIMER1_isr 51A6  
                               fillRect@color 0026                                  ?__tdiv_to_l_ 0011  
                     _DS3231_Write_Alarm_Time 42D4                                   _printf$3341 017C  
                              ?_do_update_pwm 0001                              ___lldiv@quotient 0019  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                                _setup_minute 00B3                                  _setup_second 00B5  
                     __size_of_Init_Interrupt 0024                         __end_of_setAddrWindow 4878  
                       __end_of_Do_Setup_Time 3824                            fillRectangle@color 001B  
                             ??_Toggle_Heater 0046                             do_update_pwm@dc_I 0044  
                           do_update_pwm@dc_f 0040                                 drawChar@color 0030  
                                 _setup_month 00B4                                Set_RPM_RGB@rpm 001F  
                          __end_of_write_data 517A                     __size_of_force_nec_state0 000A  
                                drawChar@line 0035                                 ?_get_full_ADC 0011  
                    ??_check_for_button_input 005F                                  drawChar@size 0034  
           __size_of_I2C_Write_Cmd_Write_Data 0020                          __size_of_DS1621_Init 001E  
                   ?_I2C_Write_Cmd_Write_Data 0013                          __size_of_DS3231_Init 00C0  
                             ?_get_duty_cycle 0046                 __size_of_DS3231_Turn_On_Alarm 0052  
      __end_of_Update_Setup_Alarm_Time_Screen 32DC       __size_of_Update_Setup_Alarm_Time_Screen 00EC  
              _Update_Setup_Alarm_Time_Screen 31F0  
